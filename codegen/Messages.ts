// @ts-nocheck
/****************************************************************
 * WARNING THIS FILE IS AUTOGENERATED AND SHOULD NOT BE MODIFIED *
 ****************************************************************/

// tslint:disable
import { LoomI18n, Currency } from "loom-i18n";
import enLocaleData from "loom-i18n/dist/locale-data/en";

export const bundled: { [language: string]: any } = {};
bundled["en"] = {
  actions: {
    edit: "Edit",
    delete: "Delete",
    open: "Open",
    create: "Create",
    viewDetails: "View details",
    save: "Save",
    saveChanges: "Save changes",
    terminate: "Terminate",
    activate: "Activate",
    deactivate: "Deactivate",
    createModelDeployment: "Create model deployment",
    cancel: "Cancel",
    submit: "Submit",
    selectShape: "Select shape",
    close: "Close",
    loading: "Loading...",
    support: "Support",
    applyTags: "Apply tags",
    starting: "Starting...",
    creating: "Creating...",
    advancedOptions: "Show advanced options",
    hideAdvancedOptions: "Hide advanced options",
    select: "Select",
    upload: "Upload",
    start: "Start",
    moveResource: "Move resource",
    saveAsStack: "Save as stack",
  },
  labels: {
    redirectOnCreate: "View detail page on clicking create.",
    redirectOnSubmit: "View details page on clicking submit.",
    metrics: "Metrics",
    tags: "Tags",
    optional: "Optional",
    moreInfo: "More information",
  },
  icon: {
    ariaLabel: {
      warning: "Warning",
      externalLink: "External Link",
      NullIcon: "None",
    },
  },
  loggingConfiguration: {
    loggingTitle: "Logging",
    loggingEnabled: "Logging enabled",
    loggingDisabled: "Logging disabled",
    selectLogging: "Select logging",
    noLogGroupsFound: "No log groups found in this compartment",
    noLogsFound: "No logs found in this log group",
    noDefaultLogGroupSelected: "No default log group is selected",
    loggingIsNotEnabled: "Logging is not enabled",
    noDefaultLogSelected: "No default log is selected",
    autoLoggingEnabled: "Automatic creation of logs is enabled",
    loggingConfiguration: "Logging configuration",
    loggingConfigurationOverride: "Logging configuration override",
    defaultLogGroupAndAutoLog:
      "Log group selected: {groupName}. Automatic logging enabled.",
    defaultLogGroupAndLog:
      "Log group selected: {groupName}. Log selected: {logName}",
    enableLogging: "Enable logging",
    automaticLogging: "Automatic logging",
    enableAutoLogCreation: "Enable automatic log creation",
    selectALog: "Select a log",
    logGroup: "Log group",
    logName: "Log name",
    noLogGroupSelected: "No log group selected",
    noLogSelected: "No log selected",
    labels: {
      defaultLogGroup: "Default log group",
    },
    defaultLog: "Default log",
    loggingDetails: "Logging details",
    log: "Log",
    defaultLogGroup: "Log group selected: {groupName}.",
  },
  tooltips: {
    project: "Projects are a way of organizing and sharing your work.",
    compartmentSelect:
      "Select the compartment that your resource should belong to.",
    projectSelect: "Select the project that your resource should belong to.",
    modelArtifact: "Upload your model artifact here. This is required.",
    displayName: "A name is automatically created for you if not provided.",
    editDisplayName:
      "Do not leave the name field blank when editing this resource.",
    blockStorageSize: "Select a volume size that satisfies your needs.",
    modelOcid:
      "Add the OCID of the Model that will be used for this model deployment",
    jobArtifact:
      "Required if you aren't using the bring your own container option.",
    environmentVariables: "Add environment variables for your job",
    commandlineArguments: "Add command line arguments for your job",
    maximumRuntimeInMinutes:
      "Set the maximum runtime (in minutes) for your job",
    numberOfInstances:
      "Add the number of instances that will be used for this model deployment",
    jobRunLogging:
      "If no logging configuration override is selected for the job run, the default job logging will be used, if any.",
    versionLabel:
      "Version label can be added only when model is associated with a model version set",
    pipelineRunLogging:
      "If no logging configuration override is selected for the pipeline run, the default pipeline logging will be used, if any.",
    jobsBYOCEnvVar:
      "You specify your own container with the environment variable instead of uploading a job artifact.",
    customContainer:
      'Use a container image from OCI Container Registry as the deployment server. <a target="_blank" href="{href}">Learn more.</a> Only Docker images are supported.',
    containerCMD:
      "The instructions to be executed when the container starts. Use the exec format: 'executable, param1, param2'",
    containerEntrypoint:
      "The executable to run when the container is started from an image.",
    serverPort:
      "The port on which the web server serving the inference is running. Default is 8080. The port can be anything between 1024 and 65535. The following ports cannot be used 24224, 8446, 8447.",
    healthcheckPort:
      "The port on which the container HEALTHCHECK would listen. Defaults to the server port. The port can be anything between 1024 and 65535. The following ports cannot be used 24224, 8446, 8447.",
    containerCustomImage:
      "{CONTAINER_CUSTOM_IMAGE}: The full path to the Oracle Container Repository registry, image, and tag in a canonical format.",
    bareMetal:
      'Review minimum charge for bare metal compute instances. <a target="_blank" href="{href}">Learn more</a>',
    pipelineStepArtifact: "Required if the step type is custom script.",
  },
  breadcrumb: {
    projects: "Projects",
    featureStores: "Feature stores",
    featureStoreFeatureSchema: "Schemas",
    featureStoreFeatureTransformation: "Transformations",
    entities: "Entities",
    featureDefinitions: "Feature definitions",
    datasets: "Datasets",
    projectDetails: "Project details",
    featureStoreDetails: "Feature store details",
    projectDetail: "Project detail",
    notebooks: "Notebook sessions",
    datasources: "Data Sources",
    pipelineDetails: "Pipeline details",
    home: "Home",
    modelVersionSet: "Model version set",
    models: "Models",
    modelDeployments: "Model deployments",
    resourceDetails: "{resourceName} Details",
    dataScience: "Data Science",
    jobs: "Jobs",
    pipelines: "Pipelines",
    defaultConfiguration: "defaultConfiguration",
    jobRuns: "Job runs",
    workRequests: "Work requests",
    pipelineRuns: "Pipeline runs",
    pipelineStepRunDetails: "Pipeline step run details",
    pipelineRunDetails: "Pipeline run details",
    stepDetails: "Step Details",
    featureStore: "Feature Store",
    featureDefinitionDetails: "Feature definition details",
  },
  captions: {
    projects: "Projects",
    featureStores: "Feature Stores",
    notebooks: "Notebook sessions",
    models: "Models",
    jobs: "Jobs",
    entities: "Entities",
    columns: "column",
    fdp: "Fdp",
    datasets: "Datasets",
    pipelines: "Pipelines",
    jobRuns: "Job runs",
    pipelineRuns: "Pipeline runs",
    modelDeployments: "Model deployments",
    pipelineSteps: "Pipeline steps",
    pipelineStepRuns: "Pipeline step runs",
    modelDeploymentsForModel: "Model deployments for model",
  },
  detailTemplate: {
    ocid: "OCID",
    detailsLabel: "{resourceName} information",
    tagsLabel: "Tags",
  },
  errors: {
    regionUnavailable:
      "The Data Science service is not available in your currently selected region.",
    selectCompartment: "You must select a compartment.",
    nothingHere: "Nothing here? Possible reasons:",
    notFound:
      "The {resourceType} you are trying to view cannot be found in this region.",
    noAuth: "You do not have access to view this {resourceType}.",
    noListAuth: "You do not have access to list {resourceType}.",
    generic: "An unexpected error occurred.",
    fetching: "Error fetching data.",
    refreshHint: "You may need to refresh to see latest changes.",
  },
  projects: {
    linkText: "Projects",
    detailText: "Project",
    createTitle: "Create project",
    deleteTitle: "Delete project",
    editTitle: "Edit project",
    createDescription:
      "Projects enable you to organize your team's data science work.",
    deleteConfirmation:
      "Are you sure you want to delete <strong>{projectName}</strong>?",
    deleteAgreement:
      "Type <strong>{confirmationText}</strong> to confirm delete.",
    removeResourcesWarning:
      "You must remove all resources from this project before you can delete it.",
    deleteStateWarning:
      "After you click Delete, the project enters a deleting state.",
    canFailWarning:
      "If resources still exist in the project, the delete action fails and the project returns to an active state.",
    deleteFailed:
      "This project could not be removed because active resources still exist.",
    deleteInProgress: "Checking for active resources...",
    editProjectSuccessMessage: "Successfully updated a project",
    createProjectSuccessMessage: "Successfully created a project",
    saveAsStackSuccessMessage: "Successfully saved the project as stack",
    saveAsStackFailureMessage:
      "Error occured while saving the project as stack",
    shapeText: "P",
    labels: {
      compartment: "Compartment",
      description: "Description",
      name: "Name",
      timeCreated: "Created",
      createdBy: "Created by",
      summary: "Summary Information",
      state: "State",
      numberShowingText:
        "{numberShowing, plural, =0 {No Feature Stores to show} one {Showing # Feature Store} other {Showing # Feature Stores}}",
    },
    actions: {
      create: "Create project",
      moveResource: "Move resource",
      addTags: "Add tags",
    },
  },
  featureStore: {
    linkText: "Feature Stores",
  },
  featureStoreEntity: {
    linkText: "Entities",
  },
  dataSource: {
    linkText: "Data Sources",
  },
  featureStoreFeatureSchema: {
    linkText: "Feature Schemas",
  },
  featureStoreFeatureTransformation: {
    linkText: "Transformation",
  },
  featureStoreDataset: {
    linkText: "Datasets",
  },
  featureStoreFeatureDefinition: {
    detailText: "Feature definition",
    linkText: "Feature Definitions",
    shapeText: "FD",
    labels: {
      description: "Description",
      type: "Type",
      name: "Name",
      nullable: "Nullable",
      entity: "Entity",
      defaultValue: "Default Value",
      orderNumber: "Order Number",
    },
  },
  featureStores: {
    detailText: "Feature store",
    shapeText: "FS",
    labels: {
      description: "Description",
      timeCreated: "Created",
    },
  },
  warnings: {
    emptySubnetList: "No subnets in this compartment and VCN.",
    emptyVcnList: "No VCNs in this compartment.",
    emptyProjectList: "No projects in this compartment.",
    emptyJobList: "No jobs in this compartment.",
  },
  notebooks: {
    linkText: "Notebook sessions",
    detailText: "Notebook Session",
    editTitle: "Edit notebook session",
    createTitle: "Create notebook session",
    deleteTitle: "Delete notebook session",
    details: "Notebook session details",
    deleteConfirmation:
      "Are you sure you want to delete <strong>{displayName}</strong>?",
    deleteAgreement:
      "Type <strong>{confirmationText}</strong> to confirm delete.",
    deleteDisclaimer:
      "Any files or changes on the notebook session's file system that have not been backed up or committed are lost.",
    deactivateTitle: "Deactivate notebook session",
    deactivateConfirmation:
      "Are you sure you want to deactivate <strong>{displayName}</strong>?",
    deactivateDisclaimer:
      "Deactivating a notebook session updates its state to inactive. The notebook session compute instance is terminated, and the storage volume is retained. When you reactivate this notebook session, this volume is reattached to the notebook session compute instance.",
    sizeInGigabytes: "{size, number} GB",
    shapeText: "N",
    activateTitle: "Activate notebook session",
    activateDisclaimer:
      "Activating the <strong>{displayName}</strong> notebook session.",
    metricsInfoBlock:
      "Metrics are only available for newly created or activated notebook sessions. Create a new notebook session or deactivate then reactivate this one to enable metrics. If no metrics are displayed for a new notebook session, then ensure that you have permissions to read metrics.",
    metricsDocsLinkText: "Learn More",
    labels: {
      compartment: "Compartment",
      timeCreated: "Created on",
      createdBy: "Created by",
      computeResource: "Compute Resource",
      resource: "Resource",
      state: "State",
      name: "Name",
      description: "Description",
      numberShowingText:
        "{numberShowing, plural, =0 {No notebook sessions to show} one {Showing # notebook session} other {Showing # notebook sessions}}",
      instanceShape: "Compute instance shape",
      blockStorageSize: "Block storage size (in GB)",
      vcnCompartment: "VCN compartment",
      vcn: "VCN",
      subnet: "Subnet",
      computeSelectDescription: "{ocpus} core OCPU, {memory}GB memory",
      ocpusLabel: "Number of OCPUs",
      memoryLabel: "Amount of memory(GB)",
    },
    hints: {
      blockStorageSize:
        "The size must be between {minSize, number} GB and {maxSize, number} GB ({maxSizeTB, number} TB)",
      blockStorageSizeDefault:
        "Default {defaultSize, number} GB. The size must be between {minSize, number} GB and {maxSize, number} GB ({maxSizeTB, number} TB)",
      vcnMissingPermissionsHoverText:
        "Request your administrator for access to read the subnet resource to see its associated VCN.",
      subnetHint:
        "For egress access to the public internet, we recommend using a private subnet with a route to a NAT gateway. Whether a public or private subnet is chosen for a notebook session, it must have a NAT gateway and matching route table, and security list rules to achieve egress to the internet.",
    },
    actions: {
      create: "Create notebook session",
      moveResource: "Move resource",
    },
    runtimeConfig: {
      sectionHeader: "Runtime configuration",
      sectionDescription:
        "Configure your often used notebook session metadata and Git options to be ready for use when this notebook is opened.",
      sectionDescriptionTooltip:
        'This configuration isn\'t encrypted. Do not use private information like passwords.<a target="_blank" href="{href}">Use the Vault service instead.</a>.',
      sectionHelpText:
        '<a target="_blank" href="{href}">What can I do with runtime configuration?</a>',
      customEnvVarTabHeader: "Key value pairs",
      gitConfigTabHeader: "Git settings",
      previewActionText: "Preview configuration",
      gitRepoUrlInputLabel: "Git repository URL",
      gitSettingsAddUrlActionLabel: "+ Add Git setting",
      previewNoKeyLabel: "No Key",
      customEnvVarTabDescription:
        "You can use a maximum of {limit, number} key value pairs, which is available as environment variables in this notebook session.",
      customEnvVarAddNewRowText: "+ Add key value pair",
      customEnvVarKeyLabel: "Key",
      customEnvVarKeyTooltip:
        "Keys must be unique and can't be reserved variables or namespace. Keys are {min, number} - {max, number} characters.",
      customEnvVarValueLabel: "Value",
      customEnvVarValueTooltip:
        "Values are {min, number} - {max, number} characters.",
      gitSettingsTabDescription:
        "You can use up to {limit, number} <strong>public</strong> Git repositories for the notebook session. The notebook must have public internet access to connect.",
      gitSettingsURLTooltip: "URLs must be unique, and HTTPS protocol allowed.",
      duplicateGitRepoUrlError: "Duplicate Git repository URL.",
      duplicateCustomEnvVarKeyError: "Duplicate key.",
      InvalidUrlFormatError: "Wrong Git URL format.",
      GitUrlNotReachableError: "Git URL is not reachable so verify it.",
      InvalidCustomEnvVarKeyPrefixError:
        'Key can\'t start with a reserved namespace that starts with "oci_"',
      InvalidCustomEnvVarKeyFormatError:
        "Key must start with a letter or underscore, and can only contain alphanumerics and underscores.",
      hintTextCustomEnvVarKey: "For example, companyName.",
      hintTextCustomEnvVarValue: "For example, Oracle.",
      hintTextGitRepoUrl:
        "For example, https://github.com/oracle/accelerated-data-science.git.",
    },
  },
  models: {
    linkText: "Models",
    description:
      "The model catalog is a centralized and managed repository of model artifacts. Models stored in the catalog can be shared across members of a team and they can be loaded back, for example, into a notebook session. Models in the model catalog can also be deployed as HTTP endpoints through Model Deployments.",
    learnMoreText:
      '<a target="_blank" href="{href}">Learn more about the model catalog.</a>.',
    detailText: "Model",
    createTitle: "Create model",
    editTitle: "Edit model",
    addTitle: "Add model to version set",
    deleteTitle: "Delete",
    activateTitle: "Activate model",
    deactivateTitle: "Deactivation",
    schemaDefinitionTitle: "Input and output data schema",
    downloadArtifact: "Download artifact",
    uploadArtifact: "Upload artifact",
    modelArtifactTitle: "Model artifact",
    modelProvenanceTitle: "Model provenance",
    modelTaxonomyTitle: "Document model taxonomy",
    createModelLoadingText: "Creating Model...",
    createModelSuccessMessage: "Successfully created a model",
    createModelVersionSetSuccessMessage:
      "Successfully created a model version set",
    addModelToVersionSetSuccessMessage:
      "Successfully added model to version set",
    uploadArtifactLoadingText: "Uploading Artifact...",
    createProvenanceLoadingText: "Creating Provenance...",
    modelProvenanceDesc:
      "Model provenance metadata gives contextual information on the source code used to train the model stored in catalog. Your diligent tracking of the provenance metadata significantly improves model reproducibility and auditability.",
    deleteConfirmation:
      "Are you sure you want to delete <strong>{displayName}</strong>?",
    deleteAgreement:
      "Type <strong>{confirmationText}</strong> to confirm delete.",
    deleteDisclaimer:
      "Deleting this model erases the model artifacts and the model metadata.",
    deleteWarningTitle:
      "Any models used in an active model deployment will be prevented from being deleted.",
    missingArtifact: "This model's artifact is missing. Retry uploading one.",
    genericMissingArtifact:
      "Something unexpected has occurred. Artifact details are not available.",
    deactivateConfirmation:
      "Are you sure you want to deactivate <strong>{displayName}</strong>?",
    deactivateDisclaimer:
      "Deactivating a model updates its state to inactive. Inactive models cannot be used in a model deployment. Inactive models are not deleted and can later be reactivated.",
    activateConfirmation:
      "Are you sure you want to activate <strong>{displayName}</strong>?",
    activateDisclaimer:
      "Active models are currently under experimentation. By default, inactive models are archived.",
    shapeText: "M",
    labels: {
      description: "Description",
      modelArtifact: "Model artifact",
      modelVersionSet: "Model version set",
      uploadLabel: "Upload an artifact file",
      uploadArtifact: "Artifact",
      modelArtifactLabelForModelDetails: "Model artifacts",
      compartment: "Compartment",
      name: "Name",
      none: "None",
      createdBy: "Created by",
      state: "State",
      timeCreated: "Created",
      versionSetName: "Version set name",
      versionId: "Version ID",
      versionLabel: "Version label",
      selectByProject: "Select a project",
      versionSetDetails: "Version set information",
      features: "Features",
      modelInformation: "Model Information",
      numberShowingText:
        "{numberShowing, plural,one {Showing # item} other {Showing # items}}",
      modelProvenance: "Model provenance",
      modelTaxonomy: "Model taxonomy",
      documentModelProvenance: "Document model provenance",
      modelProvenanceSelect:
        "Model provenance documents the model training code and the training environment that was used to create the model.",
      modelVersionSetSelect:
        "The model version set controls the lifecycle of the namespace/lineage of versions.",
      repositoryUrl: "Git Repository URL",
      gitCommit: "Git Commit",
      gitBranch: "Git Branch",
      scriptDir: "Model Directory",
      trainingScript: "Training Script",
      modelTaxonomyDescription:
        "Model taxonomy allows you to document your models use case, machine learning framework, hyperparameters, and so on. In addition, you can create custom metadata to further document your model. ",
      schemaDefinition: "Schema definition",
      modelSchemaDescription:
        "Model input and output data schema allows you to define and document the required features that are necessary to make a model prediction as well as the schema of the predictions returned by the model.",
      artifactDescription:
        "A model artifact is a ZIP archive of the files necessary to deploy your model as a model deployment or load it back in a notebook session.",
      fileSelectorText: "Drop a file or",
      fileSelectorBrowseLinkText: "select a file.",
      moveResourceType: "model application",
      compartmentSelectLabel:
        "Available active model version sets in compartment {compartmentName} and in project {projectName}.",
    },
    actions: {
      create: "Create model",
      configure: "Configure",
      createModelVersionSet: "Create model version set",
      delete: "Delete",
      downloadSampleArtifact: "Download sample artifact ZIP",
      downloadArtifact: "Download model artifacts",
      cancelDownloadArtifact: "Cancel Download",
      retryDownloadArtifact: "Retry Download",
      retryUpload: "Retry Upload",
      upload: "Upload",
      edit: "Edit",
      add: "Add",
      addModelToVersionSet: "Add model to version set",
      uploadArtifact: "Upload Artifact",
      downloadBoilerPlateArtifactCode: "Download sample artifact ZIP",
      select: "Select",
      addCustomAttribute: "+ Another Custom Attribute",
    },
    resources: {
      modelDeploymentsForModel: {
        linkText: "Associated model deployments",
        description: "List of model deployments that are using this model.",
        compartmentName: "Compartment name",
      },
      modelTaxonomy: {
        linkText: "Model taxonomy",
        description:
          "Model taxonomy allows you to describe the model you are saving to the model catalog. You can use the pre-allocated fields under Taxonomy for documenting the machine learning use case, the machine learning model framework, version, estimator object or the model hyperparameters. All of these are optional.You can also create custom attributes by creating label-value pairs.",
        definedMetadataLabel: "Taxonomy",
        customMetadataLabel: "Custom model attributes",
        selectCategory: "Select category",
        all: "All",
      },
      modelProvenance: {
        title: "Model provenance",
        description:
          "Model provenance is a piece of documentation that helps you improve the model reproducibility and auditability. You can document the resource that the model was trained in (either a notebook session or job run), and the Git reference to the training source code. These parameters are automatically extracted when you save a model with the Accelerated Data Science (ADS) SDK.",
        TrainingResourceOcid: "Training resource",
        ModelTrainingSourceCode: "Model training source code",
        errorMessages: {
          notFound:
            "The resource with this OCID cannot be found or you do not have permissions to access it.",
        },
        resource: "Resource",
        compartment: "Compartment",
        jobRun: "Job run",
        notebookSession: "Notebook session",
        dataScienceNotebookSession: "datasciencenotebooksession",
        dataScienceJobRun: "datasciencejobrun",
        columns: {
          resourceName: "Resource name",
          resourceType: "Resource type",
          compartmentName: "Compartment name",
          status: "Status",
          createdBy: "Created by",
          createdOn: "Created",
        },
      },
    },
    selectPanes: {
      modelVersionSet: {
        configureTitle: "Configure model version set",
        selectedInputLabel:
          "Version set name: {versionSetName}, Version label: {versionLabel}",
        description:
          "Users can configure the lineage of versions to a machine learning model.",
        table: {
          name: "Model name",
        },
        labels: {
          modelVersionSetConfigurationOptions:
            "Select or Create Model Version Set",
          description: "Description",
          compartment: "Compartment",
          projectId: "Project ID",
          name: "version set name",
          versions: "Add additional models to the version set",
          selectFromExistingGroups: "Select from existing version sets",
          createNewModelVersionSet: "Create model in a new version set",
          versionLabel: "Version label",
          fieldSetVersionLabel: "Add version label for model",
          addModelsToModelVersionTabs: "Add models",
          tags: "Tags",
        },
        modelVersionSetTable: {
          description:
            'Select the models you want to add to the model version set. Version numbers are automatically generated for each model you add to the set. \nVersion numbers (integers) are assigned in ascending order based on the "Created at" field from old to new',
        },
        tooltip: {
          versionLabel: "Provide version label",
        },
        hints: {
          name: "A name should be unique within a compartment",
        },
        toastNotification: "Successfully configured model version set",
      },
      modelProvenanceSelect: {
        title: "Document model provenance",
        label: "Select model provenance",
        description:
          "Model provenance is a piece of documentation that helps you improve the model reproducibility and auditability. You can document the resource that the model was trained in (either a notebook session or job run), and the Git reference to the training source code. These parameters are automatically extracted when you save a model with the Accelerated Data Science (ADS) SDK.",
        toastNotification: "Successfully selected {name}",
        tooltip: {
          gitRepoURL: "URL of the remote Git repository",
          gitCommit: "Commit ID of Git repository",
          gitBranch: "Branch of the Git repository",
          localModelDirectory: "Local path to the model artifact directory",
          modelTrainingScript:
            "Model training scripts associated to training dataset",
        },
        actions: {
          search: "Search",
        },
        errorMessages: {
          notValidOCID: "Invalid OCID training id",
          notFound:
            "The resource with this OCID cannot be found or you do not have permissions to access it.",
        },
        labels: {
          notebookSessionResource: "Notebook session",
          jobRunResource: "Job run",
          selectByCompartmentAndProject: "Choose a project",
          selectByProjectLabel: "Select a project",
          searchByOCIDLabel: "Notebook session OCID",
          searchByJobRunOCIDLabel: "Job run OCID",
          searchOCID: "Search by OCID",
          selectedInputLabel:
            "Resource: {resource}, Compartment: {compartment}",
          resource: "Resource: ",
          compartment: "Compartment: ",
          OcidtableLabel:
            "Available {resource} in project {projectName} and in compartment {compartmentName}.",
        },
        trainingCode: {
          optionText: "Training code",
          description:
            "A reference to the git repository and commit ID where the model training code was stored.",
          label: {
            gitBranch: "Git branch",
            gitCommit: "Git commit",
            scriptDir: "Local model directory",
            trainingScript: "Model training script",
            repositoryUrl: "Git repository URL",
          },
        },
        jobsRun: {
          label: "Find a job run ",
          optionText: "Job run",
          tooltip:
            "Add the OCID of the Job Run that was used to train the model.",
          cardDesc:
            "Choose a compartment for both the project and the job run. If your job run is in a different compartment than the project, then enter or search for the job run OCID.",
          description:
            "Job runs are batch execution of custom Python scripts. You can use them to train models.",
        },
        notebookSession: {
          label: "Find a notebook session",
          tooltip:
            "Add the OCID of the notebook session that was used to train the model.",
          compartmentTableLabel:
            'Only active resources are displayed in the table. If your {trainingOcidType} is in a different state, use the "Search by OCID" option. Available {trainingOcidType} in project {projectName} and in compartment {compartmentName}.',
          optionText: "Notebook session",
          cardDesc:
            "Choose a compartment for both the project and the notebook session. If your notebook session is in a different compartment than the project, then enter or search for the notebook session OCID.",
          description:
            "Notebook sessions are interactive coding environments for building and training models.",
        },
      },
      artifactSelect: {
        title: "Upload model artifact",
        message:
          "A model artifact is a ZIP archive of the files necessary to deploy your model as a model deployment or load it back in a notebook session.",
        actions: {
          search: "Search",
        },
        labels: {
          selectedArtifact: "Selected artifact: ",
        },
      },
      modelTaxonomySelect: {
        title: "Document model taxonomy",
        message:
          "Select a model taxonomy to describe the model to save to the model catalog. You can add custom attributes by creating label-value pairs.",
        labels: {
          useCase: "Use case",
          frameworkName: "Model framework",
          frameworkVersion: "Model framework version",
          algorithm: "Model algorithm or model estimator object",
          hyperParameters: "Model hyperparameters",
          artifactTestResults: "Artifact test results",
          label: "Label",
          value: "Value",
          category: "Category",
          description: "Description",
          customAttribute: "Custom attribute",
          useCaseType: "Use case type",
          framework: "Framework",
          estimatorObject: "Estimator object",
          taxonomyType: "Taxonomy type",
          taxonomyValue: "Value",
        },
        tooltips: {
          useCaseType: "Use case associated with the model.",
          frameworkName: "Python library used to train the model.",
          frameworkVersion: "Version of the machine learning library.",
          algorithm: "Algorithm or model estimator class.",
          hyperParameters: "The model hyperparameters in JSON format.",
          artifactTestResults: "Artifact test results in JSON format.",
        },
        modelTaxonomy: {
          label: "Model taxonomy",
          description:
            "A series of preset labels that you can use to document the model. ",
        },
        customAttributes: {
          label: "Create custom label and value attribute pairs.",
          numberShowingText:
            "{numberShowing, plural, =0 {No Items to show} one {Showing # Item} other {Showing # Items}}",
        },
      },
      modelSchemaSelect: {
        title: "Model input and output data schema",
        message:
          'The model input schema is a JSON file that provides a schema definition of the features expected by the model artifact score.py predict() function. The output schema documents the schema of the model predictions. This is also a JSON file. Refer to this section of our <a target="_blank" href="{href}">service documentation</a> to document your input and output data schema.',
        labels: {
          uploadInputSchema: "Select input schema",
          uploadInputSchemaDescription:
            "The input schema is the sequence of steps to pass as an input to an orchestration API to enable actual workflow execution.",
          uploadOutputSchema: "Select output schema",
          uploadOutputSchemaDescription:
            "The output schema specifies what and how the data results are returned.",
          inputSchemaUploadLabel: "Upload an input schema file",
          outputSchemaUploadLabel: "Upload an output schema file",
          inputResourceType: "Input data schema ",
          outputResourceType: "Output data schema ",
          uploadFileTypeRequirementText: "{fileType} file only",
          uploadFileTypeError: "Invalid file type.",
          inputSchema: "Input schema",
          outputSchema: "Output schema",
        },
      },
    },
    errorMessages: {
      customAttributesLimit:
        "Custom metadata is limited to a maximum of 50 entries.",
      addModelToMVSDetailsDialog: {
        noModelSelected: "No model is selected",
      },
      modelMoveToVersionSetDialog: {
        noModelVersionSelected: "No model version set is selected",
      },
    },
    modelIntrospection: {
      title: "Model introspection",
      description:
        "Model introspection captures the results of the tests run on the client side before the model is saved to the model catalog.",
      error: "No tests have been run on the model artifact.",
      status: {
        notTested: "Not tested",
        success: "Success",
        failed: "Failed",
        warning: "Warning",
      },
    },
    hints: {
      modelArtifact:
        "Artifact uploads from the console are limited to less than {maxSize, number} MiB",
      example: "Example: {exampleString}",
    },
  },
  modelSchema: {
    title: "Input and output data schema",
    description:
      "The input schema is the sequence of steps to pass as an input to an orchestration API to enable actual workflow execution. The output schema specifies what and how the data results are returned.",
    inputSchema: "Input data schema",
    outputSchema: "Output data schema",
    NoDataFound: "No items found.",
    copy: "Copy to clipboard",
  },
  modelVersionSets: {
    resources: {
      modelMemberships: "Model memberships",
      workRequests: {
        linkText: "Work requests",
      },
      models: "Models",
    },
    actions: {
      loading: "Adding models",
      modelMemberships: {
        compareVersion: "Compare versions",
      },
    },
    compareVersions: {
      category: "Category",
      dropDownVersion: "{displayName} (Version {v})",
      compareTo: "compare to",
      general: "General",
      provenance: "Provenance",
      taxonomy: "Taxonomy",
      compareCategories: "Compare categories",
      highlightDifferences: "Highlight differences",
      version: "Version",
      versionLabel: "Version label",
      artifactSize: "Artifact size",
      tags: "Tags",
      createdBy: "Created by",
      created: "Created",
      framework: "Framework",
      frameworkVersion: "Framework version",
      useCase: "Use case",
      modelAlgorithm: "Model algorithm/stimator object",
      hyperparameters: "Hyperparameters",
      tabs: {
        associateMDTab: {
          associateMDTab: "Associated model deployment ",
          latestMDCreated: "Latest model deployment created",
          totalNumberOfMD: "Total number of model deployments",
          totalActiveMD: "Active model deployments",
        },
        customAttributesTab: {
          customAttributesTabLabel: "Custom model attributes",
        },
        inputAndOutputSchemaTab: {
          inputAndOutputSchemaTabLabel: "Input and output data schema",
        },
      },
    },
    deleteTitle: "Delete",
    createTitle: "Create model version set",
    editTitle: "Edit version set",
    error: {
      mvsModelAssociationError:
        "Error associating {modelName}.Please try again.",
      mvsModelsAssociationError:
        "Error associating {modelName}. Models starting from {startingModelName} to {lastModelName} are not associated.Please try again.",
    },
    createModelVersionSetSuccessMessage:
      "Successfully created a model version set",
    deleteConfirmation: "Are you sure you want to delete model version set?",
    deleteAgreement:
      "Type <strong>{confirmationText}</strong> to confirm delete.",
    moveResourceType: "model version set",
    labels: {
      description: "Description",
      compartment: "Compartment",
      name: "Version set name",
      status: "Status",
      timeCreated: "Created",
      selectModels: "Select the models to add to the version set",
      selectModelsDescription:
        "Select the models that you want to add to this model version set. Only models that aren't already in a version set are listed. For each model that you add to the set, version numbers are automatically generated. Version numbers (integers) are assigned in ascending order based on when the models were created, from old to new.",
      versionSetDetails: "Version set information",
      OCID: "OCID",
      createdBy: "Created by",
      numberOfVersions: "Number of versions",
      isDeleteRelatedModels:
        "Delete the models that are part of the version set.",
    },
  },
  modelDeployments: {
    linkText: "Model deployments",
    detailText: "Model deployment",
    deactivateTitle: "Deactivate Model Deployment",
    deactivateConfirmation:
      "Are you sure you want to deactivate <strong>{displayName}</strong>?",
    deactivateDisclaimer:
      "Deactivating a model deployment updates its state to inactive.",
    activateTitle: "Activate model deployment",
    activateConfirmation:
      "Are you sure you want to activate <strong>{displayName}</strong>?",
    createTitle: "Create model deployment",
    editTitle: "Edit model deployment",
    deleteTitle: "Delete",
    deleteConfirmation:
      "Are you sure you want to delete <strong>{modelDeploymentName}</strong>?",
    deleteAgreement: "To confirm, enter <strong>{confirmationText}</strong>.",
    deleteWarningTitle:
      "The logs and the model deployment resource are deleted in sequence. The process stops if an error occurs or you don't have permission to delete the logs or the model deployment. Resources deleted up to that point cannot be restored.",
    modelSelectTitle: "Models",
    computeTitle: "Compute",
    loggingTitle: "Logging",
    shapeText: "MD",
    noImagesFound: "There are no images present in the selected repository",
    noRepositoryFound:
      "There are no repositories present in the selected compartment",
    labels: {
      name: "Name",
      modelDeploymentName: "Model deployment name",
      description: "Description",
      state: "State",
      computeInstanceShape: "Compute instance shape",
      numberOfInstances: "Number of instances",
      ocpuCount: "OCPU count",
      vmShape: "VM shape series",
      createdBy: "Created by",
      createdOn: "Created",
      compartment: "Compartment",
      compartmentOcid: "OCID",
      modelOcid: "Model OCID",
      compute: "Compute",
      modelSelect: "Select a model stored in the model catalog",
      computeSelect:
        "Select the VM shape and limits you want to apply to your model deployment",
      loggingSelect:
        "Select the logging configuration for access and predict logs",
      accessLogsConfigured: "Access logs configured",
      predictLogsConfigured: "Predict logs configured",
      bothLogsConfigured: "Access logs and predict logs configured",
      generalInformation: "General information",
      deploymentModeMode: "Mode",
      deploymentModeHTTPS: "Real time inference (HTTPS)",
      deploymentModeStreaming: "Streaming",
      inputStream: "Input stream",
      outputStream: "Output stream",
      computeBandwidth: "Load balancer bandwidth",
      modelsInformation: "Models",
      modelName: "Deployed model",
      deleteLogs:
        "By default we do not delete logs associated with your deployment.",
      deleteLogsCheckbox:
        "Also delete the log associated with <strong>{displayName}</strong> deployment",
      deploymentMode: "Deployment mode",
      shapeName: "Shape name",
      numberOCPUs: "Number of OCPUs",
      memoryInGBs: "Memory (GB)",
      bandwidthUnits: "{bandwidthMbps} Mbps",
      numberShowingText:
        "{numberShowing, plural, =0 {No items to show} one {Showing # item} other {Showing # items}}",
      defaultConfiguration: "Default configuration",
      environmentVariableKey: "Custom environment variable key",
      environmentVariableValue: "Value",
      useCustomContainerImage: "Use a custom container image",
      image: "Image",
      repository: "Repository",
      containerCommand: "CMD",
      containerEntrypoint: "Entrypoint",
      serverPort: "Server port",
      healthcheckPort: "Health check port",
      customEnvironmentVariables: "Custom environment variables",
      configuration: "Configuration",
      digest: "Digest",
      digestMismatchWaning:
        "The selected image has a different digest than the current deployed image. Make sure you selected the correct image you wish to use for the updated deployment.\nCurrent digest: {currentDigest} \nSelected digest: {selectedDigest}",
    },
    actions: {
      create: "Create model deployment",
      delete: "Delete",
      select: "Select",
      edit: "Edit",
      moveResource: " Move resource",
      addEnvironmentVariable: "+ Additional custom environment key",
    },
    errorMessages: {
      notAModel: "This resource is not a Data Science model",
      notFound: "The resource with this OCID cannot be found",
      notValidNumberOfInstances: "Number of instances is not valid",
      enterNumberBetweenMinAndMax:
        "Enter an integer number between {min} and {max}",
      selectShape: "Select the VM shape",
      errorDeletingLog: "Error deleting associated log entities",
      envVarKeyLimits:
        "Key must be alphanumeric, must start with a letter and length between 2-32 characters",
      envVarKeyLimitsEndingUnderscore: "Key should not end with underscore",
      envVarValueLimitsMandatoryKey: "Key is mandatory for value",
      envVarsMaxLength:
        "Total custom environment variable size cannot exceed 2,048 characters",
      cmdNEntryPointLimit:
        "Total length of CMD & ENTRYPOINT cannot exceed 2,048 characters",
      listImagesAPIFailed: "Failed to get container images",
      getCompartmentFailed: "Failed to get compartment information",
      listReposAPIFailed: "Failed to get container image repositories",
      listImagesApiInTenancyFailed: "Failed to get container images in tenancy",
    },
    resources: {
      monitoring: {
        linkText: "Metrics",
        friendlyNames: {
          predictRequestCount: "Predict request count",
          predictResponseSuccessRate: "Predict response - Success rate",
          predictResponseStatus: "Predict response - Status",
          predictLatency: "Predict latency",
          bandwidth: "Predict bandwidth utilization",
          cpuUtilization: "CPU utilization",
          memoryUtilization: "Memory utilization",
          networkBytes: "Network receive and transmit bytes",
        },
        metadata: {
          predictRequestCount:
            "The number of incoming requests for prediction.",
          predictResponseSuccessRate:
            'The rate at which a successful inference call is made. Calculated based on "success * 100 / Total"',
          predictResponseStatus:
            "Comparison of success and failure response based on HTTP status code and status family.",
          predictLatency:
            "Total time in milliseconds from request to response. This is affected by the network latency and the Predict functional code.",
          bandwidth:
            "Percentage of bandwidth utilization. Calculated based on bandwidth provisioned and consumed.",
          cpuUtilization:
            "Activity level from CPU. Expressed as a percentage of total time (busy and idle) versus idle time. A typical alarm threshold is 90 percent.",
          memoryUtilization:
            "Space currently in use. Measured by pages. Expressed as a percentage of used pages versus unused pages. A typical alarm threshold is 85 percent.",
          networkBytes:
            "Network receipt and transmission throughput. Expressed as bytes received per second.",
        },
      },
      workRequests: {
        linkText: "Work requests",
      },
      invokingYourModel: {
        linkText: "Invoking your model",
        modelEndpointTitle: "Your model HTTP endpoint",
        sdkTitle: "Calling your model from the OCI {sdkName}",
      },
      logs: {
        linkText: "Logs",
        noLogSelected: "No log selected",
        labels: {
          category: "Category",
          state: "State",
          logName: "Log name",
          logGroup: "Log group",
        },
        logType: {
          predict: "Predict",
          access: "Access",
        },
        status: {
          active: "Active",
          inactive: "Inactive",
          notFound: "Not accessible",
        },
      },
    },
    shapeFamilies: {
      intelSkylake: {
        label: "Intel",
        description:
          "Fixed OCPU count. Latest generation Intel standard shapes.",
      },
    },
    selectPanes: {
      modelSelect: {
        title: "Select models",
        message:
          "Select a model to deploy from the model catalog. Either select a compartment to list models or copy a model OCID directly.",
        labels: {
          SelectByCompartment: "Select a model compartment",
          SelectFromCompartmentList: "Select from compartment list",
          SelectUsingOCID: "Using OCID",
          searchOCID: "Search OCID",
          selectFromProjectList: "Select from project list",
        },
        tooltips: {
          searchOCID:
            "Add the OCID of the model that will be used for this model deployment",
        },
        actions: {
          search: "Search",
        },
        customAttributes: {
          numberShowingText:
            "{numberShowing, plural, =0 {No models to show} one {Showing # model} other {Showing # models}}",
        },
      },
      computeSelect: {
        title: "Select compute shape",
        customAttributes: {
          numberShowingText:
            "{numberShowing, plural, =0 {No shapes to show} one {Showing # shape} other {Showing # shapes}}",
        },
      },
      loggingSelect: {
        title: "Select logging",
        accessLogsTitle: "Access logs",
        predictLogsTitle: "Predict logs",
        compartment: "Compartment",
        logGroup: "Log group",
        logName: "Log name",
        noLogGroupsFound: "No log groups found in this compartment",
        noLogsFound: "No logs found in this log group",
        errorFetchingLogs:
          "An error occurred when fetching logs for the above log group",
        learnMore: "Learn more",
        tooltips: {
          accessLogs:
            "Access logs captures detailed information about requests sent to the model endpoint such as the time the request was received, error codes, etc.",
          predictLogs:
            "Predict logs originate from custom code execution and can be emitted by sending messages to stdout/stderr in the model inference code base.",
        },
      },
    },
    deploymentMode: {
      helpText: "Select the serving mode to use with this model deployment.",
      https: {
        label: "Real time inference (HTTPS)",
        description: "When serving the model deployment as a web endpoint.",
        helpText:
          "Select the bandwidth supported by the load balancer (in Mbps).",
      },
      streaming: {
        label: "Streaming mode",
        description: "When serving the model deployment to a Streaming stream.",
        inputHelpText: "Select a streaming service stream for your input",
        outputHelpText: "Select a streaming service stream for your output",
        compartmentLabel: "Compartment",
        streamLabel: "Stream",
      },
    },
  },
  uploadModelArtifact: {
    information: {
      modelArtifactInfo:
        'A <a target="_blank" href="{href}">model artifact</a> is a ZIP archive of the files necessary to run your models. The artifact must have these two files :',
      line1: "score.py which defines the contract of your model.",
      line2:
        "runtime.yaml which describes the conda environment in which the model should run.",
    },
    resourceType: "Model artifact",
    uploadSuccessNotification: "Successfully uploaded model artifact",
    uploadFailureNotification: "Model artifact upload failure",
  },
  workRequests: {
    linkText: "Work Requests",
    detailText: "Work Requests",
    breadCrumbsText: "Work Requests Details",
    shapeText: "WR",
    progressMsgText: "{count, number}% completed",
    labels: {
      operation: "Operation",
      state: "State",
      completionPercentage: "% Complete",
      timeAccepted: "Accepted",
      timeStarted: "Started",
      timeFinished: "Finished",
    },
    status: {
      ACCEPTED: "Accepted",
      IN_PROGRESS: "In progress",
      FAILED: "Failed",
      SUCCEEDED: "Succeeded",
      CANCELING: "Canceling",
      CANCELED: "Canceled",
    },
    resources: {
      logs: {
        linkText: "Log Messages",
        labels: {
          message: "Message",
          timestamp: "Timestamp",
        },
        errors: {
          errorFetchingLogs:
            "An error occurred when fetching logs for the above work request.",
        },
      },
      errors: {
        linkText: "Error Messages",
        labels: {
          code: "Code",
          message: "Message",
          timestamp: "Timestamp",
        },
        errors: {
          errorFetchingErrors:
            "An error occurred when fetching error messages for the above work request.",
        },
      },
      associatedResources: {
        linkText: "Associated Resources",
        labels: {
          resourceName: "Name",
          resourceType: "Resource Type",
          ocid: "OCID",
        },
        errors: {
          errorFetchingAssociatedResources:
            "An error occured when fetching associated resources for the above work request.",
        },
      },
    },
  },
  sidePanels: {
    scope: {
      title: "Scope",
    },
    filters: {
      title: "Filters",
      lifecycleState: {
        ACTIVE: "Active",
        INACTIVE: "Inactive",
        DELETED: "Deleted",
        DELETING: "Deleting",
        FAILED: "Failed",
        CREATING: "Creating",
        UPDATING: "Updating",
        NEEDS_ATTENTION: "Needs attention",
        ACCEPTED: "Accepted",
        IN_PROGRESS: "In progress",
        SUCCEEDED: "Succeeded",
        CANCELING: "Canceling",
        CANCELED: "Canceled",
        WAITING: "Waiting",
        SKIPPED: "Skipped",
      },
      fullDate: "{currentDateTime, date, fullDateTime}",
      createdStartDate: "Created after",
      createdEndDate: "Created before",
      dateRangeToday: "Today",
      dateRangeYesterday: "Yesterday",
      dateRangePastThreeDays: "Past 3 days",
      allUsers: "All users",
      all: "All",
      modelVersionSetFilter: "modelVersionSet-search-filter",
      versionLabelFilter: "Label-search-filter",
    },
    modelSelect: {
      title: "Select Models",
      message:
        "Select a model to deploy from the model catalog. Either select a compartment to list models or copy a model OCID directly.",
      labels: {
        SelectByCompartment: "Select a Model Compartment",
        SelectFromCompartmentList: "Select From Compartment List",
        SelectUsingOCID: "Using OCID",
        searchOCID: "Search OCID",
      },
      tooltips: {
        searchOCID:
          "Add the OCID of the Model that will be used for this model deployment",
      },
      actions: {
        search: "Search",
      },
    },
  },
  validation: {
    required: "This is a required field.",
    invalidValue: "Invalid value entered.",
    minLength: "This must be at least {min, number} characters.",
    maxLength: "This cannot exceed {max, number} characters.",
    maxSize: "{type} size limit exceeded.",
    minSize: "{type} size cannot be zero.",
    invalidJson:
      "{type} only accepts a valid {fileType} string. Verify the {fileType} syntax.",
    invalidRangeValue: "Select a value between {min} and {max}.",
    requiredPipelineMlStepJob:
      "This is a required field. Please select a compartment that has jobs.",
    byocEnvVar:
      "CONTAINER_CUSTOM_IMAGE is required as an environment variable key.",
  },
  upload: {
    progressMsgText: "{count, number}% completed",
    size: {
      bytes: "{size, number} bytes",
      gib: "{size, number} GB",
      kib: "{size, number} KB",
      mib: "{size, number} MB",
      pib: "{size, number} PB",
      tib: "{size, number} TB",
    },
    failed: "Upload Failed",
    finished: "Finished",
  },
  dates: {
    fullDateTime: "{date, date, fullDateTime}",
  },
  metricsChartList: {
    cpuMetadata:
      "Activity level from CPU. Expressed as a percentage of total time (busy and idle) versus idle time. A typical alarm threshold is 90 percent.",
    memoryMetadata:
      "Space currently in use. Measured by pages. Expressed as a percentage of used pages versus unused pages. A typical alarm threshold is 85 percent.",
    networkInMetadata:
      "Network receipt throughput. Expressed as bytes received per second.",
    networkOutMetadata:
      "Network transmission throughput. Expressed as bytes transmitted per second.",
    cpuFriendly: "CPU Utilization",
    memoryFriendly: "Memory Utilization",
    networkInFriendly: "Network Receive Bytes",
    networkOutFriendly: "Network Transmit Bytes",
  },
  dsPrereq: {
    title: "Data Science Prerequisites",
    showMore: "Show more information",
    showLess: "Show less information",
    intro:
      "Before you can start using Data Science, your tenancy administrator should set up the following networking, dynamic group, and policies.",
    step1Title: "<strong>Step 1) Create VCN and Subnets</strong>",
    step1CreateVcn: "Create a VCN and subnets using",
    step1Vcn: "Virtual Cloud Networks",
    step1VcnWizard: "Start VCN Wizard",
    step1VcnOption: "VCN with Internet Connectivity option.",
    step1Natgw:
      "The Networking Quickstart option automatically creates the necessary <em>private</em> subnet with a NAT gateway.",
    step2Title: "<strong>Step 2) Create Dynamic Group</strong>",
    step2CreateDg: "Create a dynamic group with the following matching rule:",
    step3Title: "<strong>Step 3) Create Policies</strong>",
    step3Create: "Create a",
    step3Policy: "policy",
    step3InRoot: "in the root compartment with the following statements:",
    step31Title: "<strong>3.1 Service Policies</strong>",
    step32Title: "<strong>3.2 Non-Administrator User Policies</strong>",
    step33Title: "<strong>3.3 Dynamic Group Policies</strong>",
    forMoreInfo:
      "For more information on configuring your tenancy, including how to restrict access to a specific compartment, see the",
    documentation: "documentation",
  },
  pipelineRun: {
    shapeText: "PR",
    linkText: "Pipeline runs",
    detailText: "Pipeline run",
    deleteTitle: "Delete confirmation",
    deleteFailed:
      "This pipeline run couldn‘t be removed because active resources still exist.",
    deleteInProgress: "Checking for active resources...",
    deleteConfirmation:
      "Are you sure you want to delete the <strong>{name}</strong> pipeline run?",
    cancelTitle: "Cancel pipeline run",
    cancelConfirmation:
      "Are you sure you want to cancel the <strong>{name}</strong> pipeline run?",
    cancelAgreement:
      "Type <strong>{confirmationText}</strong> to confirm cancel.",
    deleteWarningTitle:
      "All step runs of this pipeline run will also be deleted.",
    deleteAgreement:
      "Type <strong>{confirmationText}</strong> to confirm delete.",
    pipelineRunLoggingTitle: "Logging configuration override",
    createPipelineRunSuccess: "Successfully started {name}.",
    editPipelineRunSuccess: "Successfully updated {name}.",
    editTitle: "Edit pipeline run",
    labels: {
      description: "Description",
      name: "Name",
      state: "State",
      createdBy: "Created by",
      timeAccepted: "Time accepted",
      timeStarted: "Time started",
      timeFinished: "Time finished",
      timeCreated: "Created on",
      numberShowingText:
        "{numberShowing, plural, =0 {No pipeline run to show} one {Showing # pipeline run} other {Showing # pipeline runs}}",
      pipelineConfigurationOverride: "Pipeline configuration override",
      pipelineRunInformation: "General information",
      pipelineStepConfigurationOverride: "Pipeline step configuration override",
    },
    actions: {
      start: "Start a pipeline run",
      edit: "Edit",
      cancel: "Cancel",
      confirm: "Confirm",
      clone: "Clone",
      cloneAJobRun: "Clone a pipeline run",
      cloneJobRun: "Clone pipeline run",
      delete: "Delete",
      create: "Start a pipeline run",
      moveResource: "Move resource",
    },
    hints: {
      maxRuntimeInMinutes:
        "The runtime must be between {minSize, number} and {maxSize, number} minutes.",
    },
    monitoring: {
      linkText: "Metrics",
      friendlyNames: {
        cpuUtilization: "CPU Utilization",
        memoryUtilization: "Memory Utilization",
        networkBytesIn: "Network Bytes In",
        networkBytesOut: "Network Bytes Out",
        diskUtilization: "Disk Utilization",
      },
      metadata: {
        cpuUtilization: "Pipeline step run CPU/GPU utilization",
        memoryUtilization: "Pipeline step run memory utilization",
        networkBytesIn: "Pipeline step run network bytes in",
        networkBytesOut: "Pipeline step run network bytes out",
        diskUtilization: "Pipeline step run disk utilization",
      },
    },
  },
  pipelineStep: {
    linkText: "Steps",
    editPipelineStepSuccess: "Successfully updated {name}.",
    none: "None",
    labels: {
      stepInformation: "Step Information",
      generalInformation: "General information",
      stepArtifact: "Step artifact",
      description: "Description",
      type: "Type",
      dependsOn: "Depends on",
      job: "Job",
      defaultConfiguration: "Default Configuration",
      tag: "Tag",
      infrastructureConfiguration: "Infrastructure configuration",
      shapeName: "Shape",
      blockStorage: "Block Storage",
      stepConfiguration: "Step configuration",
      buildByJobs: "Build by jobs",
      buildByJobsDescription: "Use an existing job as a pipeline step.",
      buildByScript: "Build by script",
      buildByScriptDescription: "Use a script as a pipeline step.",
      computeLabels: {
        shapeName: "Shape name",
        numberOCPUs: "Number of OCPUs",
        memoryInGBs: "Memory (GB)",
        fastLaunchCapable: "Fast launch capable",
        isFastLaunchCapable: "Yes",
        isNotFastLaunchCapable: "No",
      },
      numberShowingText:
        "{numberShowing, plural, =0 {No pipeline step to show} one {Showing # pipeline step} other {Showing # pipeline steps}}",
    },
    uploadStepArtifact: "Upload step artifact",
    successfullyUploadedArtifact: "Successfully uploaded step artifact.",
    createPanelTitle: "Add pipeline step",
    deleteTitle: "Delete pipeline step",
    editPanelTitle: "Edit pipeline step",
    deleteConfirmation:
      "Are you sure you want to delete <strong>{pipelineStepName}</strong>?",
    deleteWarningTitle:
      "The following steps depend on the above step: <strong>{dependentStepNames}</strong>",
    defaultText:
      "Add steps to create the pipeline workflow. Each step can have dependencies on other steps to define the workflow order.",
    learnMore: "Learn more",
    hints: {
      dependsOn:
        "Select other steps from the pipeline to be completed before running this step.",
      jobName: "Select an existing job to be run as the pipeline step.",
      blockStorageSize:
        "Must be between {minSize, number} and {maxSize, number} GB.",
    },
    tooltips: {
      artifactUploaded: "Step artifact was already uploaded.",
    },
    errorMessages: {
      noHeadingNumber: "Cannot begin with number",
      noNonAlphanumericOrUnderscoreOrSpace:
        "Cannot have characters other than letters, numbers, spaces and underscores.",
      noDuplicates: "Can't have duplicate step names.",
    },
    actions: {
      edit: "Edit",
      delete: "Delete",
      downloadArtifact: "Download artifact",
      uploadArtifact: "Upload artifact",
    },
  },
  pipelineStepRun: {
    linkText: "Step runs",
    labels: {
      state: "State",
      lifecycleDetails: "Lifecycle details",
      name: "Name",
      timeStarted: "Time started",
      timeFinished: "Time finished",
      runInformation: "Pipeline run information",
      numberShowingText:
        "{numberShowing, plural, =0 {No pipeline step run to show} one {Showing # pipeline step run} other {Showing # pipeline step runs}}",
    },
  },
  pipelineStepRunDetails: {
    detailText: "Pipeline step run",
    generalInformation: "General Information",
    actions: {
      start: "Start a pipeline step run.",
      edit: "Edit",
      cancel: "Cancel",
      confirm: "Confirm",
      clone: "Clone",
      delete: "Delete",
      create: "Start a pipeline step run.",
    },
    labels: {
      name: "Name",
      status: "Status",
      jobRunLink: "Job run",
      type: "Type",
      lifecycleDetails: "Lifecycle details",
      createdBy: "Created by",
      timeStarted: "Time started",
      timeFinished: "Time finished",
      runtimeConfiguration: "Runtime configuration",
      maxRuntimeInMinutes: "Maximum runtime (in minutes)",
      customEnvironmentVariables: "Custom environment variables",
      stepDefinition: "Step definition",
      stepRunConfiguration: "Default Configuration",
      stepRunConfigurationOverride: "Override Configuration",
      infrastructureConfiguration: "Infrastructure configuration",
      shapeName: "Shape",
      blockStorage: "Block Storage",
      numberShowingText:
        "{numberShowing, plural, =0 {No pipeline step run to show} one {Showing # pipeline step run} other {Showing # pipeline step runs}}",
    },
  },
  pipelines: {
    createTitle: "Create pipeline",
    computeTitle: "Compute shape",
    linkText: "Pipelines",
    editPipelineSuccess: "Successfully updated {name}.",
    editTitle: "Edit pipeline",
    detailText: "Pipeline",
    pipelineRunLoggingTitle: "Logging configuration override",
    deleteTitle: "Delete pipeline",
    deleteFailed:
      "This pipeline couldn‘t be removed because active resources still exist.",
    deleteConfirmation:
      "Are you sure you want to delete <strong>{displayName}</strong> and its associated pipeline runs?",
    deleteAgreement:
      "Type <strong>{confirmationText}</strong> to confirm delete.",
    deleteWarningTitleWithDeletePipelineRun:
      "Deleting this pipeline also deletes any associated pipeline runs. The deletion fails if any associated pipeline runs are not in DELETED state or delete related pipeline runs is false or if you do not have permission to delete.",
    deleteWarningTitle:
      "Deleting this pipeline also deletes any associated pipeline runs. The deletion fails if any associated pipeline runs aren't in a DELETED state, delete related pipeline runs is false, or you don't have permission to delete.",
    deleteWarningTitleWithDeleteJobRun:
      "Deleting this pipeline also deletes any associated pipeline runs and job runs. The deletion fails if any associated pipeline runs aren't in a DELETED state, delete related pipeline runs is false, or you don't have permission to delete.",
    deleteInProgress: "Checking for active resources...",
    shapeText: "P",
    deleteRelatedPipelineRuns: "Delete related pipeline runs",
    deleteRelatedJobRuns: "Delete related job runs",
    removeResourcesWarning:
      "Pipeline can only be deleted if all the pipeline runs associated with it are already in a DELETED state. Select delete related pipeline runs if there are pipeline runs that are not in a DELETED state.",
    deletePipelineRunWarning:
      "Pipeline runs can only be deleted when in a SUCCEEDED, FAILED or CANCELED state.",
    uploadArtifactFailure:
      "Error occurred while uploading step artifact. Please check the failed step and go to the step details page to retry the upload.",
    pipelineStepArtifactWarning:
      "Pipeline can't run until all script steps have artifacts uploaded. Please upload the step artifact from the step details page.",
    actions: {
      edit: "Edit",
      delete: "Delete",
      select: "Select",
      create: "Create pipeline",
      moveResource: "Move resource",
      addEnvironmentVariable: "Additional custom environment key",
      addSteps: "Add pipeline steps",
      editJob: "Edit job",
    },
    labels: {
      maxRuntimeInMinutes: "Maximum runtime (in minutes)",
      dependsOn: "Depends on",
      stepName: "Step name",
      stepArtifact: "Step artifact",
      stepDescription: "Step description",
      selectJob: "Select a job",
      loggingSelect: "Select the configuration for logging your pipeline.",
      description: "Description",
      pipelineSteps: "Pipeline steps",
      defaultConfiguration: "Default configuration",
      stepConfiguration: "Step configuration",
      name: "Name",
      state: "State",
      createdBy: "Created by",
      timeCreated: "Created on",
      numberShowingText:
        "{numberShowing, plural, =0 {No pipelines to show} one {Showing # pipeline} other {Showing # pipelines}}",
      pipelineDetails: "Pipeline details",
      pipelineInformation: "General information",
      pipelineRunLoggingSelect:
        "Select the override configuration for logging your pipeline run.",
      compartment: "Compartment",
      environmentVariableKey: "Custom environment variable key",
      environmentVariableValue: "Value",
      commandLineArguments: "Command line arguments",
      uploadArtifact: "Upload step artifact",
      fileSelectorText: "Drop a file or",
      fileSelectorBrowseLinkText: "select a file.",
      uploadFileTypeRequirementText:
        "File extensions must be .py, .sh, .tar.gz, or .zip.",
      uploadFileTypeError: "Invalid file type.",
      entryPoint: "Entry point",
      condaEnvironmentType: "Conda environment type",
      condaEnvironmentSlugName: "Conda environment slug name",
      blockStorage: "Block Storage",
      computeSelect:
        "Select the default VM shape you want to use for your pipeline.",
      infrastructureConfiguration: "Infrastructure configuration",
      shapeName: "Shape",
      numberOCPUs: "Number of OCPUs",
      memoryInGBs: "Memory (GB)",
    },
    hints: {
      uniqueStepName:
        "Step name is required and must be unique in this pipeline.",
      noJobSelected: "No job selected",
      maxRuntimeInMinutes:
        "The runtime must be between {minSize, number} and {maxSize, number} minutes (default {maxSize, number}).",
      uploadStepArtifact: "Upload your step artifact here",
      entryPoint: "Provide the file name to run when there is more than one.",
      computeShape:
        "Compute shape must be provided if block storage value exists",
      blockStorage:
        "Block storage must be provided if a compute shape is selected",
      stepEntryPoint:
        "This is a required field when the the uploaded step artifact type is tar.gz or .zip",
    },
    tooltips: {
      autoLogCreation:
        "Data Science automatically creates a new log when a pipeline run starts, and then logs messages to it.",
      environmentVariables_1:
        "Service recognized user provided environment variables: \n\n",
      environmentVariables_2:
        '{conda_env_type}: Conda environment type - "{service}" or "{published}" \n',
      environmentVariables_3:
        "{conda_env_slug}: Service conda environment slug \n",
      environmentVariables_4:
        "{conda_env_region}: Published conda environment region \n",
      environmentVariables_5:
        "{conda_env_object_name}: Published conda environment object name \n",
      environmentVariables_6:
        "{conda_env_namespace}: Published conda environment Object Storage namespace \n",
      environmentVariables_7:
        "{conda_env_bucket}: Published conda environment Object Storage bucket \n",
    },
    logs: {
      linkText: "Logs",
    },
  },
  jobs: {
    linkText: "Jobs",
    detailText: "Job",
    genericMissingArtifact:
      "Something unexpected has occurred. Artifact details are not available.",
    missingArtifact: "Job artifact could not be uploaded.",
    shapeText: "J",
    sizeInGigabytes: "{size, number} GB",
    createTitle: "Create job",
    editTitle: "Edit job",
    deleteFailed:
      "This job could not be deleted because some associated job runs are still in progress or the user does not have the correct permissions.",
    deleteTitle: "Delete job",
    deleteConfirmation:
      "Are you sure you want to delete <strong>{displayName}</strong> and its associated job runs?",
    deleteWarningTitle:
      "Deleting this job also deletes any associated job runs. The deletion fails if any associated job runs are in progress or if you do not have permission to delete.",
    deleteAgreement:
      "Type <strong>{confirmationText}</strong> to confirm delete.",
    deleteInProgress: "Checking for active resources...",
    editJobSuccess: "Successfully updated {name}.",
    computeTitle: "Compute shape",
    loggingTitle: "Logging",
    jobRunLoggingTitle: "Logging configuration override",
    loggingEnabled: "Logging enabled",
    loggingDisabled: "Logging disabled",
    selectLogging: "Select logging",
    noLogGroupsFound: "No log groups found in this compartment",
    noLogsFound: "No logs found in this log group",
    noDefaultLogGroupSelected: "No default log group is selected",
    loggingIsNotEnabled: "Logging is not enabled",
    noDefaultLogSelected: "No default log is selected",
    autoLoggingEnabled: "Automatic creation of logs is enabled",
    loggingConfiguration: "Logging configuration",
    loggingConfigurationOverride: "Logging configuration override",
    successfullyUploadedArtifact: "Successfully uploaded job artifact.",
    defaultLogGroup: "Log group selected: {groupName}.",
    defaultLogGroupAndAutoLog:
      "Log group selected: {groupName}. Automatic logging enabled.",
    defaultLogGroupAndLog:
      "Log group selected: {groupName}. Log selected: {logName}",
    bringYourOwnContainer: "Bring your own container",
    nullableArtifactForByoc:
      'No artifact available as job is configured to use "bring your own container"',
    actions: {
      create: "Create job",
      edit: "Edit",
      downloadArtifact: "Download job artifact",
      uploadArtifact: "Upload job artifact",
      delete: "Delete",
      retryUpload: "Retry upload",
      addEnvironmentVariable: "+ Additional custom environment key",
      select: "Select",
      moveResource: "Move resource",
      editArtifact: "Edit job artifact",
    },
    labels: {
      numberShowingText:
        "{numberShowing, plural, =0 {No Jobs to show} one {Showing # Job} other {Showing # Jobs}}",
      name: "Name",
      state: "State",
      createdBy: "Created by",
      timeCreated: "Created on",
      jobArtifact: "Job artifact",
      jobInformation: "General information",
      jobInfrastructure: "Infrastructure configuration",
      computeShape: "Compute instance shape",
      storage: "Storage",
      vcn: "VCN",
      subnet: "Subnet",
      defaultConfiguration: "Default configuration",
      commandLineArguments: "Command line arguments",
      maxRuntimeInMinutes: "Maximum runtime (in minutes)",
      customEnvironmentVariables: "Custom environment variables",
      description: "Description",
      objectStorageInfo:
        "The total amount of Object Storage that you are using including the {gb, number} GB required by the Data Science service.",
      compartment: "Compartment",
      fileSelectorText: "Drop a file or",
      fileSelectorBrowseLinkText: "select a file.",
      instanceShape: "Compute instance shape",
      blockStorageSize:
        "Size must be between {minSize, number} GB and {maxSize, number} GB ({maxSizeTB, number} TB)",
      uploadJobArtifact: "Upload job artifact",
      additionalStorage: "Storage",
      environmentVariableKey: "Custom environment variable key",
      byocVariableKey: "Bring your own container variable required key",
      environmentVariableValue: "Value",
      shapeName: "Shape name",
      numberOCPUs: "Number of OCPUs",
      memoryInGBs: "Memory (GB)",
      vmShape: "VM shape",
      computeSelect:
        "Select the default VM shape you want to use for your job runs.",
      computeSelectLabel: "{cores, number} core OCPU, {gb, number} GB memory",
      loggingSelect: "Select the configuration for logging your job.",
      jobRunLoggingSelect:
        "Select the override configuration for logging your job.",
      enableLogging: "Enable logging",
      automaticLogging: "Automatic logging",
      enableAutoLogCreation: "Enable automatic log creation",
      selectALog: "Select a log",
      logGroup: "Log group",
      logName: "Log name",
      noLogGroupSelected: "No log group selected",
      noLogSelected: "No log selected",
      defaultLogGroup: "Default log group",
      defaultLog: "Default log",
      loggingDetails: "Logging details",
      log: "Log",
      uploadFileTypeRequirementText:
        "File extensions must be .py, .sh, .tar.gz, or .zip.",
      uploadFileTypeError: "Invalid file type.",
      jobDetails: "Job details",
    },
    hints: {
      vcnMissingPermissionsHoverText:
        "Request your admin for access to read the Subnet resource to see its associated VCN",
      jobArtifact:
        "Artifact uploads from the console are limited to less than {maxSize, number} MiB",
      storageHint: "Must be between {minSize, number} and {maxSize, number} GB",
      maxRuntimeInMinutes:
        "The runtime must be between {minSize, number} and {maxSize, number} minutes",
    },
    shapeFamilies: {
      intelSkylake: {
        label: "Intel",
        description:
          "Fixed OCPU count. Latest generation Intel Standard shapes.",
      },
    },
    selectPanes: {
      computeSelect: "Select compute",
    },
    tooltips: {
      autoLogCreation:
        "Data Science automatically creates a new log when a job run starts, and then logs messages to it.",
      environmentVariables_1:
        "Service recognized user provided environment variables: \n\n",
      environmentVariables_2:
        '{conda_env_type}: Conda environment type - "{service}" or "{published}" \n',
      environmentVariables_3:
        "{conda_env_slug}: Service conda environment slug \n",
      environmentVariables_4:
        "{conda_env_region}: Published conda environment region \n",
      environmentVariables_5:
        "{conda_env_object_name}: Published conda environment object name \n",
      environmentVariables_6:
        "{conda_env_namespace}: Published conda environment Object Storage namespace \n",
      environmentVariables_7:
        "{conda_env_bucket}: Published conda environment Object Storage bucket \n",
      environmentVariables_8:
        "{job_run_entrypoint}: Required for {zip} or {tar} files. Specifies the entrypoint file in the artifact to be executed \n",
      environmentVariables_9:
        "{container_entrypoint}: The container run {ENTRYPOINT} as a list of strings \n",
      environmentVariables_10:
        "{container_cmd}: The container run {CMD} as a list of strings.",
    },
  },
  jobRuns: {
    linkText: "Job runs",
    detailText: "Job run",
    shapeText: "JR",
    createJobRunSuccess: "Successfully started {name} job run.",
    editTitle: "Edit job run",
    cancelTitle: "Cancel job run",
    cancelConfirmation:
      "Are you sure you want to cancel the job run <strong>{name}</strong>?",
    deleteTitle: "Delete confirmation",
    deleteConfirmation:
      "Are you sure you want to delete the job run <strong>{name}</strong>?",
    loggingOverrideConfigured: "Logging override configured",
    cancelAgreement:
      "Type <strong>{confirmationText}</strong> to confirm cancel.",
    actions: {
      start: "Start a job run",
      edit: "Edit",
      cancel: "Cancel",
      confirm: "Confirm",
      delete: "Delete",
      clone: "Clone",
      cloneAJobRun: "Clone a job run",
      cloneJobRun: "Clone job run",
    },
    labels: {
      name: "Name",
      state: "State",
      lifecycleDetails: "Lifecycle details",
      createdBy: "Created by",
      timeAccepted: "Time accepted",
      numberShowingText:
        "{numberShowing, plural, =0 {No job runs to show} one {Showing # job run} other {Showing # job runs}}",
      jobRunInformation: "General information",
      timeStarted: "Time started",
      timeFinished: "Time finished",
      jobConfigurationOverride: "Job configuration override",
      runtimeConfiguration: "Runtime configuration",
      overrideConfiguration: "Override configuration",
      jobRunDetails: "Job run details",
    },
    monitoring: {
      linkText: "Metrics",
      friendlyNames: {
        cpuUtilization: "CPU Utilization",
        memoryUtilization: "Memory Utilization",
        networkBytesIn: "Network Bytes In",
        networkBytesOut: "Network Bytes Out",
        diskUtilization: "Disk Utilization",
        gpuUtilization: "GPU Utilization",
      },
      metadata: {
        cpuUtilization: "Job run container CPU utilization",
        memoryUtilization: "Job run container memory utilization",
        networkBytesIn: "Job run container network bytes in",
        networkBytesOut: "Job run container network bytes out",
        diskUtilization: "Job run container disk utilization",
        gpuUtilization: "Job run container GPU utilization",
      },
    },
  },
  operationType: {
    NOTEBOOK_SESSION_CREATE: "Create notebook session",
    NOTEBOOK_SESSION_DELETE: "Delete notebook session",
    NOTEBOOK_SESSION_ACTIVATE: "Activate notebook session",
    NOTEBOOK_SESSION_DEACTIVATE: "Deactivate notebook session",
    MODEL_DEPLOYMENT_CREATE: "Create model deployment",
    MODEL_DEPLOYMENT_DELETE: "Delete model deployment",
    MODEL_DEPLOYMENT_ACTIVATE: "Activate model deployment",
    MODEL_DEPLOYMENT_DEACTIVATE: "Deactivate model deployment",
    MODEL_DEPLOYMENT_UPDATE: "Update model deployment",
    PROJECT_DELETE: "Delete project",
    WORKREQUEST_CANCEL: "Cancel work request",
    JOB_DELETE: "Delete job",
  },
  computePanels: {
    title: "Select compute",
    description:
      'A <a target="_blank" href="{href}">shape</a> is a template that determines the number of CPUs, amount of memory, and other resources to a newly created instance.',
    flexSliderHint:
      'You can customize the number of OCPUs and the amount of memory allocated to a flexible shape. The other resources scale proportionately. <a target="_blank" href="{href}">Learn more about flexible shapes</a>.',
    ocpuSliderLabel: "Number of OCPUs",
    memorySliderLabel: "Amount of memory (GB)",
    customConfiguration: "Custom configuration",
    customConfigurationDescription:
      "You select any Compute shape configuration for the job.",
    fastLaunch: "Fast launch",
    fastLaunchDescription:
      "A predefined set of Compute shapes that allows you to start a job as fast as possible as long as there are shapes available.",
    fastLaunchEnabled: "Fast launch enabled",
    shapeTableShapeNameColumn: "Shape name",
    shapeTableMemoryColumn: "Memory (GB)",
    shapeTableOCPUsColumn: "Number of OCPUs",
    changeShape: "Change shape",
    selectShape: "Select shape",
    radioGroup: {
      label: "VM shape series",
      amdRomeHeader: "AMD",
      amdRomeDescription: "Flexible OCPU count. AMD processors.",
      intelSkylakeHeader: "Intel",
      intelSkylakeDescription: "Flexible OCPU count. Intel processors.",
      nvidiaGpuHeader: "NVIDIA GPU",
      nvidiaGpuDescription:
        "For compute intensive workloads. Each P100 GPU or V100 Tensor Core GPU comes with 16 GB of GPU memory.",
      legacyHeader: "Previous Generation",
      legacyDescription: "Earlier generation shapes.",
      previousGenerationHeader: "Specialty and Previous Generation",
      previousGenerationHeaderDescription:
        "Earlier generation Intel standard shapes.",
    },
    wholeNumberErrorMessage: "Value must be a whole number.",
  },
  shared: {
    networkingResources: {
      networkingResources: "Networking resources",
      networkingTypeDescription: "<strong>Networking type:</strong> {name}",
      networkingType: "Networking type",
      customNetworking: "Custom networking",
      customNetworkingDescription: "Customize your networking resources.",
      defaultNetworking: "Default networking",
      defaultNetworkingDescription: "Default egress to the public internet.",
    },
    shapes: {
      x9Processor: "3.0 GHz Intel® Xeon® Gold 6354 (Ice Lake)",
      e4Processor: "2.55 GHz AMD EPYC™ 7J13 (Milan)",
      e3Processor: "2.25 GHz AMD EPYC™ 7742 (Rome)",
      a1Processor: "3.0 GHz Ampere® Altra™",
      bmGpu4Processor: "2.9 GHz AMD EPYC™ 7542 (Rome)",
      standard2Processor: "2.0 GHz Intel® Xeon® Platinum 8167M (Skylake)",
    },
  },
};

export const i18n = new LoomI18n();

/**
 * Initialize the instance. If no {@code defaultLanguage} are provided, tries to automatically detect the language
 * @param defaultLanguage The language to use initially
 */
export function init(
  defaultLanguage?: string,
  localeOptions?: {
    defaultLocale?: string;
    defaultCurrency?: Currency.Code;
    defaultTimezone?: string;
  }
): Promise<void> {
  return i18n.init({
    remoteResourcesPatterns: [
      "https://locales.plugins.oci.oraclecloud.com/data-science/0.0.0/{{lng}}.json",
      "https://locales.plugins.oci.oraclecloud.com/data-science/{{lng}}.json",
    ],
    defaultLanguage: defaultLanguage,
    resources: bundled,
    localesData: {
      en: enLocaleData,
    },
    defaultCurrency: localeOptions && localeOptions.defaultCurrency,
    defaultTimezone: localeOptions && localeOptions.defaultTimezone,
  });
}

/**
 * Add a notification callback on initialization time. Please set this before you call @method init
 * @param callback
 */
export function onInit(
  callback: (initLang: string, error?: any) => void
): void {
  i18n.onInit(callback);
}

/**
 * Helper functions for i18n.
 */
export const i18nUtils = {
  /**
   * Function to format currency.
   * @param value
   * @deprecated We will be removing "Code" and only have optional "Options" object where you can specify the currency
   * @param codeOrOptions Currency code to use, defaults to USD. Use getCurrencyCode to map string to Currency.Code enum
   * or Options object to set currencyCode(defaults to USD), displayFormat(Defaults to Symbol) and precision
   * @deprecated We will be removing "displayFormat" in the future. You can set this in the Options object
   * @param displayFormat Display as symbol or name. Eg. $5.00 or 5 US Dollars, Defaults to Symbol.
   * This is ignored if "Options" object is provided
   */
  formatCurrency: function formatCurrency(
    value: number,
    codeOrOptions?: Currency.Code | Currency.Options,
    displayFormat?: Currency.DisplayFormat
  ): string {
    return i18n.formatCurrency(value, codeOrOptions, displayFormat);
  },

  /**
   * Get Currency.Code enum from the specified string. If not found, returns the string value cast as enum.
   * @param code Currency code string to look up.
   */
  getCurrencyCode: function getCurrencyCode(code: string): Currency.Code {
    return (<any>Currency.Code).code || code;
  },
};

/**
 * Add a notification callback on missing translation key. Useful for applications that may need to do
 * work once the translation key is missing in translation files.
 * @param callback
 */
export function onMissingKey(callback: (key: string) => void): void {
  i18n.onMissingKey(callback);
}

/**
 * Function to check if the instance is initialized.
 */
export function isInit(): boolean {
  return i18n.isInitialized;
}

/**
 * Change the language of the current instance.
 * @param language New language to use. Can be either language code (e.g. "en"), or locale code (e.g. "en-US"))
 */
export function changeLanguage(language: string): Promise<void> {
  return i18n.changeLanguage(language);
}

/**
 * Add a notification callback on change of language. Useful for applications that may need
 * to do work once the language is changed (e.g. forceUpdate of the root component in react)
 * @param callback
 */
export function onLanguageChanged(
  callback: (language: string, error?: any) => void
): void {
  i18n.onLanguageChanged(callback);
}

/**
 * Main wrapper for calling the i18next t function
 * key is the unique path to the string in en.json
 * props is an object of typed replacement values for placeholders in the string
 * returnKey is a flag that indicates that this method should return the key itself instead of string
 */
function t(key: string, props: { [key: string]: any }, returnKey?: boolean) {
  if (returnKey) {
    return key;
  } else {
    return i18n.t(key, props);
  }
}

export const actions = {
  edit: function actions_edit(_key?: boolean): string {
    return t("actions.edit", {}, _key);
  },
  delete: function actions_delete(_key?: boolean): string {
    return t("actions.delete", {}, _key);
  },
  open: function actions_open(_key?: boolean): string {
    return t("actions.open", {}, _key);
  },
  create: function actions_create(_key?: boolean): string {
    return t("actions.create", {}, _key);
  },
  viewDetails: function actions_viewDetails(_key?: boolean): string {
    return t("actions.viewDetails", {}, _key);
  },
  save: function actions_save(_key?: boolean): string {
    return t("actions.save", {}, _key);
  },
  saveChanges: function actions_saveChanges(_key?: boolean): string {
    return t("actions.saveChanges", {}, _key);
  },
  terminate: function actions_terminate(_key?: boolean): string {
    return t("actions.terminate", {}, _key);
  },
  activate: function actions_activate(_key?: boolean): string {
    return t("actions.activate", {}, _key);
  },
  deactivate: function actions_deactivate(_key?: boolean): string {
    return t("actions.deactivate", {}, _key);
  },
  createModelDeployment: function actions_createModelDeployment(
    _key?: boolean
  ): string {
    return t("actions.createModelDeployment", {}, _key);
  },
  cancel: function actions_cancel(_key?: boolean): string {
    return t("actions.cancel", {}, _key);
  },
  submit: function actions_submit(_key?: boolean): string {
    return t("actions.submit", {}, _key);
  },
  selectShape: function actions_selectShape(_key?: boolean): string {
    return t("actions.selectShape", {}, _key);
  },
  close: function actions_close(_key?: boolean): string {
    return t("actions.close", {}, _key);
  },
  loading: function actions_loading(_key?: boolean): string {
    return t("actions.loading", {}, _key);
  },
  support: function actions_support(_key?: boolean): string {
    return t("actions.support", {}, _key);
  },
  applyTags: function actions_applyTags(_key?: boolean): string {
    return t("actions.applyTags", {}, _key);
  },
  starting: function actions_starting(_key?: boolean): string {
    return t("actions.starting", {}, _key);
  },
  creating: function actions_creating(_key?: boolean): string {
    return t("actions.creating", {}, _key);
  },
  advancedOptions: function actions_advancedOptions(_key?: boolean): string {
    return t("actions.advancedOptions", {}, _key);
  },
  hideAdvancedOptions: function actions_hideAdvancedOptions(
    _key?: boolean
  ): string {
    return t("actions.hideAdvancedOptions", {}, _key);
  },
  select: function actions_select(_key?: boolean): string {
    return t("actions.select", {}, _key);
  },
  upload: function actions_upload(_key?: boolean): string {
    return t("actions.upload", {}, _key);
  },
  start: function actions_start(_key?: boolean): string {
    return t("actions.start", {}, _key);
  },
  moveResource: function actions_moveResource(_key?: boolean): string {
    return t("actions.moveResource", {}, _key);
  },
  saveAsStack: function actions_saveAsStack(_key?: boolean): string {
    return t("actions.saveAsStack", {}, _key);
  },
};
export const labels = {
  redirectOnCreate: function labels_redirectOnCreate(_key?: boolean): string {
    return t("labels.redirectOnCreate", {}, _key);
  },
  redirectOnSubmit: function labels_redirectOnSubmit(_key?: boolean): string {
    return t("labels.redirectOnSubmit", {}, _key);
  },
  metrics: function labels_metrics(_key?: boolean): string {
    return t("labels.metrics", {}, _key);
  },
  tags: function labels_tags(_key?: boolean): string {
    return t("labels.tags", {}, _key);
  },
  optional: function labels_optional(_key?: boolean): string {
    return t("labels.optional", {}, _key);
  },
  moreInfo: function labels_moreInfo(_key?: boolean): string {
    return t("labels.moreInfo", {}, _key);
  },
};
export const icon = {
  ariaLabel: {
    warning: function icon_ariaLabel_warning(_key?: boolean): string {
      return t("icon.ariaLabel.warning", {}, _key);
    },
    externalLink: function icon_ariaLabel_externalLink(_key?: boolean): string {
      return t("icon.ariaLabel.externalLink", {}, _key);
    },
    NullIcon: function icon_ariaLabel_NullIcon(_key?: boolean): string {
      return t("icon.ariaLabel.NullIcon", {}, _key);
    },
  },
};
export const loggingConfiguration = {
  loggingTitle: function loggingConfiguration_loggingTitle(
    _key?: boolean
  ): string {
    return t("loggingConfiguration.loggingTitle", {}, _key);
  },
  loggingEnabled: function loggingConfiguration_loggingEnabled(
    _key?: boolean
  ): string {
    return t("loggingConfiguration.loggingEnabled", {}, _key);
  },
  loggingDisabled: function loggingConfiguration_loggingDisabled(
    _key?: boolean
  ): string {
    return t("loggingConfiguration.loggingDisabled", {}, _key);
  },
  selectLogging: function loggingConfiguration_selectLogging(
    _key?: boolean
  ): string {
    return t("loggingConfiguration.selectLogging", {}, _key);
  },
  noLogGroupsFound: function loggingConfiguration_noLogGroupsFound(
    _key?: boolean
  ): string {
    return t("loggingConfiguration.noLogGroupsFound", {}, _key);
  },
  noLogsFound: function loggingConfiguration_noLogsFound(
    _key?: boolean
  ): string {
    return t("loggingConfiguration.noLogsFound", {}, _key);
  },
  noDefaultLogGroupSelected:
    function loggingConfiguration_noDefaultLogGroupSelected(
      _key?: boolean
    ): string {
      return t("loggingConfiguration.noDefaultLogGroupSelected", {}, _key);
    },
  loggingIsNotEnabled: function loggingConfiguration_loggingIsNotEnabled(
    _key?: boolean
  ): string {
    return t("loggingConfiguration.loggingIsNotEnabled", {}, _key);
  },
  noDefaultLogSelected: function loggingConfiguration_noDefaultLogSelected(
    _key?: boolean
  ): string {
    return t("loggingConfiguration.noDefaultLogSelected", {}, _key);
  },
  autoLoggingEnabled: function loggingConfiguration_autoLoggingEnabled(
    _key?: boolean
  ): string {
    return t("loggingConfiguration.autoLoggingEnabled", {}, _key);
  },
  loggingConfiguration: function loggingConfiguration_loggingConfiguration(
    _key?: boolean
  ): string {
    return t("loggingConfiguration.loggingConfiguration", {}, _key);
  },
  loggingConfigurationOverride:
    function loggingConfiguration_loggingConfigurationOverride(
      _key?: boolean
    ): string {
      return t("loggingConfiguration.loggingConfigurationOverride", {}, _key);
    },
  defaultLogGroupAndAutoLog:
    function loggingConfiguration_defaultLogGroupAndAutoLog(
      groupName: string,
      _key?: boolean
    ): string {
      return t(
        "loggingConfiguration.defaultLogGroupAndAutoLog",
        { groupName },
        _key
      );
    },
  defaultLogGroupAndLog: function loggingConfiguration_defaultLogGroupAndLog(
    groupName: string,
    logName: string,
    _key?: boolean
  ): string {
    return t(
      "loggingConfiguration.defaultLogGroupAndLog",
      { groupName, logName },
      _key
    );
  },
  enableLogging: function loggingConfiguration_enableLogging(
    _key?: boolean
  ): string {
    return t("loggingConfiguration.enableLogging", {}, _key);
  },
  automaticLogging: function loggingConfiguration_automaticLogging(
    _key?: boolean
  ): string {
    return t("loggingConfiguration.automaticLogging", {}, _key);
  },
  enableAutoLogCreation: function loggingConfiguration_enableAutoLogCreation(
    _key?: boolean
  ): string {
    return t("loggingConfiguration.enableAutoLogCreation", {}, _key);
  },
  selectALog: function loggingConfiguration_selectALog(_key?: boolean): string {
    return t("loggingConfiguration.selectALog", {}, _key);
  },
  logGroup: function loggingConfiguration_logGroup(_key?: boolean): string {
    return t("loggingConfiguration.logGroup", {}, _key);
  },
  logName: function loggingConfiguration_logName(_key?: boolean): string {
    return t("loggingConfiguration.logName", {}, _key);
  },
  noLogGroupSelected: function loggingConfiguration_noLogGroupSelected(
    _key?: boolean
  ): string {
    return t("loggingConfiguration.noLogGroupSelected", {}, _key);
  },
  noLogSelected: function loggingConfiguration_noLogSelected(
    _key?: boolean
  ): string {
    return t("loggingConfiguration.noLogSelected", {}, _key);
  },
  labels: {
    defaultLogGroup: function loggingConfiguration_labels_defaultLogGroup(
      _key?: boolean
    ): string {
      return t("loggingConfiguration.labels.defaultLogGroup", {}, _key);
    },
  },
  defaultLog: function loggingConfiguration_defaultLog(_key?: boolean): string {
    return t("loggingConfiguration.defaultLog", {}, _key);
  },
  loggingDetails: function loggingConfiguration_loggingDetails(
    _key?: boolean
  ): string {
    return t("loggingConfiguration.loggingDetails", {}, _key);
  },
  log: function loggingConfiguration_log(_key?: boolean): string {
    return t("loggingConfiguration.log", {}, _key);
  },
  defaultLogGroup: function loggingConfiguration_defaultLogGroup(
    groupName: string,
    _key?: boolean
  ): string {
    return t("loggingConfiguration.defaultLogGroup", { groupName }, _key);
  },
};
export const tooltips = {
  project: function tooltips_project(_key?: boolean): string {
    return t("tooltips.project", {}, _key);
  },
  compartmentSelect: function tooltips_compartmentSelect(
    _key?: boolean
  ): string {
    return t("tooltips.compartmentSelect", {}, _key);
  },
  projectSelect: function tooltips_projectSelect(_key?: boolean): string {
    return t("tooltips.projectSelect", {}, _key);
  },
  modelArtifact: function tooltips_modelArtifact(_key?: boolean): string {
    return t("tooltips.modelArtifact", {}, _key);
  },
  displayName: function tooltips_displayName(_key?: boolean): string {
    return t("tooltips.displayName", {}, _key);
  },
  editDisplayName: function tooltips_editDisplayName(_key?: boolean): string {
    return t("tooltips.editDisplayName", {}, _key);
  },
  blockStorageSize: function tooltips_blockStorageSize(_key?: boolean): string {
    return t("tooltips.blockStorageSize", {}, _key);
  },
  modelOcid: function tooltips_modelOcid(_key?: boolean): string {
    return t("tooltips.modelOcid", {}, _key);
  },
  jobArtifact: function tooltips_jobArtifact(_key?: boolean): string {
    return t("tooltips.jobArtifact", {}, _key);
  },
  environmentVariables: function tooltips_environmentVariables(
    _key?: boolean
  ): string {
    return t("tooltips.environmentVariables", {}, _key);
  },
  commandlineArguments: function tooltips_commandlineArguments(
    _key?: boolean
  ): string {
    return t("tooltips.commandlineArguments", {}, _key);
  },
  maximumRuntimeInMinutes: function tooltips_maximumRuntimeInMinutes(
    _key?: boolean
  ): string {
    return t("tooltips.maximumRuntimeInMinutes", {}, _key);
  },
  numberOfInstances: function tooltips_numberOfInstances(
    _key?: boolean
  ): string {
    return t("tooltips.numberOfInstances", {}, _key);
  },
  jobRunLogging: function tooltips_jobRunLogging(_key?: boolean): string {
    return t("tooltips.jobRunLogging", {}, _key);
  },
  versionLabel: function tooltips_versionLabel(_key?: boolean): string {
    return t("tooltips.versionLabel", {}, _key);
  },
  pipelineRunLogging: function tooltips_pipelineRunLogging(
    _key?: boolean
  ): string {
    return t("tooltips.pipelineRunLogging", {}, _key);
  },
  jobsBYOCEnvVar: function tooltips_jobsBYOCEnvVar(_key?: boolean): string {
    return t("tooltips.jobsBYOCEnvVar", {}, _key);
  },
  customContainer: function tooltips_customContainer(
    href: string,
    _key?: boolean
  ): string {
    return t("tooltips.customContainer", { href }, _key);
  },
  containerCMD: function tooltips_containerCMD(_key?: boolean): string {
    return t("tooltips.containerCMD", {}, _key);
  },
  containerEntrypoint: function tooltips_containerEntrypoint(
    _key?: boolean
  ): string {
    return t("tooltips.containerEntrypoint", {}, _key);
  },
  serverPort: function tooltips_serverPort(_key?: boolean): string {
    return t("tooltips.serverPort", {}, _key);
  },
  healthcheckPort: function tooltips_healthcheckPort(_key?: boolean): string {
    return t("tooltips.healthcheckPort", {}, _key);
  },
  containerCustomImage: function tooltips_containerCustomImage(
    CONTAINER_CUSTOM_IMAGE: string,
    _key?: boolean
  ): string {
    return t("tooltips.containerCustomImage", { CONTAINER_CUSTOM_IMAGE }, _key);
  },
  bareMetal: function tooltips_bareMetal(href: string, _key?: boolean): string {
    return t("tooltips.bareMetal", { href }, _key);
  },
  pipelineStepArtifact: function tooltips_pipelineStepArtifact(
    _key?: boolean
  ): string {
    return t("tooltips.pipelineStepArtifact", {}, _key);
  },
};
export const breadcrumb = {
  projects: function breadcrumb_projects(_key?: boolean): string {
    return t("breadcrumb.projects", {}, _key);
  },
  featureStores: function breadcrumb_featureStores(_key?: boolean): string {
    return t("breadcrumb.featureStores", {}, _key);
  },
  featureStoreFeatureSchema: function breadcrumb_featureStoreFeatureSchema(
    _key?: boolean
  ): string {
    return t("breadcrumb.featureStoreFeatureSchema", {}, _key);
  },
  featureStoreFeatureTransformation:
    function breadcrumb_featureStoreFeatureTransformation(
      _key?: boolean
    ): string {
      return t("breadcrumb.featureStoreFeatureTransformation", {}, _key);
    },
  entities: function breadcrumb_entities(_key?: boolean): string {
    return t("breadcrumb.entities", {}, _key);
  },
  featureDefinitions: function breadcrumb_featureDefinitions(
    _key?: boolean
  ): string {
    return t("breadcrumb.featureDefinitions", {}, _key);
  },
  datasets: function breadcrumb_datasets(_key?: boolean): string {
    return t("breadcrumb.datasets", {}, _key);
  },
  projectDetails: function breadcrumb_projectDetails(_key?: boolean): string {
    return t("breadcrumb.projectDetails", {}, _key);
  },
  featureStoreDetails: function breadcrumb_featureStoreDetails(
    _key?: boolean
  ): string {
    return t("breadcrumb.featureStoreDetails", {}, _key);
  },
  projectDetail: function breadcrumb_projectDetail(_key?: boolean): string {
    return t("breadcrumb.projectDetail", {}, _key);
  },
  notebooks: function breadcrumb_notebooks(_key?: boolean): string {
    return t("breadcrumb.notebooks", {}, _key);
  },
  datasources: function breadcrumb_datasources(_key?: boolean): string {
    return t("breadcrumb.datasources", {}, _key);
  },
  pipelineDetails: function breadcrumb_pipelineDetails(_key?: boolean): string {
    return t("breadcrumb.pipelineDetails", {}, _key);
  },
  home: function breadcrumb_home(_key?: boolean): string {
    return t("breadcrumb.home", {}, _key);
  },
  modelVersionSet: function breadcrumb_modelVersionSet(_key?: boolean): string {
    return t("breadcrumb.modelVersionSet", {}, _key);
  },
  models: function breadcrumb_models(_key?: boolean): string {
    return t("breadcrumb.models", {}, _key);
  },
  modelDeployments: function breadcrumb_modelDeployments(
    _key?: boolean
  ): string {
    return t("breadcrumb.modelDeployments", {}, _key);
  },
  resourceDetails: function breadcrumb_resourceDetails(
    resourceName: string,
    _key?: boolean
  ): string {
    return t("breadcrumb.resourceDetails", { resourceName }, _key);
  },
  dataScience: function breadcrumb_dataScience(_key?: boolean): string {
    return t("breadcrumb.dataScience", {}, _key);
  },
  jobs: function breadcrumb_jobs(_key?: boolean): string {
    return t("breadcrumb.jobs", {}, _key);
  },
  pipelines: function breadcrumb_pipelines(_key?: boolean): string {
    return t("breadcrumb.pipelines", {}, _key);
  },
  defaultConfiguration: function breadcrumb_defaultConfiguration(
    _key?: boolean
  ): string {
    return t("breadcrumb.defaultConfiguration", {}, _key);
  },
  jobRuns: function breadcrumb_jobRuns(_key?: boolean): string {
    return t("breadcrumb.jobRuns", {}, _key);
  },
  workRequests: function breadcrumb_workRequests(_key?: boolean): string {
    return t("breadcrumb.workRequests", {}, _key);
  },
  pipelineRuns: function breadcrumb_pipelineRuns(_key?: boolean): string {
    return t("breadcrumb.pipelineRuns", {}, _key);
  },
  pipelineStepRunDetails: function breadcrumb_pipelineStepRunDetails(
    _key?: boolean
  ): string {
    return t("breadcrumb.pipelineStepRunDetails", {}, _key);
  },
  pipelineRunDetails: function breadcrumb_pipelineRunDetails(
    _key?: boolean
  ): string {
    return t("breadcrumb.pipelineRunDetails", {}, _key);
  },
  stepDetails: function breadcrumb_stepDetails(_key?: boolean): string {
    return t("breadcrumb.stepDetails", {}, _key);
  },
  featureStore: function breadcrumb_featureStore(_key?: boolean): string {
    return t("breadcrumb.featureStore", {}, _key);
  },
  featureDefinitionDetails: function breadcrumb_featureDefinitionDetails(
    _key?: boolean
  ): string {
    return t("breadcrumb.featureDefinitionDetails", {}, _key);
  },
};
export const captions = {
  projects: function captions_projects(_key?: boolean): string {
    return t("captions.projects", {}, _key);
  },
  featureStores: function captions_featureStores(_key?: boolean): string {
    return t("captions.featureStores", {}, _key);
  },
  notebooks: function captions_notebooks(_key?: boolean): string {
    return t("captions.notebooks", {}, _key);
  },
  models: function captions_models(_key?: boolean): string {
    return t("captions.models", {}, _key);
  },
  jobs: function captions_jobs(_key?: boolean): string {
    return t("captions.jobs", {}, _key);
  },
  entities: function captions_entities(_key?: boolean): string {
    return t("captions.entities", {}, _key);
  },
  columns: function captions_columns(_key?: boolean): string {
    return t("captions.columns", {}, _key);
  },
  fdp: function captions_fdp(_key?: boolean): string {
    return t("captions.fdp", {}, _key);
  },
  datasets: function captions_datasets(_key?: boolean): string {
    return t("captions.datasets", {}, _key);
  },
  pipelines: function captions_pipelines(_key?: boolean): string {
    return t("captions.pipelines", {}, _key);
  },
  jobRuns: function captions_jobRuns(_key?: boolean): string {
    return t("captions.jobRuns", {}, _key);
  },
  pipelineRuns: function captions_pipelineRuns(_key?: boolean): string {
    return t("captions.pipelineRuns", {}, _key);
  },
  modelDeployments: function captions_modelDeployments(_key?: boolean): string {
    return t("captions.modelDeployments", {}, _key);
  },
  pipelineSteps: function captions_pipelineSteps(_key?: boolean): string {
    return t("captions.pipelineSteps", {}, _key);
  },
  pipelineStepRuns: function captions_pipelineStepRuns(_key?: boolean): string {
    return t("captions.pipelineStepRuns", {}, _key);
  },
  modelDeploymentsForModel: function captions_modelDeploymentsForModel(
    _key?: boolean
  ): string {
    return t("captions.modelDeploymentsForModel", {}, _key);
  },
};
export const detailTemplate = {
  ocid: function detailTemplate_ocid(_key?: boolean): string {
    return t("detailTemplate.ocid", {}, _key);
  },
  detailsLabel: function detailTemplate_detailsLabel(
    resourceName: string,
    _key?: boolean
  ): string {
    return t("detailTemplate.detailsLabel", { resourceName }, _key);
  },
  tagsLabel: function detailTemplate_tagsLabel(_key?: boolean): string {
    return t("detailTemplate.tagsLabel", {}, _key);
  },
};
export const errors = {
  regionUnavailable: function errors_regionUnavailable(_key?: boolean): string {
    return t("errors.regionUnavailable", {}, _key);
  },
  selectCompartment: function errors_selectCompartment(_key?: boolean): string {
    return t("errors.selectCompartment", {}, _key);
  },
  nothingHere: function errors_nothingHere(_key?: boolean): string {
    return t("errors.nothingHere", {}, _key);
  },
  notFound: function errors_notFound(
    resourceType: string,
    _key?: boolean
  ): string {
    return t("errors.notFound", { resourceType }, _key);
  },
  noAuth: function errors_noAuth(resourceType: string, _key?: boolean): string {
    return t("errors.noAuth", { resourceType }, _key);
  },
  noListAuth: function errors_noListAuth(
    resourceType: string,
    _key?: boolean
  ): string {
    return t("errors.noListAuth", { resourceType }, _key);
  },
  generic: function errors_generic(_key?: boolean): string {
    return t("errors.generic", {}, _key);
  },
  fetching: function errors_fetching(_key?: boolean): string {
    return t("errors.fetching", {}, _key);
  },
  refreshHint: function errors_refreshHint(_key?: boolean): string {
    return t("errors.refreshHint", {}, _key);
  },
};
export const projects = {
  linkText: function projects_linkText(_key?: boolean): string {
    return t("projects.linkText", {}, _key);
  },
  detailText: function projects_detailText(_key?: boolean): string {
    return t("projects.detailText", {}, _key);
  },
  createTitle: function projects_createTitle(_key?: boolean): string {
    return t("projects.createTitle", {}, _key);
  },
  deleteTitle: function projects_deleteTitle(_key?: boolean): string {
    return t("projects.deleteTitle", {}, _key);
  },
  editTitle: function projects_editTitle(_key?: boolean): string {
    return t("projects.editTitle", {}, _key);
  },
  createDescription: function projects_createDescription(
    _key?: boolean
  ): string {
    return t("projects.createDescription", {}, _key);
  },
  deleteConfirmation: function projects_deleteConfirmation(
    projectName: string,
    _key?: boolean
  ): string {
    return t("projects.deleteConfirmation", { projectName }, _key);
  },
  deleteAgreement: function projects_deleteAgreement(
    confirmationText: string,
    _key?: boolean
  ): string {
    return t("projects.deleteAgreement", { confirmationText }, _key);
  },
  removeResourcesWarning: function projects_removeResourcesWarning(
    _key?: boolean
  ): string {
    return t("projects.removeResourcesWarning", {}, _key);
  },
  deleteStateWarning: function projects_deleteStateWarning(
    _key?: boolean
  ): string {
    return t("projects.deleteStateWarning", {}, _key);
  },
  canFailWarning: function projects_canFailWarning(_key?: boolean): string {
    return t("projects.canFailWarning", {}, _key);
  },
  deleteFailed: function projects_deleteFailed(_key?: boolean): string {
    return t("projects.deleteFailed", {}, _key);
  },
  deleteInProgress: function projects_deleteInProgress(_key?: boolean): string {
    return t("projects.deleteInProgress", {}, _key);
  },
  editProjectSuccessMessage: function projects_editProjectSuccessMessage(
    _key?: boolean
  ): string {
    return t("projects.editProjectSuccessMessage", {}, _key);
  },
  createProjectSuccessMessage: function projects_createProjectSuccessMessage(
    _key?: boolean
  ): string {
    return t("projects.createProjectSuccessMessage", {}, _key);
  },
  saveAsStackSuccessMessage: function projects_saveAsStackSuccessMessage(
    _key?: boolean
  ): string {
    return t("projects.saveAsStackSuccessMessage", {}, _key);
  },
  saveAsStackFailureMessage: function projects_saveAsStackFailureMessage(
    _key?: boolean
  ): string {
    return t("projects.saveAsStackFailureMessage", {}, _key);
  },
  shapeText: function projects_shapeText(_key?: boolean): string {
    return t("projects.shapeText", {}, _key);
  },
  labels: {
    compartment: function projects_labels_compartment(_key?: boolean): string {
      return t("projects.labels.compartment", {}, _key);
    },
    description: function projects_labels_description(_key?: boolean): string {
      return t("projects.labels.description", {}, _key);
    },
    name: function projects_labels_name(_key?: boolean): string {
      return t("projects.labels.name", {}, _key);
    },
    timeCreated: function projects_labels_timeCreated(_key?: boolean): string {
      return t("projects.labels.timeCreated", {}, _key);
    },
    createdBy: function projects_labels_createdBy(_key?: boolean): string {
      return t("projects.labels.createdBy", {}, _key);
    },
    summary: function projects_labels_summary(_key?: boolean): string {
      return t("projects.labels.summary", {}, _key);
    },
    state: function projects_labels_state(_key?: boolean): string {
      return t("projects.labels.state", {}, _key);
    },
    numberShowingText: function projects_labels_numberShowingText(
      numberShowing: number,
      _key?: boolean
    ): string {
      return t("projects.labels.numberShowingText", { numberShowing }, _key);
    },
  },
  actions: {
    create: function projects_actions_create(_key?: boolean): string {
      return t("projects.actions.create", {}, _key);
    },
    moveResource: function projects_actions_moveResource(
      _key?: boolean
    ): string {
      return t("projects.actions.moveResource", {}, _key);
    },
    addTags: function projects_actions_addTags(_key?: boolean): string {
      return t("projects.actions.addTags", {}, _key);
    },
  },
};
export const featureStore = {
  linkText: function featureStore_linkText(_key?: boolean): string {
    return t("featureStore.linkText", {}, _key);
  },
};
export const featureStoreEntity = {
  linkText: function featureStoreEntity_linkText(_key?: boolean): string {
    return t("featureStoreEntity.linkText", {}, _key);
  },
};
export const dataSource = {
  linkText: function dataSource_linkText(_key?: boolean): string {
    return t("dataSource.linkText", {}, _key);
  },
};
export const featureStoreFeatureSchema = {
  linkText: function featureStoreFeatureSchema_linkText(
    _key?: boolean
  ): string {
    return t("featureStoreFeatureSchema.linkText", {}, _key);
  },
};
export const featureStoreFeatureTransformation = {
  linkText: function featureStoreFeatureTransformation_linkText(
    _key?: boolean
  ): string {
    return t("featureStoreFeatureTransformation.linkText", {}, _key);
  },
};
export const featureStoreDataset = {
  linkText: function featureStoreDataset_linkText(_key?: boolean): string {
    return t("featureStoreDataset.linkText", {}, _key);
  },
};
export const featureStoreFeatureDefinition = {
  detailText: function featureStoreFeatureDefinition_detailText(
    _key?: boolean
  ): string {
    return t("featureStoreFeatureDefinition.detailText", {}, _key);
  },
  linkText: function featureStoreFeatureDefinition_linkText(
    _key?: boolean
  ): string {
    return t("featureStoreFeatureDefinition.linkText", {}, _key);
  },
  shapeText: function featureStoreFeatureDefinition_shapeText(
    _key?: boolean
  ): string {
    return t("featureStoreFeatureDefinition.shapeText", {}, _key);
  },
  labels: {
    description: function featureStoreFeatureDefinition_labels_description(
      _key?: boolean
    ): string {
      return t("featureStoreFeatureDefinition.labels.description", {}, _key);
    },
    type: function featureStoreFeatureDefinition_labels_type(
      _key?: boolean
    ): string {
      return t("featureStoreFeatureDefinition.labels.type", {}, _key);
    },
    name: function featureStoreFeatureDefinition_labels_name(
      _key?: boolean
    ): string {
      return t("featureStoreFeatureDefinition.labels.name", {}, _key);
    },
    nullable: function featureStoreFeatureDefinition_labels_nullable(
      _key?: boolean
    ): string {
      return t("featureStoreFeatureDefinition.labels.nullable", {}, _key);
    },
    entity: function featureStoreFeatureDefinition_labels_entity(
      _key?: boolean
    ): string {
      return t("featureStoreFeatureDefinition.labels.entity", {}, _key);
    },
    defaultValue: function featureStoreFeatureDefinition_labels_defaultValue(
      _key?: boolean
    ): string {
      return t("featureStoreFeatureDefinition.labels.defaultValue", {}, _key);
    },
    orderNumber: function featureStoreFeatureDefinition_labels_orderNumber(
      _key?: boolean
    ): string {
      return t("featureStoreFeatureDefinition.labels.orderNumber", {}, _key);
    },
  },
};
export const featureStores = {
  detailText: function featureStores_detailText(_key?: boolean): string {
    return t("featureStores.detailText", {}, _key);
  },
  shapeText: function featureStores_shapeText(_key?: boolean): string {
    return t("featureStores.shapeText", {}, _key);
  },
  labels: {
    description: function featureStores_labels_description(
      _key?: boolean
    ): string {
      return t("featureStores.labels.description", {}, _key);
    },
    timeCreated: function featureStores_labels_timeCreated(
      _key?: boolean
    ): string {
      return t("featureStores.labels.timeCreated", {}, _key);
    },
  },
};
export const warnings = {
  emptySubnetList: function warnings_emptySubnetList(_key?: boolean): string {
    return t("warnings.emptySubnetList", {}, _key);
  },
  emptyVcnList: function warnings_emptyVcnList(_key?: boolean): string {
    return t("warnings.emptyVcnList", {}, _key);
  },
  emptyProjectList: function warnings_emptyProjectList(_key?: boolean): string {
    return t("warnings.emptyProjectList", {}, _key);
  },
  emptyJobList: function warnings_emptyJobList(_key?: boolean): string {
    return t("warnings.emptyJobList", {}, _key);
  },
};
export const notebooks = {
  linkText: function notebooks_linkText(_key?: boolean): string {
    return t("notebooks.linkText", {}, _key);
  },
  detailText: function notebooks_detailText(_key?: boolean): string {
    return t("notebooks.detailText", {}, _key);
  },
  editTitle: function notebooks_editTitle(_key?: boolean): string {
    return t("notebooks.editTitle", {}, _key);
  },
  createTitle: function notebooks_createTitle(_key?: boolean): string {
    return t("notebooks.createTitle", {}, _key);
  },
  deleteTitle: function notebooks_deleteTitle(_key?: boolean): string {
    return t("notebooks.deleteTitle", {}, _key);
  },
  details: function notebooks_details(_key?: boolean): string {
    return t("notebooks.details", {}, _key);
  },
  deleteConfirmation: function notebooks_deleteConfirmation(
    displayName: string,
    _key?: boolean
  ): string {
    return t("notebooks.deleteConfirmation", { displayName }, _key);
  },
  deleteAgreement: function notebooks_deleteAgreement(
    confirmationText: string,
    _key?: boolean
  ): string {
    return t("notebooks.deleteAgreement", { confirmationText }, _key);
  },
  deleteDisclaimer: function notebooks_deleteDisclaimer(
    _key?: boolean
  ): string {
    return t("notebooks.deleteDisclaimer", {}, _key);
  },
  deactivateTitle: function notebooks_deactivateTitle(_key?: boolean): string {
    return t("notebooks.deactivateTitle", {}, _key);
  },
  deactivateConfirmation: function notebooks_deactivateConfirmation(
    displayName: string,
    _key?: boolean
  ): string {
    return t("notebooks.deactivateConfirmation", { displayName }, _key);
  },
  deactivateDisclaimer: function notebooks_deactivateDisclaimer(
    _key?: boolean
  ): string {
    return t("notebooks.deactivateDisclaimer", {}, _key);
  },
  sizeInGigabytes: function notebooks_sizeInGigabytes(
    size: number,
    _key?: boolean
  ): string {
    return t("notebooks.sizeInGigabytes", { size }, _key);
  },
  shapeText: function notebooks_shapeText(_key?: boolean): string {
    return t("notebooks.shapeText", {}, _key);
  },
  activateTitle: function notebooks_activateTitle(_key?: boolean): string {
    return t("notebooks.activateTitle", {}, _key);
  },
  activateDisclaimer: function notebooks_activateDisclaimer(
    displayName: string,
    _key?: boolean
  ): string {
    return t("notebooks.activateDisclaimer", { displayName }, _key);
  },
  metricsInfoBlock: function notebooks_metricsInfoBlock(
    _key?: boolean
  ): string {
    return t("notebooks.metricsInfoBlock", {}, _key);
  },
  metricsDocsLinkText: function notebooks_metricsDocsLinkText(
    _key?: boolean
  ): string {
    return t("notebooks.metricsDocsLinkText", {}, _key);
  },
  labels: {
    compartment: function notebooks_labels_compartment(_key?: boolean): string {
      return t("notebooks.labels.compartment", {}, _key);
    },
    timeCreated: function notebooks_labels_timeCreated(_key?: boolean): string {
      return t("notebooks.labels.timeCreated", {}, _key);
    },
    createdBy: function notebooks_labels_createdBy(_key?: boolean): string {
      return t("notebooks.labels.createdBy", {}, _key);
    },
    computeResource: function notebooks_labels_computeResource(
      _key?: boolean
    ): string {
      return t("notebooks.labels.computeResource", {}, _key);
    },
    resource: function notebooks_labels_resource(_key?: boolean): string {
      return t("notebooks.labels.resource", {}, _key);
    },
    state: function notebooks_labels_state(_key?: boolean): string {
      return t("notebooks.labels.state", {}, _key);
    },
    name: function notebooks_labels_name(_key?: boolean): string {
      return t("notebooks.labels.name", {}, _key);
    },
    description: function notebooks_labels_description(_key?: boolean): string {
      return t("notebooks.labels.description", {}, _key);
    },
    numberShowingText: function notebooks_labels_numberShowingText(
      numberShowing: number,
      _key?: boolean
    ): string {
      return t("notebooks.labels.numberShowingText", { numberShowing }, _key);
    },
    instanceShape: function notebooks_labels_instanceShape(
      _key?: boolean
    ): string {
      return t("notebooks.labels.instanceShape", {}, _key);
    },
    blockStorageSize: function notebooks_labels_blockStorageSize(
      _key?: boolean
    ): string {
      return t("notebooks.labels.blockStorageSize", {}, _key);
    },
    vcnCompartment: function notebooks_labels_vcnCompartment(
      _key?: boolean
    ): string {
      return t("notebooks.labels.vcnCompartment", {}, _key);
    },
    vcn: function notebooks_labels_vcn(_key?: boolean): string {
      return t("notebooks.labels.vcn", {}, _key);
    },
    subnet: function notebooks_labels_subnet(_key?: boolean): string {
      return t("notebooks.labels.subnet", {}, _key);
    },
    computeSelectDescription:
      function notebooks_labels_computeSelectDescription(
        ocpus: string,
        memory: string,
        _key?: boolean
      ): string {
        return t(
          "notebooks.labels.computeSelectDescription",
          { ocpus, memory },
          _key
        );
      },
    ocpusLabel: function notebooks_labels_ocpusLabel(_key?: boolean): string {
      return t("notebooks.labels.ocpusLabel", {}, _key);
    },
    memoryLabel: function notebooks_labels_memoryLabel(_key?: boolean): string {
      return t("notebooks.labels.memoryLabel", {}, _key);
    },
  },
  hints: {
    blockStorageSize: function notebooks_hints_blockStorageSize(
      minSize: number,
      maxSize: number,
      maxSizeTB: number,
      _key?: boolean
    ): string {
      return t(
        "notebooks.hints.blockStorageSize",
        { minSize, maxSize, maxSizeTB },
        _key
      );
    },
    blockStorageSizeDefault: function notebooks_hints_blockStorageSizeDefault(
      defaultSize: number,
      minSize: number,
      maxSize: number,
      maxSizeTB: number,
      _key?: boolean
    ): string {
      return t(
        "notebooks.hints.blockStorageSizeDefault",
        { defaultSize, minSize, maxSize, maxSizeTB },
        _key
      );
    },
    vcnMissingPermissionsHoverText:
      function notebooks_hints_vcnMissingPermissionsHoverText(
        _key?: boolean
      ): string {
        return t("notebooks.hints.vcnMissingPermissionsHoverText", {}, _key);
      },
    subnetHint: function notebooks_hints_subnetHint(_key?: boolean): string {
      return t("notebooks.hints.subnetHint", {}, _key);
    },
  },
  actions: {
    create: function notebooks_actions_create(_key?: boolean): string {
      return t("notebooks.actions.create", {}, _key);
    },
    moveResource: function notebooks_actions_moveResource(
      _key?: boolean
    ): string {
      return t("notebooks.actions.moveResource", {}, _key);
    },
  },
  runtimeConfig: {
    sectionHeader: function notebooks_runtimeConfig_sectionHeader(
      _key?: boolean
    ): string {
      return t("notebooks.runtimeConfig.sectionHeader", {}, _key);
    },
    sectionDescription: function notebooks_runtimeConfig_sectionDescription(
      _key?: boolean
    ): string {
      return t("notebooks.runtimeConfig.sectionDescription", {}, _key);
    },
    sectionDescriptionTooltip:
      function notebooks_runtimeConfig_sectionDescriptionTooltip(
        href: string,
        _key?: boolean
      ): string {
        return t(
          "notebooks.runtimeConfig.sectionDescriptionTooltip",
          { href },
          _key
        );
      },
    sectionHelpText: function notebooks_runtimeConfig_sectionHelpText(
      href: string,
      _key?: boolean
    ): string {
      return t("notebooks.runtimeConfig.sectionHelpText", { href }, _key);
    },
    customEnvVarTabHeader:
      function notebooks_runtimeConfig_customEnvVarTabHeader(
        _key?: boolean
      ): string {
        return t("notebooks.runtimeConfig.customEnvVarTabHeader", {}, _key);
      },
    gitConfigTabHeader: function notebooks_runtimeConfig_gitConfigTabHeader(
      _key?: boolean
    ): string {
      return t("notebooks.runtimeConfig.gitConfigTabHeader", {}, _key);
    },
    previewActionText: function notebooks_runtimeConfig_previewActionText(
      _key?: boolean
    ): string {
      return t("notebooks.runtimeConfig.previewActionText", {}, _key);
    },
    gitRepoUrlInputLabel: function notebooks_runtimeConfig_gitRepoUrlInputLabel(
      _key?: boolean
    ): string {
      return t("notebooks.runtimeConfig.gitRepoUrlInputLabel", {}, _key);
    },
    gitSettingsAddUrlActionLabel:
      function notebooks_runtimeConfig_gitSettingsAddUrlActionLabel(
        _key?: boolean
      ): string {
        return t(
          "notebooks.runtimeConfig.gitSettingsAddUrlActionLabel",
          {},
          _key
        );
      },
    previewNoKeyLabel: function notebooks_runtimeConfig_previewNoKeyLabel(
      _key?: boolean
    ): string {
      return t("notebooks.runtimeConfig.previewNoKeyLabel", {}, _key);
    },
    customEnvVarTabDescription:
      function notebooks_runtimeConfig_customEnvVarTabDescription(
        limit: number,
        _key?: boolean
      ): string {
        return t(
          "notebooks.runtimeConfig.customEnvVarTabDescription",
          { limit },
          _key
        );
      },
    customEnvVarAddNewRowText:
      function notebooks_runtimeConfig_customEnvVarAddNewRowText(
        _key?: boolean
      ): string {
        return t("notebooks.runtimeConfig.customEnvVarAddNewRowText", {}, _key);
      },
    customEnvVarKeyLabel: function notebooks_runtimeConfig_customEnvVarKeyLabel(
      _key?: boolean
    ): string {
      return t("notebooks.runtimeConfig.customEnvVarKeyLabel", {}, _key);
    },
    customEnvVarKeyTooltip:
      function notebooks_runtimeConfig_customEnvVarKeyTooltip(
        min: number,
        max: number,
        _key?: boolean
      ): string {
        return t(
          "notebooks.runtimeConfig.customEnvVarKeyTooltip",
          { min, max },
          _key
        );
      },
    customEnvVarValueLabel:
      function notebooks_runtimeConfig_customEnvVarValueLabel(
        _key?: boolean
      ): string {
        return t("notebooks.runtimeConfig.customEnvVarValueLabel", {}, _key);
      },
    customEnvVarValueTooltip:
      function notebooks_runtimeConfig_customEnvVarValueTooltip(
        min: number,
        max: number,
        _key?: boolean
      ): string {
        return t(
          "notebooks.runtimeConfig.customEnvVarValueTooltip",
          { min, max },
          _key
        );
      },
    gitSettingsTabDescription:
      function notebooks_runtimeConfig_gitSettingsTabDescription(
        limit: number,
        _key?: boolean
      ): string {
        return t(
          "notebooks.runtimeConfig.gitSettingsTabDescription",
          { limit },
          _key
        );
      },
    gitSettingsURLTooltip:
      function notebooks_runtimeConfig_gitSettingsURLTooltip(
        _key?: boolean
      ): string {
        return t("notebooks.runtimeConfig.gitSettingsURLTooltip", {}, _key);
      },
    duplicateGitRepoUrlError:
      function notebooks_runtimeConfig_duplicateGitRepoUrlError(
        _key?: boolean
      ): string {
        return t("notebooks.runtimeConfig.duplicateGitRepoUrlError", {}, _key);
      },
    duplicateCustomEnvVarKeyError:
      function notebooks_runtimeConfig_duplicateCustomEnvVarKeyError(
        _key?: boolean
      ): string {
        return t(
          "notebooks.runtimeConfig.duplicateCustomEnvVarKeyError",
          {},
          _key
        );
      },
    InvalidUrlFormatError:
      function notebooks_runtimeConfig_InvalidUrlFormatError(
        _key?: boolean
      ): string {
        return t("notebooks.runtimeConfig.InvalidUrlFormatError", {}, _key);
      },
    GitUrlNotReachableError:
      function notebooks_runtimeConfig_GitUrlNotReachableError(
        _key?: boolean
      ): string {
        return t("notebooks.runtimeConfig.GitUrlNotReachableError", {}, _key);
      },
    InvalidCustomEnvVarKeyPrefixError:
      function notebooks_runtimeConfig_InvalidCustomEnvVarKeyPrefixError(
        _key?: boolean
      ): string {
        return t(
          "notebooks.runtimeConfig.InvalidCustomEnvVarKeyPrefixError",
          {},
          _key
        );
      },
    InvalidCustomEnvVarKeyFormatError:
      function notebooks_runtimeConfig_InvalidCustomEnvVarKeyFormatError(
        _key?: boolean
      ): string {
        return t(
          "notebooks.runtimeConfig.InvalidCustomEnvVarKeyFormatError",
          {},
          _key
        );
      },
    hintTextCustomEnvVarKey:
      function notebooks_runtimeConfig_hintTextCustomEnvVarKey(
        _key?: boolean
      ): string {
        return t("notebooks.runtimeConfig.hintTextCustomEnvVarKey", {}, _key);
      },
    hintTextCustomEnvVarValue:
      function notebooks_runtimeConfig_hintTextCustomEnvVarValue(
        _key?: boolean
      ): string {
        return t("notebooks.runtimeConfig.hintTextCustomEnvVarValue", {}, _key);
      },
    hintTextGitRepoUrl: function notebooks_runtimeConfig_hintTextGitRepoUrl(
      _key?: boolean
    ): string {
      return t("notebooks.runtimeConfig.hintTextGitRepoUrl", {}, _key);
    },
  },
};
export const models = {
  linkText: function models_linkText(_key?: boolean): string {
    return t("models.linkText", {}, _key);
  },
  description: function models_description(_key?: boolean): string {
    return t("models.description", {}, _key);
  },
  learnMoreText: function models_learnMoreText(
    href: string,
    _key?: boolean
  ): string {
    return t("models.learnMoreText", { href }, _key);
  },
  detailText: function models_detailText(_key?: boolean): string {
    return t("models.detailText", {}, _key);
  },
  createTitle: function models_createTitle(_key?: boolean): string {
    return t("models.createTitle", {}, _key);
  },
  editTitle: function models_editTitle(_key?: boolean): string {
    return t("models.editTitle", {}, _key);
  },
  addTitle: function models_addTitle(_key?: boolean): string {
    return t("models.addTitle", {}, _key);
  },
  deleteTitle: function models_deleteTitle(_key?: boolean): string {
    return t("models.deleteTitle", {}, _key);
  },
  activateTitle: function models_activateTitle(_key?: boolean): string {
    return t("models.activateTitle", {}, _key);
  },
  deactivateTitle: function models_deactivateTitle(_key?: boolean): string {
    return t("models.deactivateTitle", {}, _key);
  },
  schemaDefinitionTitle: function models_schemaDefinitionTitle(
    _key?: boolean
  ): string {
    return t("models.schemaDefinitionTitle", {}, _key);
  },
  downloadArtifact: function models_downloadArtifact(_key?: boolean): string {
    return t("models.downloadArtifact", {}, _key);
  },
  uploadArtifact: function models_uploadArtifact(_key?: boolean): string {
    return t("models.uploadArtifact", {}, _key);
  },
  modelArtifactTitle: function models_modelArtifactTitle(
    _key?: boolean
  ): string {
    return t("models.modelArtifactTitle", {}, _key);
  },
  modelProvenanceTitle: function models_modelProvenanceTitle(
    _key?: boolean
  ): string {
    return t("models.modelProvenanceTitle", {}, _key);
  },
  modelTaxonomyTitle: function models_modelTaxonomyTitle(
    _key?: boolean
  ): string {
    return t("models.modelTaxonomyTitle", {}, _key);
  },
  createModelLoadingText: function models_createModelLoadingText(
    _key?: boolean
  ): string {
    return t("models.createModelLoadingText", {}, _key);
  },
  createModelSuccessMessage: function models_createModelSuccessMessage(
    _key?: boolean
  ): string {
    return t("models.createModelSuccessMessage", {}, _key);
  },
  createModelVersionSetSuccessMessage:
    function models_createModelVersionSetSuccessMessage(
      _key?: boolean
    ): string {
      return t("models.createModelVersionSetSuccessMessage", {}, _key);
    },
  addModelToVersionSetSuccessMessage:
    function models_addModelToVersionSetSuccessMessage(_key?: boolean): string {
      return t("models.addModelToVersionSetSuccessMessage", {}, _key);
    },
  uploadArtifactLoadingText: function models_uploadArtifactLoadingText(
    _key?: boolean
  ): string {
    return t("models.uploadArtifactLoadingText", {}, _key);
  },
  createProvenanceLoadingText: function models_createProvenanceLoadingText(
    _key?: boolean
  ): string {
    return t("models.createProvenanceLoadingText", {}, _key);
  },
  modelProvenanceDesc: function models_modelProvenanceDesc(
    _key?: boolean
  ): string {
    return t("models.modelProvenanceDesc", {}, _key);
  },
  deleteConfirmation: function models_deleteConfirmation(
    displayName: string,
    _key?: boolean
  ): string {
    return t("models.deleteConfirmation", { displayName }, _key);
  },
  deleteAgreement: function models_deleteAgreement(
    confirmationText: string,
    _key?: boolean
  ): string {
    return t("models.deleteAgreement", { confirmationText }, _key);
  },
  deleteDisclaimer: function models_deleteDisclaimer(_key?: boolean): string {
    return t("models.deleteDisclaimer", {}, _key);
  },
  deleteWarningTitle: function models_deleteWarningTitle(
    _key?: boolean
  ): string {
    return t("models.deleteWarningTitle", {}, _key);
  },
  missingArtifact: function models_missingArtifact(_key?: boolean): string {
    return t("models.missingArtifact", {}, _key);
  },
  genericMissingArtifact: function models_genericMissingArtifact(
    _key?: boolean
  ): string {
    return t("models.genericMissingArtifact", {}, _key);
  },
  deactivateConfirmation: function models_deactivateConfirmation(
    displayName: string,
    _key?: boolean
  ): string {
    return t("models.deactivateConfirmation", { displayName }, _key);
  },
  deactivateDisclaimer: function models_deactivateDisclaimer(
    _key?: boolean
  ): string {
    return t("models.deactivateDisclaimer", {}, _key);
  },
  activateConfirmation: function models_activateConfirmation(
    displayName: string,
    _key?: boolean
  ): string {
    return t("models.activateConfirmation", { displayName }, _key);
  },
  activateDisclaimer: function models_activateDisclaimer(
    _key?: boolean
  ): string {
    return t("models.activateDisclaimer", {}, _key);
  },
  shapeText: function models_shapeText(_key?: boolean): string {
    return t("models.shapeText", {}, _key);
  },
  labels: {
    description: function models_labels_description(_key?: boolean): string {
      return t("models.labels.description", {}, _key);
    },
    modelArtifact: function models_labels_modelArtifact(
      _key?: boolean
    ): string {
      return t("models.labels.modelArtifact", {}, _key);
    },
    modelVersionSet: function models_labels_modelVersionSet(
      _key?: boolean
    ): string {
      return t("models.labels.modelVersionSet", {}, _key);
    },
    uploadLabel: function models_labels_uploadLabel(_key?: boolean): string {
      return t("models.labels.uploadLabel", {}, _key);
    },
    uploadArtifact: function models_labels_uploadArtifact(
      _key?: boolean
    ): string {
      return t("models.labels.uploadArtifact", {}, _key);
    },
    modelArtifactLabelForModelDetails:
      function models_labels_modelArtifactLabelForModelDetails(
        _key?: boolean
      ): string {
        return t("models.labels.modelArtifactLabelForModelDetails", {}, _key);
      },
    compartment: function models_labels_compartment(_key?: boolean): string {
      return t("models.labels.compartment", {}, _key);
    },
    name: function models_labels_name(_key?: boolean): string {
      return t("models.labels.name", {}, _key);
    },
    none: function models_labels_none(_key?: boolean): string {
      return t("models.labels.none", {}, _key);
    },
    createdBy: function models_labels_createdBy(_key?: boolean): string {
      return t("models.labels.createdBy", {}, _key);
    },
    state: function models_labels_state(_key?: boolean): string {
      return t("models.labels.state", {}, _key);
    },
    timeCreated: function models_labels_timeCreated(_key?: boolean): string {
      return t("models.labels.timeCreated", {}, _key);
    },
    versionSetName: function models_labels_versionSetName(
      _key?: boolean
    ): string {
      return t("models.labels.versionSetName", {}, _key);
    },
    versionId: function models_labels_versionId(_key?: boolean): string {
      return t("models.labels.versionId", {}, _key);
    },
    versionLabel: function models_labels_versionLabel(_key?: boolean): string {
      return t("models.labels.versionLabel", {}, _key);
    },
    selectByProject: function models_labels_selectByProject(
      _key?: boolean
    ): string {
      return t("models.labels.selectByProject", {}, _key);
    },
    versionSetDetails: function models_labels_versionSetDetails(
      _key?: boolean
    ): string {
      return t("models.labels.versionSetDetails", {}, _key);
    },
    features: function models_labels_features(_key?: boolean): string {
      return t("models.labels.features", {}, _key);
    },
    modelInformation: function models_labels_modelInformation(
      _key?: boolean
    ): string {
      return t("models.labels.modelInformation", {}, _key);
    },
    numberShowingText: function models_labels_numberShowingText(
      numberShowing: number,
      _key?: boolean
    ): string {
      return t("models.labels.numberShowingText", { numberShowing }, _key);
    },
    modelProvenance: function models_labels_modelProvenance(
      _key?: boolean
    ): string {
      return t("models.labels.modelProvenance", {}, _key);
    },
    modelTaxonomy: function models_labels_modelTaxonomy(
      _key?: boolean
    ): string {
      return t("models.labels.modelTaxonomy", {}, _key);
    },
    documentModelProvenance: function models_labels_documentModelProvenance(
      _key?: boolean
    ): string {
      return t("models.labels.documentModelProvenance", {}, _key);
    },
    modelProvenanceSelect: function models_labels_modelProvenanceSelect(
      _key?: boolean
    ): string {
      return t("models.labels.modelProvenanceSelect", {}, _key);
    },
    modelVersionSetSelect: function models_labels_modelVersionSetSelect(
      _key?: boolean
    ): string {
      return t("models.labels.modelVersionSetSelect", {}, _key);
    },
    repositoryUrl: function models_labels_repositoryUrl(
      _key?: boolean
    ): string {
      return t("models.labels.repositoryUrl", {}, _key);
    },
    gitCommit: function models_labels_gitCommit(_key?: boolean): string {
      return t("models.labels.gitCommit", {}, _key);
    },
    gitBranch: function models_labels_gitBranch(_key?: boolean): string {
      return t("models.labels.gitBranch", {}, _key);
    },
    scriptDir: function models_labels_scriptDir(_key?: boolean): string {
      return t("models.labels.scriptDir", {}, _key);
    },
    trainingScript: function models_labels_trainingScript(
      _key?: boolean
    ): string {
      return t("models.labels.trainingScript", {}, _key);
    },
    modelTaxonomyDescription: function models_labels_modelTaxonomyDescription(
      _key?: boolean
    ): string {
      return t("models.labels.modelTaxonomyDescription", {}, _key);
    },
    schemaDefinition: function models_labels_schemaDefinition(
      _key?: boolean
    ): string {
      return t("models.labels.schemaDefinition", {}, _key);
    },
    modelSchemaDescription: function models_labels_modelSchemaDescription(
      _key?: boolean
    ): string {
      return t("models.labels.modelSchemaDescription", {}, _key);
    },
    artifactDescription: function models_labels_artifactDescription(
      _key?: boolean
    ): string {
      return t("models.labels.artifactDescription", {}, _key);
    },
    fileSelectorText: function models_labels_fileSelectorText(
      _key?: boolean
    ): string {
      return t("models.labels.fileSelectorText", {}, _key);
    },
    fileSelectorBrowseLinkText:
      function models_labels_fileSelectorBrowseLinkText(
        _key?: boolean
      ): string {
        return t("models.labels.fileSelectorBrowseLinkText", {}, _key);
      },
    moveResourceType: function models_labels_moveResourceType(
      _key?: boolean
    ): string {
      return t("models.labels.moveResourceType", {}, _key);
    },
    compartmentSelectLabel: function models_labels_compartmentSelectLabel(
      compartmentName: string,
      projectName: string,
      _key?: boolean
    ): string {
      return t(
        "models.labels.compartmentSelectLabel",
        { compartmentName, projectName },
        _key
      );
    },
  },
  actions: {
    create: function models_actions_create(_key?: boolean): string {
      return t("models.actions.create", {}, _key);
    },
    configure: function models_actions_configure(_key?: boolean): string {
      return t("models.actions.configure", {}, _key);
    },
    createModelVersionSet: function models_actions_createModelVersionSet(
      _key?: boolean
    ): string {
      return t("models.actions.createModelVersionSet", {}, _key);
    },
    delete: function models_actions_delete(_key?: boolean): string {
      return t("models.actions.delete", {}, _key);
    },
    downloadSampleArtifact: function models_actions_downloadSampleArtifact(
      _key?: boolean
    ): string {
      return t("models.actions.downloadSampleArtifact", {}, _key);
    },
    downloadArtifact: function models_actions_downloadArtifact(
      _key?: boolean
    ): string {
      return t("models.actions.downloadArtifact", {}, _key);
    },
    cancelDownloadArtifact: function models_actions_cancelDownloadArtifact(
      _key?: boolean
    ): string {
      return t("models.actions.cancelDownloadArtifact", {}, _key);
    },
    retryDownloadArtifact: function models_actions_retryDownloadArtifact(
      _key?: boolean
    ): string {
      return t("models.actions.retryDownloadArtifact", {}, _key);
    },
    retryUpload: function models_actions_retryUpload(_key?: boolean): string {
      return t("models.actions.retryUpload", {}, _key);
    },
    upload: function models_actions_upload(_key?: boolean): string {
      return t("models.actions.upload", {}, _key);
    },
    edit: function models_actions_edit(_key?: boolean): string {
      return t("models.actions.edit", {}, _key);
    },
    add: function models_actions_add(_key?: boolean): string {
      return t("models.actions.add", {}, _key);
    },
    addModelToVersionSet: function models_actions_addModelToVersionSet(
      _key?: boolean
    ): string {
      return t("models.actions.addModelToVersionSet", {}, _key);
    },
    uploadArtifact: function models_actions_uploadArtifact(
      _key?: boolean
    ): string {
      return t("models.actions.uploadArtifact", {}, _key);
    },
    downloadBoilerPlateArtifactCode:
      function models_actions_downloadBoilerPlateArtifactCode(
        _key?: boolean
      ): string {
        return t("models.actions.downloadBoilerPlateArtifactCode", {}, _key);
      },
    select: function models_actions_select(_key?: boolean): string {
      return t("models.actions.select", {}, _key);
    },
    addCustomAttribute: function models_actions_addCustomAttribute(
      _key?: boolean
    ): string {
      return t("models.actions.addCustomAttribute", {}, _key);
    },
  },
  resources: {
    modelDeploymentsForModel: {
      linkText: function models_resources_modelDeploymentsForModel_linkText(
        _key?: boolean
      ): string {
        return t(
          "models.resources.modelDeploymentsForModel.linkText",
          {},
          _key
        );
      },
      description:
        function models_resources_modelDeploymentsForModel_description(
          _key?: boolean
        ): string {
          return t(
            "models.resources.modelDeploymentsForModel.description",
            {},
            _key
          );
        },
      compartmentName:
        function models_resources_modelDeploymentsForModel_compartmentName(
          _key?: boolean
        ): string {
          return t(
            "models.resources.modelDeploymentsForModel.compartmentName",
            {},
            _key
          );
        },
    },
    modelTaxonomy: {
      linkText: function models_resources_modelTaxonomy_linkText(
        _key?: boolean
      ): string {
        return t("models.resources.modelTaxonomy.linkText", {}, _key);
      },
      description: function models_resources_modelTaxonomy_description(
        _key?: boolean
      ): string {
        return t("models.resources.modelTaxonomy.description", {}, _key);
      },
      definedMetadataLabel:
        function models_resources_modelTaxonomy_definedMetadataLabel(
          _key?: boolean
        ): string {
          return t(
            "models.resources.modelTaxonomy.definedMetadataLabel",
            {},
            _key
          );
        },
      customMetadataLabel:
        function models_resources_modelTaxonomy_customMetadataLabel(
          _key?: boolean
        ): string {
          return t(
            "models.resources.modelTaxonomy.customMetadataLabel",
            {},
            _key
          );
        },
      selectCategory: function models_resources_modelTaxonomy_selectCategory(
        _key?: boolean
      ): string {
        return t("models.resources.modelTaxonomy.selectCategory", {}, _key);
      },
      all: function models_resources_modelTaxonomy_all(_key?: boolean): string {
        return t("models.resources.modelTaxonomy.all", {}, _key);
      },
    },
    modelProvenance: {
      title: function models_resources_modelProvenance_title(
        _key?: boolean
      ): string {
        return t("models.resources.modelProvenance.title", {}, _key);
      },
      description: function models_resources_modelProvenance_description(
        _key?: boolean
      ): string {
        return t("models.resources.modelProvenance.description", {}, _key);
      },
      TrainingResourceOcid:
        function models_resources_modelProvenance_TrainingResourceOcid(
          _key?: boolean
        ): string {
          return t(
            "models.resources.modelProvenance.TrainingResourceOcid",
            {},
            _key
          );
        },
      ModelTrainingSourceCode:
        function models_resources_modelProvenance_ModelTrainingSourceCode(
          _key?: boolean
        ): string {
          return t(
            "models.resources.modelProvenance.ModelTrainingSourceCode",
            {},
            _key
          );
        },
      errorMessages: {
        notFound:
          function models_resources_modelProvenance_errorMessages_notFound(
            _key?: boolean
          ): string {
            return t(
              "models.resources.modelProvenance.errorMessages.notFound",
              {},
              _key
            );
          },
      },
      resource: function models_resources_modelProvenance_resource(
        _key?: boolean
      ): string {
        return t("models.resources.modelProvenance.resource", {}, _key);
      },
      compartment: function models_resources_modelProvenance_compartment(
        _key?: boolean
      ): string {
        return t("models.resources.modelProvenance.compartment", {}, _key);
      },
      jobRun: function models_resources_modelProvenance_jobRun(
        _key?: boolean
      ): string {
        return t("models.resources.modelProvenance.jobRun", {}, _key);
      },
      notebookSession:
        function models_resources_modelProvenance_notebookSession(
          _key?: boolean
        ): string {
          return t(
            "models.resources.modelProvenance.notebookSession",
            {},
            _key
          );
        },
      dataScienceNotebookSession:
        function models_resources_modelProvenance_dataScienceNotebookSession(
          _key?: boolean
        ): string {
          return t(
            "models.resources.modelProvenance.dataScienceNotebookSession",
            {},
            _key
          );
        },
      dataScienceJobRun:
        function models_resources_modelProvenance_dataScienceJobRun(
          _key?: boolean
        ): string {
          return t(
            "models.resources.modelProvenance.dataScienceJobRun",
            {},
            _key
          );
        },
      columns: {
        resourceName:
          function models_resources_modelProvenance_columns_resourceName(
            _key?: boolean
          ): string {
            return t(
              "models.resources.modelProvenance.columns.resourceName",
              {},
              _key
            );
          },
        resourceType:
          function models_resources_modelProvenance_columns_resourceType(
            _key?: boolean
          ): string {
            return t(
              "models.resources.modelProvenance.columns.resourceType",
              {},
              _key
            );
          },
        compartmentName:
          function models_resources_modelProvenance_columns_compartmentName(
            _key?: boolean
          ): string {
            return t(
              "models.resources.modelProvenance.columns.compartmentName",
              {},
              _key
            );
          },
        status: function models_resources_modelProvenance_columns_status(
          _key?: boolean
        ): string {
          return t("models.resources.modelProvenance.columns.status", {}, _key);
        },
        createdBy: function models_resources_modelProvenance_columns_createdBy(
          _key?: boolean
        ): string {
          return t(
            "models.resources.modelProvenance.columns.createdBy",
            {},
            _key
          );
        },
        createdOn: function models_resources_modelProvenance_columns_createdOn(
          _key?: boolean
        ): string {
          return t(
            "models.resources.modelProvenance.columns.createdOn",
            {},
            _key
          );
        },
      },
    },
  },
  selectPanes: {
    modelVersionSet: {
      configureTitle:
        function models_selectPanes_modelVersionSet_configureTitle(
          _key?: boolean
        ): string {
          return t(
            "models.selectPanes.modelVersionSet.configureTitle",
            {},
            _key
          );
        },
      selectedInputLabel:
        function models_selectPanes_modelVersionSet_selectedInputLabel(
          versionSetName: string,
          versionLabel: string,
          _key?: boolean
        ): string {
          return t(
            "models.selectPanes.modelVersionSet.selectedInputLabel",
            { versionSetName, versionLabel },
            _key
          );
        },
      description: function models_selectPanes_modelVersionSet_description(
        _key?: boolean
      ): string {
        return t("models.selectPanes.modelVersionSet.description", {}, _key);
      },
      table: {
        name: function models_selectPanes_modelVersionSet_table_name(
          _key?: boolean
        ): string {
          return t("models.selectPanes.modelVersionSet.table.name", {}, _key);
        },
      },
      labels: {
        modelVersionSetConfigurationOptions:
          function models_selectPanes_modelVersionSet_labels_modelVersionSetConfigurationOptions(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelVersionSet.labels.modelVersionSetConfigurationOptions",
              {},
              _key
            );
          },
        description:
          function models_selectPanes_modelVersionSet_labels_description(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelVersionSet.labels.description",
              {},
              _key
            );
          },
        compartment:
          function models_selectPanes_modelVersionSet_labels_compartment(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelVersionSet.labels.compartment",
              {},
              _key
            );
          },
        projectId: function models_selectPanes_modelVersionSet_labels_projectId(
          _key?: boolean
        ): string {
          return t(
            "models.selectPanes.modelVersionSet.labels.projectId",
            {},
            _key
          );
        },
        name: function models_selectPanes_modelVersionSet_labels_name(
          _key?: boolean
        ): string {
          return t("models.selectPanes.modelVersionSet.labels.name", {}, _key);
        },
        versions: function models_selectPanes_modelVersionSet_labels_versions(
          _key?: boolean
        ): string {
          return t(
            "models.selectPanes.modelVersionSet.labels.versions",
            {},
            _key
          );
        },
        selectFromExistingGroups:
          function models_selectPanes_modelVersionSet_labels_selectFromExistingGroups(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelVersionSet.labels.selectFromExistingGroups",
              {},
              _key
            );
          },
        createNewModelVersionSet:
          function models_selectPanes_modelVersionSet_labels_createNewModelVersionSet(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelVersionSet.labels.createNewModelVersionSet",
              {},
              _key
            );
          },
        versionLabel:
          function models_selectPanes_modelVersionSet_labels_versionLabel(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelVersionSet.labels.versionLabel",
              {},
              _key
            );
          },
        fieldSetVersionLabel:
          function models_selectPanes_modelVersionSet_labels_fieldSetVersionLabel(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelVersionSet.labels.fieldSetVersionLabel",
              {},
              _key
            );
          },
        addModelsToModelVersionTabs:
          function models_selectPanes_modelVersionSet_labels_addModelsToModelVersionTabs(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelVersionSet.labels.addModelsToModelVersionTabs",
              {},
              _key
            );
          },
        tags: function models_selectPanes_modelVersionSet_labels_tags(
          _key?: boolean
        ): string {
          return t("models.selectPanes.modelVersionSet.labels.tags", {}, _key);
        },
      },
      modelVersionSetTable: {
        description:
          function models_selectPanes_modelVersionSet_modelVersionSetTable_description(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelVersionSet.modelVersionSetTable.description",
              {},
              _key
            );
          },
      },
      tooltip: {
        versionLabel:
          function models_selectPanes_modelVersionSet_tooltip_versionLabel(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelVersionSet.tooltip.versionLabel",
              {},
              _key
            );
          },
      },
      hints: {
        name: function models_selectPanes_modelVersionSet_hints_name(
          _key?: boolean
        ): string {
          return t("models.selectPanes.modelVersionSet.hints.name", {}, _key);
        },
      },
      toastNotification:
        function models_selectPanes_modelVersionSet_toastNotification(
          _key?: boolean
        ): string {
          return t(
            "models.selectPanes.modelVersionSet.toastNotification",
            {},
            _key
          );
        },
    },
    modelProvenanceSelect: {
      title: function models_selectPanes_modelProvenanceSelect_title(
        _key?: boolean
      ): string {
        return t("models.selectPanes.modelProvenanceSelect.title", {}, _key);
      },
      label: function models_selectPanes_modelProvenanceSelect_label(
        _key?: boolean
      ): string {
        return t("models.selectPanes.modelProvenanceSelect.label", {}, _key);
      },
      description:
        function models_selectPanes_modelProvenanceSelect_description(
          _key?: boolean
        ): string {
          return t(
            "models.selectPanes.modelProvenanceSelect.description",
            {},
            _key
          );
        },
      toastNotification:
        function models_selectPanes_modelProvenanceSelect_toastNotification(
          name: string,
          _key?: boolean
        ): string {
          return t(
            "models.selectPanes.modelProvenanceSelect.toastNotification",
            { name },
            _key
          );
        },
      tooltip: {
        gitRepoURL:
          function models_selectPanes_modelProvenanceSelect_tooltip_gitRepoURL(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelProvenanceSelect.tooltip.gitRepoURL",
              {},
              _key
            );
          },
        gitCommit:
          function models_selectPanes_modelProvenanceSelect_tooltip_gitCommit(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelProvenanceSelect.tooltip.gitCommit",
              {},
              _key
            );
          },
        gitBranch:
          function models_selectPanes_modelProvenanceSelect_tooltip_gitBranch(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelProvenanceSelect.tooltip.gitBranch",
              {},
              _key
            );
          },
        localModelDirectory:
          function models_selectPanes_modelProvenanceSelect_tooltip_localModelDirectory(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelProvenanceSelect.tooltip.localModelDirectory",
              {},
              _key
            );
          },
        modelTrainingScript:
          function models_selectPanes_modelProvenanceSelect_tooltip_modelTrainingScript(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelProvenanceSelect.tooltip.modelTrainingScript",
              {},
              _key
            );
          },
      },
      actions: {
        search:
          function models_selectPanes_modelProvenanceSelect_actions_search(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelProvenanceSelect.actions.search",
              {},
              _key
            );
          },
      },
      errorMessages: {
        notValidOCID:
          function models_selectPanes_modelProvenanceSelect_errorMessages_notValidOCID(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelProvenanceSelect.errorMessages.notValidOCID",
              {},
              _key
            );
          },
        notFound:
          function models_selectPanes_modelProvenanceSelect_errorMessages_notFound(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelProvenanceSelect.errorMessages.notFound",
              {},
              _key
            );
          },
      },
      labels: {
        notebookSessionResource:
          function models_selectPanes_modelProvenanceSelect_labels_notebookSessionResource(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelProvenanceSelect.labels.notebookSessionResource",
              {},
              _key
            );
          },
        jobRunResource:
          function models_selectPanes_modelProvenanceSelect_labels_jobRunResource(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelProvenanceSelect.labels.jobRunResource",
              {},
              _key
            );
          },
        selectByCompartmentAndProject:
          function models_selectPanes_modelProvenanceSelect_labels_selectByCompartmentAndProject(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelProvenanceSelect.labels.selectByCompartmentAndProject",
              {},
              _key
            );
          },
        selectByProjectLabel:
          function models_selectPanes_modelProvenanceSelect_labels_selectByProjectLabel(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelProvenanceSelect.labels.selectByProjectLabel",
              {},
              _key
            );
          },
        searchByOCIDLabel:
          function models_selectPanes_modelProvenanceSelect_labels_searchByOCIDLabel(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelProvenanceSelect.labels.searchByOCIDLabel",
              {},
              _key
            );
          },
        searchByJobRunOCIDLabel:
          function models_selectPanes_modelProvenanceSelect_labels_searchByJobRunOCIDLabel(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelProvenanceSelect.labels.searchByJobRunOCIDLabel",
              {},
              _key
            );
          },
        searchOCID:
          function models_selectPanes_modelProvenanceSelect_labels_searchOCID(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelProvenanceSelect.labels.searchOCID",
              {},
              _key
            );
          },
        selectedInputLabel:
          function models_selectPanes_modelProvenanceSelect_labels_selectedInputLabel(
            resource: string,
            compartment: string,
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelProvenanceSelect.labels.selectedInputLabel",
              { resource, compartment },
              _key
            );
          },
        resource:
          function models_selectPanes_modelProvenanceSelect_labels_resource(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelProvenanceSelect.labels.resource",
              {},
              _key
            );
          },
        compartment:
          function models_selectPanes_modelProvenanceSelect_labels_compartment(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelProvenanceSelect.labels.compartment",
              {},
              _key
            );
          },
        OcidtableLabel:
          function models_selectPanes_modelProvenanceSelect_labels_OcidtableLabel(
            resource: string,
            projectName: string,
            compartmentName: string,
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelProvenanceSelect.labels.OcidtableLabel",
              { resource, projectName, compartmentName },
              _key
            );
          },
      },
      trainingCode: {
        optionText:
          function models_selectPanes_modelProvenanceSelect_trainingCode_optionText(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelProvenanceSelect.trainingCode.optionText",
              {},
              _key
            );
          },
        description:
          function models_selectPanes_modelProvenanceSelect_trainingCode_description(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelProvenanceSelect.trainingCode.description",
              {},
              _key
            );
          },
        label: {
          gitBranch:
            function models_selectPanes_modelProvenanceSelect_trainingCode_label_gitBranch(
              _key?: boolean
            ): string {
              return t(
                "models.selectPanes.modelProvenanceSelect.trainingCode.label.gitBranch",
                {},
                _key
              );
            },
          gitCommit:
            function models_selectPanes_modelProvenanceSelect_trainingCode_label_gitCommit(
              _key?: boolean
            ): string {
              return t(
                "models.selectPanes.modelProvenanceSelect.trainingCode.label.gitCommit",
                {},
                _key
              );
            },
          scriptDir:
            function models_selectPanes_modelProvenanceSelect_trainingCode_label_scriptDir(
              _key?: boolean
            ): string {
              return t(
                "models.selectPanes.modelProvenanceSelect.trainingCode.label.scriptDir",
                {},
                _key
              );
            },
          trainingScript:
            function models_selectPanes_modelProvenanceSelect_trainingCode_label_trainingScript(
              _key?: boolean
            ): string {
              return t(
                "models.selectPanes.modelProvenanceSelect.trainingCode.label.trainingScript",
                {},
                _key
              );
            },
          repositoryUrl:
            function models_selectPanes_modelProvenanceSelect_trainingCode_label_repositoryUrl(
              _key?: boolean
            ): string {
              return t(
                "models.selectPanes.modelProvenanceSelect.trainingCode.label.repositoryUrl",
                {},
                _key
              );
            },
        },
      },
      jobsRun: {
        label: function models_selectPanes_modelProvenanceSelect_jobsRun_label(
          _key?: boolean
        ): string {
          return t(
            "models.selectPanes.modelProvenanceSelect.jobsRun.label",
            {},
            _key
          );
        },
        optionText:
          function models_selectPanes_modelProvenanceSelect_jobsRun_optionText(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelProvenanceSelect.jobsRun.optionText",
              {},
              _key
            );
          },
        tooltip:
          function models_selectPanes_modelProvenanceSelect_jobsRun_tooltip(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelProvenanceSelect.jobsRun.tooltip",
              {},
              _key
            );
          },
        cardDesc:
          function models_selectPanes_modelProvenanceSelect_jobsRun_cardDesc(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelProvenanceSelect.jobsRun.cardDesc",
              {},
              _key
            );
          },
        description:
          function models_selectPanes_modelProvenanceSelect_jobsRun_description(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelProvenanceSelect.jobsRun.description",
              {},
              _key
            );
          },
      },
      notebookSession: {
        label:
          function models_selectPanes_modelProvenanceSelect_notebookSession_label(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelProvenanceSelect.notebookSession.label",
              {},
              _key
            );
          },
        tooltip:
          function models_selectPanes_modelProvenanceSelect_notebookSession_tooltip(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelProvenanceSelect.notebookSession.tooltip",
              {},
              _key
            );
          },
        compartmentTableLabel:
          function models_selectPanes_modelProvenanceSelect_notebookSession_compartmentTableLabel(
            trainingOcidType: string,
            projectName: string,
            compartmentName: string,
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelProvenanceSelect.notebookSession.compartmentTableLabel",
              { trainingOcidType, projectName, compartmentName },
              _key
            );
          },
        optionText:
          function models_selectPanes_modelProvenanceSelect_notebookSession_optionText(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelProvenanceSelect.notebookSession.optionText",
              {},
              _key
            );
          },
        cardDesc:
          function models_selectPanes_modelProvenanceSelect_notebookSession_cardDesc(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelProvenanceSelect.notebookSession.cardDesc",
              {},
              _key
            );
          },
        description:
          function models_selectPanes_modelProvenanceSelect_notebookSession_description(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelProvenanceSelect.notebookSession.description",
              {},
              _key
            );
          },
      },
    },
    artifactSelect: {
      title: function models_selectPanes_artifactSelect_title(
        _key?: boolean
      ): string {
        return t("models.selectPanes.artifactSelect.title", {}, _key);
      },
      message: function models_selectPanes_artifactSelect_message(
        _key?: boolean
      ): string {
        return t("models.selectPanes.artifactSelect.message", {}, _key);
      },
      actions: {
        search: function models_selectPanes_artifactSelect_actions_search(
          _key?: boolean
        ): string {
          return t(
            "models.selectPanes.artifactSelect.actions.search",
            {},
            _key
          );
        },
      },
      labels: {
        selectedArtifact:
          function models_selectPanes_artifactSelect_labels_selectedArtifact(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.artifactSelect.labels.selectedArtifact",
              {},
              _key
            );
          },
      },
    },
    modelTaxonomySelect: {
      title: function models_selectPanes_modelTaxonomySelect_title(
        _key?: boolean
      ): string {
        return t("models.selectPanes.modelTaxonomySelect.title", {}, _key);
      },
      message: function models_selectPanes_modelTaxonomySelect_message(
        _key?: boolean
      ): string {
        return t("models.selectPanes.modelTaxonomySelect.message", {}, _key);
      },
      labels: {
        useCase: function models_selectPanes_modelTaxonomySelect_labels_useCase(
          _key?: boolean
        ): string {
          return t(
            "models.selectPanes.modelTaxonomySelect.labels.useCase",
            {},
            _key
          );
        },
        frameworkName:
          function models_selectPanes_modelTaxonomySelect_labels_frameworkName(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelTaxonomySelect.labels.frameworkName",
              {},
              _key
            );
          },
        frameworkVersion:
          function models_selectPanes_modelTaxonomySelect_labels_frameworkVersion(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelTaxonomySelect.labels.frameworkVersion",
              {},
              _key
            );
          },
        algorithm:
          function models_selectPanes_modelTaxonomySelect_labels_algorithm(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelTaxonomySelect.labels.algorithm",
              {},
              _key
            );
          },
        hyperParameters:
          function models_selectPanes_modelTaxonomySelect_labels_hyperParameters(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelTaxonomySelect.labels.hyperParameters",
              {},
              _key
            );
          },
        artifactTestResults:
          function models_selectPanes_modelTaxonomySelect_labels_artifactTestResults(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelTaxonomySelect.labels.artifactTestResults",
              {},
              _key
            );
          },
        label: function models_selectPanes_modelTaxonomySelect_labels_label(
          _key?: boolean
        ): string {
          return t(
            "models.selectPanes.modelTaxonomySelect.labels.label",
            {},
            _key
          );
        },
        value: function models_selectPanes_modelTaxonomySelect_labels_value(
          _key?: boolean
        ): string {
          return t(
            "models.selectPanes.modelTaxonomySelect.labels.value",
            {},
            _key
          );
        },
        category:
          function models_selectPanes_modelTaxonomySelect_labels_category(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelTaxonomySelect.labels.category",
              {},
              _key
            );
          },
        description:
          function models_selectPanes_modelTaxonomySelect_labels_description(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelTaxonomySelect.labels.description",
              {},
              _key
            );
          },
        customAttribute:
          function models_selectPanes_modelTaxonomySelect_labels_customAttribute(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelTaxonomySelect.labels.customAttribute",
              {},
              _key
            );
          },
        useCaseType:
          function models_selectPanes_modelTaxonomySelect_labels_useCaseType(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelTaxonomySelect.labels.useCaseType",
              {},
              _key
            );
          },
        framework:
          function models_selectPanes_modelTaxonomySelect_labels_framework(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelTaxonomySelect.labels.framework",
              {},
              _key
            );
          },
        estimatorObject:
          function models_selectPanes_modelTaxonomySelect_labels_estimatorObject(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelTaxonomySelect.labels.estimatorObject",
              {},
              _key
            );
          },
        taxonomyType:
          function models_selectPanes_modelTaxonomySelect_labels_taxonomyType(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelTaxonomySelect.labels.taxonomyType",
              {},
              _key
            );
          },
        taxonomyValue:
          function models_selectPanes_modelTaxonomySelect_labels_taxonomyValue(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelTaxonomySelect.labels.taxonomyValue",
              {},
              _key
            );
          },
      },
      tooltips: {
        useCaseType:
          function models_selectPanes_modelTaxonomySelect_tooltips_useCaseType(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelTaxonomySelect.tooltips.useCaseType",
              {},
              _key
            );
          },
        frameworkName:
          function models_selectPanes_modelTaxonomySelect_tooltips_frameworkName(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelTaxonomySelect.tooltips.frameworkName",
              {},
              _key
            );
          },
        frameworkVersion:
          function models_selectPanes_modelTaxonomySelect_tooltips_frameworkVersion(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelTaxonomySelect.tooltips.frameworkVersion",
              {},
              _key
            );
          },
        algorithm:
          function models_selectPanes_modelTaxonomySelect_tooltips_algorithm(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelTaxonomySelect.tooltips.algorithm",
              {},
              _key
            );
          },
        hyperParameters:
          function models_selectPanes_modelTaxonomySelect_tooltips_hyperParameters(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelTaxonomySelect.tooltips.hyperParameters",
              {},
              _key
            );
          },
        artifactTestResults:
          function models_selectPanes_modelTaxonomySelect_tooltips_artifactTestResults(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelTaxonomySelect.tooltips.artifactTestResults",
              {},
              _key
            );
          },
      },
      modelTaxonomy: {
        label:
          function models_selectPanes_modelTaxonomySelect_modelTaxonomy_label(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelTaxonomySelect.modelTaxonomy.label",
              {},
              _key
            );
          },
        description:
          function models_selectPanes_modelTaxonomySelect_modelTaxonomy_description(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelTaxonomySelect.modelTaxonomy.description",
              {},
              _key
            );
          },
      },
      customAttributes: {
        label:
          function models_selectPanes_modelTaxonomySelect_customAttributes_label(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelTaxonomySelect.customAttributes.label",
              {},
              _key
            );
          },
        numberShowingText:
          function models_selectPanes_modelTaxonomySelect_customAttributes_numberShowingText(
            numberShowing: number,
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelTaxonomySelect.customAttributes.numberShowingText",
              { numberShowing },
              _key
            );
          },
      },
    },
    modelSchemaSelect: {
      title: function models_selectPanes_modelSchemaSelect_title(
        _key?: boolean
      ): string {
        return t("models.selectPanes.modelSchemaSelect.title", {}, _key);
      },
      message: function models_selectPanes_modelSchemaSelect_message(
        href: string,
        _key?: boolean
      ): string {
        return t(
          "models.selectPanes.modelSchemaSelect.message",
          { href },
          _key
        );
      },
      labels: {
        uploadInputSchema:
          function models_selectPanes_modelSchemaSelect_labels_uploadInputSchema(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelSchemaSelect.labels.uploadInputSchema",
              {},
              _key
            );
          },
        uploadInputSchemaDescription:
          function models_selectPanes_modelSchemaSelect_labels_uploadInputSchemaDescription(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelSchemaSelect.labels.uploadInputSchemaDescription",
              {},
              _key
            );
          },
        uploadOutputSchema:
          function models_selectPanes_modelSchemaSelect_labels_uploadOutputSchema(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelSchemaSelect.labels.uploadOutputSchema",
              {},
              _key
            );
          },
        uploadOutputSchemaDescription:
          function models_selectPanes_modelSchemaSelect_labels_uploadOutputSchemaDescription(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelSchemaSelect.labels.uploadOutputSchemaDescription",
              {},
              _key
            );
          },
        inputSchemaUploadLabel:
          function models_selectPanes_modelSchemaSelect_labels_inputSchemaUploadLabel(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelSchemaSelect.labels.inputSchemaUploadLabel",
              {},
              _key
            );
          },
        outputSchemaUploadLabel:
          function models_selectPanes_modelSchemaSelect_labels_outputSchemaUploadLabel(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelSchemaSelect.labels.outputSchemaUploadLabel",
              {},
              _key
            );
          },
        inputResourceType:
          function models_selectPanes_modelSchemaSelect_labels_inputResourceType(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelSchemaSelect.labels.inputResourceType",
              {},
              _key
            );
          },
        outputResourceType:
          function models_selectPanes_modelSchemaSelect_labels_outputResourceType(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelSchemaSelect.labels.outputResourceType",
              {},
              _key
            );
          },
        uploadFileTypeRequirementText:
          function models_selectPanes_modelSchemaSelect_labels_uploadFileTypeRequirementText(
            fileType: string,
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelSchemaSelect.labels.uploadFileTypeRequirementText",
              { fileType },
              _key
            );
          },
        uploadFileTypeError:
          function models_selectPanes_modelSchemaSelect_labels_uploadFileTypeError(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelSchemaSelect.labels.uploadFileTypeError",
              {},
              _key
            );
          },
        inputSchema:
          function models_selectPanes_modelSchemaSelect_labels_inputSchema(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelSchemaSelect.labels.inputSchema",
              {},
              _key
            );
          },
        outputSchema:
          function models_selectPanes_modelSchemaSelect_labels_outputSchema(
            _key?: boolean
          ): string {
            return t(
              "models.selectPanes.modelSchemaSelect.labels.outputSchema",
              {},
              _key
            );
          },
      },
    },
  },
  errorMessages: {
    customAttributesLimit: function models_errorMessages_customAttributesLimit(
      _key?: boolean
    ): string {
      return t("models.errorMessages.customAttributesLimit", {}, _key);
    },
    addModelToMVSDetailsDialog: {
      noModelSelected:
        function models_errorMessages_addModelToMVSDetailsDialog_noModelSelected(
          _key?: boolean
        ): string {
          return t(
            "models.errorMessages.addModelToMVSDetailsDialog.noModelSelected",
            {},
            _key
          );
        },
    },
    modelMoveToVersionSetDialog: {
      noModelVersionSelected:
        function models_errorMessages_modelMoveToVersionSetDialog_noModelVersionSelected(
          _key?: boolean
        ): string {
          return t(
            "models.errorMessages.modelMoveToVersionSetDialog.noModelVersionSelected",
            {},
            _key
          );
        },
    },
  },
  modelIntrospection: {
    title: function models_modelIntrospection_title(_key?: boolean): string {
      return t("models.modelIntrospection.title", {}, _key);
    },
    description: function models_modelIntrospection_description(
      _key?: boolean
    ): string {
      return t("models.modelIntrospection.description", {}, _key);
    },
    error: function models_modelIntrospection_error(_key?: boolean): string {
      return t("models.modelIntrospection.error", {}, _key);
    },
    status: {
      notTested: function models_modelIntrospection_status_notTested(
        _key?: boolean
      ): string {
        return t("models.modelIntrospection.status.notTested", {}, _key);
      },
      success: function models_modelIntrospection_status_success(
        _key?: boolean
      ): string {
        return t("models.modelIntrospection.status.success", {}, _key);
      },
      failed: function models_modelIntrospection_status_failed(
        _key?: boolean
      ): string {
        return t("models.modelIntrospection.status.failed", {}, _key);
      },
      warning: function models_modelIntrospection_status_warning(
        _key?: boolean
      ): string {
        return t("models.modelIntrospection.status.warning", {}, _key);
      },
    },
  },
  hints: {
    modelArtifact: function models_hints_modelArtifact(
      maxSize: number,
      _key?: boolean
    ): string {
      return t("models.hints.modelArtifact", { maxSize }, _key);
    },
    example: function models_hints_example(
      exampleString: string,
      _key?: boolean
    ): string {
      return t("models.hints.example", { exampleString }, _key);
    },
  },
};
export const modelSchema = {
  title: function modelSchema_title(_key?: boolean): string {
    return t("modelSchema.title", {}, _key);
  },
  description: function modelSchema_description(_key?: boolean): string {
    return t("modelSchema.description", {}, _key);
  },
  inputSchema: function modelSchema_inputSchema(_key?: boolean): string {
    return t("modelSchema.inputSchema", {}, _key);
  },
  outputSchema: function modelSchema_outputSchema(_key?: boolean): string {
    return t("modelSchema.outputSchema", {}, _key);
  },
  NoDataFound: function modelSchema_NoDataFound(_key?: boolean): string {
    return t("modelSchema.NoDataFound", {}, _key);
  },
  copy: function modelSchema_copy(_key?: boolean): string {
    return t("modelSchema.copy", {}, _key);
  },
};
export const modelVersionSets = {
  resources: {
    modelMemberships: function modelVersionSets_resources_modelMemberships(
      _key?: boolean
    ): string {
      return t("modelVersionSets.resources.modelMemberships", {}, _key);
    },
    workRequests: {
      linkText: function modelVersionSets_resources_workRequests_linkText(
        _key?: boolean
      ): string {
        return t("modelVersionSets.resources.workRequests.linkText", {}, _key);
      },
    },
    models: function modelVersionSets_resources_models(_key?: boolean): string {
      return t("modelVersionSets.resources.models", {}, _key);
    },
  },
  actions: {
    loading: function modelVersionSets_actions_loading(_key?: boolean): string {
      return t("modelVersionSets.actions.loading", {}, _key);
    },
    modelMemberships: {
      compareVersion:
        function modelVersionSets_actions_modelMemberships_compareVersion(
          _key?: boolean
        ): string {
          return t(
            "modelVersionSets.actions.modelMemberships.compareVersion",
            {},
            _key
          );
        },
    },
  },
  compareVersions: {
    category: function modelVersionSets_compareVersions_category(
      _key?: boolean
    ): string {
      return t("modelVersionSets.compareVersions.category", {}, _key);
    },
    dropDownVersion: function modelVersionSets_compareVersions_dropDownVersion(
      displayName: string,
      v: string,
      _key?: boolean
    ): string {
      return t(
        "modelVersionSets.compareVersions.dropDownVersion",
        { displayName, v },
        _key
      );
    },
    compareTo: function modelVersionSets_compareVersions_compareTo(
      _key?: boolean
    ): string {
      return t("modelVersionSets.compareVersions.compareTo", {}, _key);
    },
    general: function modelVersionSets_compareVersions_general(
      _key?: boolean
    ): string {
      return t("modelVersionSets.compareVersions.general", {}, _key);
    },
    provenance: function modelVersionSets_compareVersions_provenance(
      _key?: boolean
    ): string {
      return t("modelVersionSets.compareVersions.provenance", {}, _key);
    },
    taxonomy: function modelVersionSets_compareVersions_taxonomy(
      _key?: boolean
    ): string {
      return t("modelVersionSets.compareVersions.taxonomy", {}, _key);
    },
    compareCategories:
      function modelVersionSets_compareVersions_compareCategories(
        _key?: boolean
      ): string {
        return t(
          "modelVersionSets.compareVersions.compareCategories",
          {},
          _key
        );
      },
    highlightDifferences:
      function modelVersionSets_compareVersions_highlightDifferences(
        _key?: boolean
      ): string {
        return t(
          "modelVersionSets.compareVersions.highlightDifferences",
          {},
          _key
        );
      },
    version: function modelVersionSets_compareVersions_version(
      _key?: boolean
    ): string {
      return t("modelVersionSets.compareVersions.version", {}, _key);
    },
    versionLabel: function modelVersionSets_compareVersions_versionLabel(
      _key?: boolean
    ): string {
      return t("modelVersionSets.compareVersions.versionLabel", {}, _key);
    },
    artifactSize: function modelVersionSets_compareVersions_artifactSize(
      _key?: boolean
    ): string {
      return t("modelVersionSets.compareVersions.artifactSize", {}, _key);
    },
    tags: function modelVersionSets_compareVersions_tags(
      _key?: boolean
    ): string {
      return t("modelVersionSets.compareVersions.tags", {}, _key);
    },
    createdBy: function modelVersionSets_compareVersions_createdBy(
      _key?: boolean
    ): string {
      return t("modelVersionSets.compareVersions.createdBy", {}, _key);
    },
    created: function modelVersionSets_compareVersions_created(
      _key?: boolean
    ): string {
      return t("modelVersionSets.compareVersions.created", {}, _key);
    },
    framework: function modelVersionSets_compareVersions_framework(
      _key?: boolean
    ): string {
      return t("modelVersionSets.compareVersions.framework", {}, _key);
    },
    frameworkVersion:
      function modelVersionSets_compareVersions_frameworkVersion(
        _key?: boolean
      ): string {
        return t("modelVersionSets.compareVersions.frameworkVersion", {}, _key);
      },
    useCase: function modelVersionSets_compareVersions_useCase(
      _key?: boolean
    ): string {
      return t("modelVersionSets.compareVersions.useCase", {}, _key);
    },
    modelAlgorithm: function modelVersionSets_compareVersions_modelAlgorithm(
      _key?: boolean
    ): string {
      return t("modelVersionSets.compareVersions.modelAlgorithm", {}, _key);
    },
    hyperparameters: function modelVersionSets_compareVersions_hyperparameters(
      _key?: boolean
    ): string {
      return t("modelVersionSets.compareVersions.hyperparameters", {}, _key);
    },
    tabs: {
      associateMDTab: {
        associateMDTab:
          function modelVersionSets_compareVersions_tabs_associateMDTab_associateMDTab(
            _key?: boolean
          ): string {
            return t(
              "modelVersionSets.compareVersions.tabs.associateMDTab.associateMDTab",
              {},
              _key
            );
          },
        latestMDCreated:
          function modelVersionSets_compareVersions_tabs_associateMDTab_latestMDCreated(
            _key?: boolean
          ): string {
            return t(
              "modelVersionSets.compareVersions.tabs.associateMDTab.latestMDCreated",
              {},
              _key
            );
          },
        totalNumberOfMD:
          function modelVersionSets_compareVersions_tabs_associateMDTab_totalNumberOfMD(
            _key?: boolean
          ): string {
            return t(
              "modelVersionSets.compareVersions.tabs.associateMDTab.totalNumberOfMD",
              {},
              _key
            );
          },
        totalActiveMD:
          function modelVersionSets_compareVersions_tabs_associateMDTab_totalActiveMD(
            _key?: boolean
          ): string {
            return t(
              "modelVersionSets.compareVersions.tabs.associateMDTab.totalActiveMD",
              {},
              _key
            );
          },
      },
      customAttributesTab: {
        customAttributesTabLabel:
          function modelVersionSets_compareVersions_tabs_customAttributesTab_customAttributesTabLabel(
            _key?: boolean
          ): string {
            return t(
              "modelVersionSets.compareVersions.tabs.customAttributesTab.customAttributesTabLabel",
              {},
              _key
            );
          },
      },
      inputAndOutputSchemaTab: {
        inputAndOutputSchemaTabLabel:
          function modelVersionSets_compareVersions_tabs_inputAndOutputSchemaTab_inputAndOutputSchemaTabLabel(
            _key?: boolean
          ): string {
            return t(
              "modelVersionSets.compareVersions.tabs.inputAndOutputSchemaTab.inputAndOutputSchemaTabLabel",
              {},
              _key
            );
          },
      },
    },
  },
  deleteTitle: function modelVersionSets_deleteTitle(_key?: boolean): string {
    return t("modelVersionSets.deleteTitle", {}, _key);
  },
  createTitle: function modelVersionSets_createTitle(_key?: boolean): string {
    return t("modelVersionSets.createTitle", {}, _key);
  },
  editTitle: function modelVersionSets_editTitle(_key?: boolean): string {
    return t("modelVersionSets.editTitle", {}, _key);
  },
  error: {
    mvsModelAssociationError:
      function modelVersionSets_error_mvsModelAssociationError(
        modelName: string,
        _key?: boolean
      ): string {
        return t(
          "modelVersionSets.error.mvsModelAssociationError",
          { modelName },
          _key
        );
      },
    mvsModelsAssociationError:
      function modelVersionSets_error_mvsModelsAssociationError(
        modelName: string,
        startingModelName: string,
        lastModelName: string,
        _key?: boolean
      ): string {
        return t(
          "modelVersionSets.error.mvsModelsAssociationError",
          { modelName, startingModelName, lastModelName },
          _key
        );
      },
  },
  createModelVersionSetSuccessMessage:
    function modelVersionSets_createModelVersionSetSuccessMessage(
      _key?: boolean
    ): string {
      return t(
        "modelVersionSets.createModelVersionSetSuccessMessage",
        {},
        _key
      );
    },
  deleteConfirmation: function modelVersionSets_deleteConfirmation(
    _key?: boolean
  ): string {
    return t("modelVersionSets.deleteConfirmation", {}, _key);
  },
  deleteAgreement: function modelVersionSets_deleteAgreement(
    confirmationText: string,
    _key?: boolean
  ): string {
    return t("modelVersionSets.deleteAgreement", { confirmationText }, _key);
  },
  moveResourceType: function modelVersionSets_moveResourceType(
    _key?: boolean
  ): string {
    return t("modelVersionSets.moveResourceType", {}, _key);
  },
  labels: {
    description: function modelVersionSets_labels_description(
      _key?: boolean
    ): string {
      return t("modelVersionSets.labels.description", {}, _key);
    },
    compartment: function modelVersionSets_labels_compartment(
      _key?: boolean
    ): string {
      return t("modelVersionSets.labels.compartment", {}, _key);
    },
    name: function modelVersionSets_labels_name(_key?: boolean): string {
      return t("modelVersionSets.labels.name", {}, _key);
    },
    status: function modelVersionSets_labels_status(_key?: boolean): string {
      return t("modelVersionSets.labels.status", {}, _key);
    },
    timeCreated: function modelVersionSets_labels_timeCreated(
      _key?: boolean
    ): string {
      return t("modelVersionSets.labels.timeCreated", {}, _key);
    },
    selectModels: function modelVersionSets_labels_selectModels(
      _key?: boolean
    ): string {
      return t("modelVersionSets.labels.selectModels", {}, _key);
    },
    selectModelsDescription:
      function modelVersionSets_labels_selectModelsDescription(
        _key?: boolean
      ): string {
        return t("modelVersionSets.labels.selectModelsDescription", {}, _key);
      },
    versionSetDetails: function modelVersionSets_labels_versionSetDetails(
      _key?: boolean
    ): string {
      return t("modelVersionSets.labels.versionSetDetails", {}, _key);
    },
    OCID: function modelVersionSets_labels_OCID(_key?: boolean): string {
      return t("modelVersionSets.labels.OCID", {}, _key);
    },
    createdBy: function modelVersionSets_labels_createdBy(
      _key?: boolean
    ): string {
      return t("modelVersionSets.labels.createdBy", {}, _key);
    },
    numberOfVersions: function modelVersionSets_labels_numberOfVersions(
      _key?: boolean
    ): string {
      return t("modelVersionSets.labels.numberOfVersions", {}, _key);
    },
    isDeleteRelatedModels:
      function modelVersionSets_labels_isDeleteRelatedModels(
        _key?: boolean
      ): string {
        return t("modelVersionSets.labels.isDeleteRelatedModels", {}, _key);
      },
  },
};
export const modelDeployments = {
  linkText: function modelDeployments_linkText(_key?: boolean): string {
    return t("modelDeployments.linkText", {}, _key);
  },
  detailText: function modelDeployments_detailText(_key?: boolean): string {
    return t("modelDeployments.detailText", {}, _key);
  },
  deactivateTitle: function modelDeployments_deactivateTitle(
    _key?: boolean
  ): string {
    return t("modelDeployments.deactivateTitle", {}, _key);
  },
  deactivateConfirmation: function modelDeployments_deactivateConfirmation(
    displayName: string,
    _key?: boolean
  ): string {
    return t("modelDeployments.deactivateConfirmation", { displayName }, _key);
  },
  deactivateDisclaimer: function modelDeployments_deactivateDisclaimer(
    _key?: boolean
  ): string {
    return t("modelDeployments.deactivateDisclaimer", {}, _key);
  },
  activateTitle: function modelDeployments_activateTitle(
    _key?: boolean
  ): string {
    return t("modelDeployments.activateTitle", {}, _key);
  },
  activateConfirmation: function modelDeployments_activateConfirmation(
    displayName: string,
    _key?: boolean
  ): string {
    return t("modelDeployments.activateConfirmation", { displayName }, _key);
  },
  createTitle: function modelDeployments_createTitle(_key?: boolean): string {
    return t("modelDeployments.createTitle", {}, _key);
  },
  editTitle: function modelDeployments_editTitle(_key?: boolean): string {
    return t("modelDeployments.editTitle", {}, _key);
  },
  deleteTitle: function modelDeployments_deleteTitle(_key?: boolean): string {
    return t("modelDeployments.deleteTitle", {}, _key);
  },
  deleteConfirmation: function modelDeployments_deleteConfirmation(
    modelDeploymentName: string,
    _key?: boolean
  ): string {
    return t(
      "modelDeployments.deleteConfirmation",
      { modelDeploymentName },
      _key
    );
  },
  deleteAgreement: function modelDeployments_deleteAgreement(
    confirmationText: string,
    _key?: boolean
  ): string {
    return t("modelDeployments.deleteAgreement", { confirmationText }, _key);
  },
  deleteWarningTitle: function modelDeployments_deleteWarningTitle(
    _key?: boolean
  ): string {
    return t("modelDeployments.deleteWarningTitle", {}, _key);
  },
  modelSelectTitle: function modelDeployments_modelSelectTitle(
    _key?: boolean
  ): string {
    return t("modelDeployments.modelSelectTitle", {}, _key);
  },
  computeTitle: function modelDeployments_computeTitle(_key?: boolean): string {
    return t("modelDeployments.computeTitle", {}, _key);
  },
  loggingTitle: function modelDeployments_loggingTitle(_key?: boolean): string {
    return t("modelDeployments.loggingTitle", {}, _key);
  },
  shapeText: function modelDeployments_shapeText(_key?: boolean): string {
    return t("modelDeployments.shapeText", {}, _key);
  },
  noImagesFound: function modelDeployments_noImagesFound(
    _key?: boolean
  ): string {
    return t("modelDeployments.noImagesFound", {}, _key);
  },
  noRepositoryFound: function modelDeployments_noRepositoryFound(
    _key?: boolean
  ): string {
    return t("modelDeployments.noRepositoryFound", {}, _key);
  },
  labels: {
    name: function modelDeployments_labels_name(_key?: boolean): string {
      return t("modelDeployments.labels.name", {}, _key);
    },
    modelDeploymentName: function modelDeployments_labels_modelDeploymentName(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.modelDeploymentName", {}, _key);
    },
    description: function modelDeployments_labels_description(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.description", {}, _key);
    },
    state: function modelDeployments_labels_state(_key?: boolean): string {
      return t("modelDeployments.labels.state", {}, _key);
    },
    computeInstanceShape: function modelDeployments_labels_computeInstanceShape(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.computeInstanceShape", {}, _key);
    },
    numberOfInstances: function modelDeployments_labels_numberOfInstances(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.numberOfInstances", {}, _key);
    },
    ocpuCount: function modelDeployments_labels_ocpuCount(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.ocpuCount", {}, _key);
    },
    vmShape: function modelDeployments_labels_vmShape(_key?: boolean): string {
      return t("modelDeployments.labels.vmShape", {}, _key);
    },
    createdBy: function modelDeployments_labels_createdBy(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.createdBy", {}, _key);
    },
    createdOn: function modelDeployments_labels_createdOn(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.createdOn", {}, _key);
    },
    compartment: function modelDeployments_labels_compartment(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.compartment", {}, _key);
    },
    compartmentOcid: function modelDeployments_labels_compartmentOcid(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.compartmentOcid", {}, _key);
    },
    modelOcid: function modelDeployments_labels_modelOcid(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.modelOcid", {}, _key);
    },
    compute: function modelDeployments_labels_compute(_key?: boolean): string {
      return t("modelDeployments.labels.compute", {}, _key);
    },
    modelSelect: function modelDeployments_labels_modelSelect(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.modelSelect", {}, _key);
    },
    computeSelect: function modelDeployments_labels_computeSelect(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.computeSelect", {}, _key);
    },
    loggingSelect: function modelDeployments_labels_loggingSelect(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.loggingSelect", {}, _key);
    },
    accessLogsConfigured: function modelDeployments_labels_accessLogsConfigured(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.accessLogsConfigured", {}, _key);
    },
    predictLogsConfigured:
      function modelDeployments_labels_predictLogsConfigured(
        _key?: boolean
      ): string {
        return t("modelDeployments.labels.predictLogsConfigured", {}, _key);
      },
    bothLogsConfigured: function modelDeployments_labels_bothLogsConfigured(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.bothLogsConfigured", {}, _key);
    },
    generalInformation: function modelDeployments_labels_generalInformation(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.generalInformation", {}, _key);
    },
    deploymentModeMode: function modelDeployments_labels_deploymentModeMode(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.deploymentModeMode", {}, _key);
    },
    deploymentModeHTTPS: function modelDeployments_labels_deploymentModeHTTPS(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.deploymentModeHTTPS", {}, _key);
    },
    deploymentModeStreaming:
      function modelDeployments_labels_deploymentModeStreaming(
        _key?: boolean
      ): string {
        return t("modelDeployments.labels.deploymentModeStreaming", {}, _key);
      },
    inputStream: function modelDeployments_labels_inputStream(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.inputStream", {}, _key);
    },
    outputStream: function modelDeployments_labels_outputStream(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.outputStream", {}, _key);
    },
    computeBandwidth: function modelDeployments_labels_computeBandwidth(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.computeBandwidth", {}, _key);
    },
    modelsInformation: function modelDeployments_labels_modelsInformation(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.modelsInformation", {}, _key);
    },
    modelName: function modelDeployments_labels_modelName(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.modelName", {}, _key);
    },
    deleteLogs: function modelDeployments_labels_deleteLogs(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.deleteLogs", {}, _key);
    },
    deleteLogsCheckbox: function modelDeployments_labels_deleteLogsCheckbox(
      displayName: string,
      _key?: boolean
    ): string {
      return t(
        "modelDeployments.labels.deleteLogsCheckbox",
        { displayName },
        _key
      );
    },
    deploymentMode: function modelDeployments_labels_deploymentMode(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.deploymentMode", {}, _key);
    },
    shapeName: function modelDeployments_labels_shapeName(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.shapeName", {}, _key);
    },
    numberOCPUs: function modelDeployments_labels_numberOCPUs(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.numberOCPUs", {}, _key);
    },
    memoryInGBs: function modelDeployments_labels_memoryInGBs(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.memoryInGBs", {}, _key);
    },
    bandwidthUnits: function modelDeployments_labels_bandwidthUnits(
      bandwidthMbps: string,
      _key?: boolean
    ): string {
      return t(
        "modelDeployments.labels.bandwidthUnits",
        { bandwidthMbps },
        _key
      );
    },
    numberShowingText: function modelDeployments_labels_numberShowingText(
      numberShowing: number,
      _key?: boolean
    ): string {
      return t(
        "modelDeployments.labels.numberShowingText",
        { numberShowing },
        _key
      );
    },
    defaultConfiguration: function modelDeployments_labels_defaultConfiguration(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.defaultConfiguration", {}, _key);
    },
    environmentVariableKey:
      function modelDeployments_labels_environmentVariableKey(
        _key?: boolean
      ): string {
        return t("modelDeployments.labels.environmentVariableKey", {}, _key);
      },
    environmentVariableValue:
      function modelDeployments_labels_environmentVariableValue(
        _key?: boolean
      ): string {
        return t("modelDeployments.labels.environmentVariableValue", {}, _key);
      },
    useCustomContainerImage:
      function modelDeployments_labels_useCustomContainerImage(
        _key?: boolean
      ): string {
        return t("modelDeployments.labels.useCustomContainerImage", {}, _key);
      },
    image: function modelDeployments_labels_image(_key?: boolean): string {
      return t("modelDeployments.labels.image", {}, _key);
    },
    repository: function modelDeployments_labels_repository(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.repository", {}, _key);
    },
    containerCommand: function modelDeployments_labels_containerCommand(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.containerCommand", {}, _key);
    },
    containerEntrypoint: function modelDeployments_labels_containerEntrypoint(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.containerEntrypoint", {}, _key);
    },
    serverPort: function modelDeployments_labels_serverPort(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.serverPort", {}, _key);
    },
    healthcheckPort: function modelDeployments_labels_healthcheckPort(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.healthcheckPort", {}, _key);
    },
    customEnvironmentVariables:
      function modelDeployments_labels_customEnvironmentVariables(
        _key?: boolean
      ): string {
        return t(
          "modelDeployments.labels.customEnvironmentVariables",
          {},
          _key
        );
      },
    configuration: function modelDeployments_labels_configuration(
      _key?: boolean
    ): string {
      return t("modelDeployments.labels.configuration", {}, _key);
    },
    digest: function modelDeployments_labels_digest(_key?: boolean): string {
      return t("modelDeployments.labels.digest", {}, _key);
    },
    digestMismatchWaning: function modelDeployments_labels_digestMismatchWaning(
      currentDigest: string,
      selectedDigest: string,
      _key?: boolean
    ): string {
      return t(
        "modelDeployments.labels.digestMismatchWaning",
        { currentDigest, selectedDigest },
        _key
      );
    },
  },
  actions: {
    create: function modelDeployments_actions_create(_key?: boolean): string {
      return t("modelDeployments.actions.create", {}, _key);
    },
    delete: function modelDeployments_actions_delete(_key?: boolean): string {
      return t("modelDeployments.actions.delete", {}, _key);
    },
    select: function modelDeployments_actions_select(_key?: boolean): string {
      return t("modelDeployments.actions.select", {}, _key);
    },
    edit: function modelDeployments_actions_edit(_key?: boolean): string {
      return t("modelDeployments.actions.edit", {}, _key);
    },
    moveResource: function modelDeployments_actions_moveResource(
      _key?: boolean
    ): string {
      return t("modelDeployments.actions.moveResource", {}, _key);
    },
    addEnvironmentVariable:
      function modelDeployments_actions_addEnvironmentVariable(
        _key?: boolean
      ): string {
        return t("modelDeployments.actions.addEnvironmentVariable", {}, _key);
      },
  },
  errorMessages: {
    notAModel: function modelDeployments_errorMessages_notAModel(
      _key?: boolean
    ): string {
      return t("modelDeployments.errorMessages.notAModel", {}, _key);
    },
    notFound: function modelDeployments_errorMessages_notFound(
      _key?: boolean
    ): string {
      return t("modelDeployments.errorMessages.notFound", {}, _key);
    },
    notValidNumberOfInstances:
      function modelDeployments_errorMessages_notValidNumberOfInstances(
        _key?: boolean
      ): string {
        return t(
          "modelDeployments.errorMessages.notValidNumberOfInstances",
          {},
          _key
        );
      },
    enterNumberBetweenMinAndMax:
      function modelDeployments_errorMessages_enterNumberBetweenMinAndMax(
        min: string,
        max: string,
        _key?: boolean
      ): string {
        return t(
          "modelDeployments.errorMessages.enterNumberBetweenMinAndMax",
          { min, max },
          _key
        );
      },
    selectShape: function modelDeployments_errorMessages_selectShape(
      _key?: boolean
    ): string {
      return t("modelDeployments.errorMessages.selectShape", {}, _key);
    },
    errorDeletingLog: function modelDeployments_errorMessages_errorDeletingLog(
      _key?: boolean
    ): string {
      return t("modelDeployments.errorMessages.errorDeletingLog", {}, _key);
    },
    envVarKeyLimits: function modelDeployments_errorMessages_envVarKeyLimits(
      _key?: boolean
    ): string {
      return t("modelDeployments.errorMessages.envVarKeyLimits", {}, _key);
    },
    envVarKeyLimitsEndingUnderscore:
      function modelDeployments_errorMessages_envVarKeyLimitsEndingUnderscore(
        _key?: boolean
      ): string {
        return t(
          "modelDeployments.errorMessages.envVarKeyLimitsEndingUnderscore",
          {},
          _key
        );
      },
    envVarValueLimitsMandatoryKey:
      function modelDeployments_errorMessages_envVarValueLimitsMandatoryKey(
        _key?: boolean
      ): string {
        return t(
          "modelDeployments.errorMessages.envVarValueLimitsMandatoryKey",
          {},
          _key
        );
      },
    envVarsMaxLength: function modelDeployments_errorMessages_envVarsMaxLength(
      _key?: boolean
    ): string {
      return t("modelDeployments.errorMessages.envVarsMaxLength", {}, _key);
    },
    cmdNEntryPointLimit:
      function modelDeployments_errorMessages_cmdNEntryPointLimit(
        _key?: boolean
      ): string {
        return t(
          "modelDeployments.errorMessages.cmdNEntryPointLimit",
          {},
          _key
        );
      },
    listImagesAPIFailed:
      function modelDeployments_errorMessages_listImagesAPIFailed(
        _key?: boolean
      ): string {
        return t(
          "modelDeployments.errorMessages.listImagesAPIFailed",
          {},
          _key
        );
      },
    getCompartmentFailed:
      function modelDeployments_errorMessages_getCompartmentFailed(
        _key?: boolean
      ): string {
        return t(
          "modelDeployments.errorMessages.getCompartmentFailed",
          {},
          _key
        );
      },
    listReposAPIFailed:
      function modelDeployments_errorMessages_listReposAPIFailed(
        _key?: boolean
      ): string {
        return t("modelDeployments.errorMessages.listReposAPIFailed", {}, _key);
      },
    listImagesApiInTenancyFailed:
      function modelDeployments_errorMessages_listImagesApiInTenancyFailed(
        _key?: boolean
      ): string {
        return t(
          "modelDeployments.errorMessages.listImagesApiInTenancyFailed",
          {},
          _key
        );
      },
  },
  resources: {
    monitoring: {
      linkText: function modelDeployments_resources_monitoring_linkText(
        _key?: boolean
      ): string {
        return t("modelDeployments.resources.monitoring.linkText", {}, _key);
      },
      friendlyNames: {
        predictRequestCount:
          function modelDeployments_resources_monitoring_friendlyNames_predictRequestCount(
            _key?: boolean
          ): string {
            return t(
              "modelDeployments.resources.monitoring.friendlyNames.predictRequestCount",
              {},
              _key
            );
          },
        predictResponseSuccessRate:
          function modelDeployments_resources_monitoring_friendlyNames_predictResponseSuccessRate(
            _key?: boolean
          ): string {
            return t(
              "modelDeployments.resources.monitoring.friendlyNames.predictResponseSuccessRate",
              {},
              _key
            );
          },
        predictResponseStatus:
          function modelDeployments_resources_monitoring_friendlyNames_predictResponseStatus(
            _key?: boolean
          ): string {
            return t(
              "modelDeployments.resources.monitoring.friendlyNames.predictResponseStatus",
              {},
              _key
            );
          },
        predictLatency:
          function modelDeployments_resources_monitoring_friendlyNames_predictLatency(
            _key?: boolean
          ): string {
            return t(
              "modelDeployments.resources.monitoring.friendlyNames.predictLatency",
              {},
              _key
            );
          },
        bandwidth:
          function modelDeployments_resources_monitoring_friendlyNames_bandwidth(
            _key?: boolean
          ): string {
            return t(
              "modelDeployments.resources.monitoring.friendlyNames.bandwidth",
              {},
              _key
            );
          },
        cpuUtilization:
          function modelDeployments_resources_monitoring_friendlyNames_cpuUtilization(
            _key?: boolean
          ): string {
            return t(
              "modelDeployments.resources.monitoring.friendlyNames.cpuUtilization",
              {},
              _key
            );
          },
        memoryUtilization:
          function modelDeployments_resources_monitoring_friendlyNames_memoryUtilization(
            _key?: boolean
          ): string {
            return t(
              "modelDeployments.resources.monitoring.friendlyNames.memoryUtilization",
              {},
              _key
            );
          },
        networkBytes:
          function modelDeployments_resources_monitoring_friendlyNames_networkBytes(
            _key?: boolean
          ): string {
            return t(
              "modelDeployments.resources.monitoring.friendlyNames.networkBytes",
              {},
              _key
            );
          },
      },
      metadata: {
        predictRequestCount:
          function modelDeployments_resources_monitoring_metadata_predictRequestCount(
            _key?: boolean
          ): string {
            return t(
              "modelDeployments.resources.monitoring.metadata.predictRequestCount",
              {},
              _key
            );
          },
        predictResponseSuccessRate:
          function modelDeployments_resources_monitoring_metadata_predictResponseSuccessRate(
            _key?: boolean
          ): string {
            return t(
              "modelDeployments.resources.monitoring.metadata.predictResponseSuccessRate",
              {},
              _key
            );
          },
        predictResponseStatus:
          function modelDeployments_resources_monitoring_metadata_predictResponseStatus(
            _key?: boolean
          ): string {
            return t(
              "modelDeployments.resources.monitoring.metadata.predictResponseStatus",
              {},
              _key
            );
          },
        predictLatency:
          function modelDeployments_resources_monitoring_metadata_predictLatency(
            _key?: boolean
          ): string {
            return t(
              "modelDeployments.resources.monitoring.metadata.predictLatency",
              {},
              _key
            );
          },
        bandwidth:
          function modelDeployments_resources_monitoring_metadata_bandwidth(
            _key?: boolean
          ): string {
            return t(
              "modelDeployments.resources.monitoring.metadata.bandwidth",
              {},
              _key
            );
          },
        cpuUtilization:
          function modelDeployments_resources_monitoring_metadata_cpuUtilization(
            _key?: boolean
          ): string {
            return t(
              "modelDeployments.resources.monitoring.metadata.cpuUtilization",
              {},
              _key
            );
          },
        memoryUtilization:
          function modelDeployments_resources_monitoring_metadata_memoryUtilization(
            _key?: boolean
          ): string {
            return t(
              "modelDeployments.resources.monitoring.metadata.memoryUtilization",
              {},
              _key
            );
          },
        networkBytes:
          function modelDeployments_resources_monitoring_metadata_networkBytes(
            _key?: boolean
          ): string {
            return t(
              "modelDeployments.resources.monitoring.metadata.networkBytes",
              {},
              _key
            );
          },
      },
    },
    workRequests: {
      linkText: function modelDeployments_resources_workRequests_linkText(
        _key?: boolean
      ): string {
        return t("modelDeployments.resources.workRequests.linkText", {}, _key);
      },
    },
    invokingYourModel: {
      linkText: function modelDeployments_resources_invokingYourModel_linkText(
        _key?: boolean
      ): string {
        return t(
          "modelDeployments.resources.invokingYourModel.linkText",
          {},
          _key
        );
      },
      modelEndpointTitle:
        function modelDeployments_resources_invokingYourModel_modelEndpointTitle(
          _key?: boolean
        ): string {
          return t(
            "modelDeployments.resources.invokingYourModel.modelEndpointTitle",
            {},
            _key
          );
        },
      sdkTitle: function modelDeployments_resources_invokingYourModel_sdkTitle(
        sdkName: string,
        _key?: boolean
      ): string {
        return t(
          "modelDeployments.resources.invokingYourModel.sdkTitle",
          { sdkName },
          _key
        );
      },
    },
    logs: {
      linkText: function modelDeployments_resources_logs_linkText(
        _key?: boolean
      ): string {
        return t("modelDeployments.resources.logs.linkText", {}, _key);
      },
      noLogSelected: function modelDeployments_resources_logs_noLogSelected(
        _key?: boolean
      ): string {
        return t("modelDeployments.resources.logs.noLogSelected", {}, _key);
      },
      labels: {
        category: function modelDeployments_resources_logs_labels_category(
          _key?: boolean
        ): string {
          return t("modelDeployments.resources.logs.labels.category", {}, _key);
        },
        state: function modelDeployments_resources_logs_labels_state(
          _key?: boolean
        ): string {
          return t("modelDeployments.resources.logs.labels.state", {}, _key);
        },
        logName: function modelDeployments_resources_logs_labels_logName(
          _key?: boolean
        ): string {
          return t("modelDeployments.resources.logs.labels.logName", {}, _key);
        },
        logGroup: function modelDeployments_resources_logs_labels_logGroup(
          _key?: boolean
        ): string {
          return t("modelDeployments.resources.logs.labels.logGroup", {}, _key);
        },
      },
      logType: {
        predict: function modelDeployments_resources_logs_logType_predict(
          _key?: boolean
        ): string {
          return t("modelDeployments.resources.logs.logType.predict", {}, _key);
        },
        access: function modelDeployments_resources_logs_logType_access(
          _key?: boolean
        ): string {
          return t("modelDeployments.resources.logs.logType.access", {}, _key);
        },
      },
      status: {
        active: function modelDeployments_resources_logs_status_active(
          _key?: boolean
        ): string {
          return t("modelDeployments.resources.logs.status.active", {}, _key);
        },
        inactive: function modelDeployments_resources_logs_status_inactive(
          _key?: boolean
        ): string {
          return t("modelDeployments.resources.logs.status.inactive", {}, _key);
        },
        notFound: function modelDeployments_resources_logs_status_notFound(
          _key?: boolean
        ): string {
          return t("modelDeployments.resources.logs.status.notFound", {}, _key);
        },
      },
    },
  },
  shapeFamilies: {
    intelSkylake: {
      label: function modelDeployments_shapeFamilies_intelSkylake_label(
        _key?: boolean
      ): string {
        return t("modelDeployments.shapeFamilies.intelSkylake.label", {}, _key);
      },
      description:
        function modelDeployments_shapeFamilies_intelSkylake_description(
          _key?: boolean
        ): string {
          return t(
            "modelDeployments.shapeFamilies.intelSkylake.description",
            {},
            _key
          );
        },
    },
  },
  selectPanes: {
    modelSelect: {
      title: function modelDeployments_selectPanes_modelSelect_title(
        _key?: boolean
      ): string {
        return t("modelDeployments.selectPanes.modelSelect.title", {}, _key);
      },
      message: function modelDeployments_selectPanes_modelSelect_message(
        _key?: boolean
      ): string {
        return t("modelDeployments.selectPanes.modelSelect.message", {}, _key);
      },
      labels: {
        SelectByCompartment:
          function modelDeployments_selectPanes_modelSelect_labels_SelectByCompartment(
            _key?: boolean
          ): string {
            return t(
              "modelDeployments.selectPanes.modelSelect.labels.SelectByCompartment",
              {},
              _key
            );
          },
        SelectFromCompartmentList:
          function modelDeployments_selectPanes_modelSelect_labels_SelectFromCompartmentList(
            _key?: boolean
          ): string {
            return t(
              "modelDeployments.selectPanes.modelSelect.labels.SelectFromCompartmentList",
              {},
              _key
            );
          },
        SelectUsingOCID:
          function modelDeployments_selectPanes_modelSelect_labels_SelectUsingOCID(
            _key?: boolean
          ): string {
            return t(
              "modelDeployments.selectPanes.modelSelect.labels.SelectUsingOCID",
              {},
              _key
            );
          },
        searchOCID:
          function modelDeployments_selectPanes_modelSelect_labels_searchOCID(
            _key?: boolean
          ): string {
            return t(
              "modelDeployments.selectPanes.modelSelect.labels.searchOCID",
              {},
              _key
            );
          },
        selectFromProjectList:
          function modelDeployments_selectPanes_modelSelect_labels_selectFromProjectList(
            _key?: boolean
          ): string {
            return t(
              "modelDeployments.selectPanes.modelSelect.labels.selectFromProjectList",
              {},
              _key
            );
          },
      },
      tooltips: {
        searchOCID:
          function modelDeployments_selectPanes_modelSelect_tooltips_searchOCID(
            _key?: boolean
          ): string {
            return t(
              "modelDeployments.selectPanes.modelSelect.tooltips.searchOCID",
              {},
              _key
            );
          },
      },
      actions: {
        search:
          function modelDeployments_selectPanes_modelSelect_actions_search(
            _key?: boolean
          ): string {
            return t(
              "modelDeployments.selectPanes.modelSelect.actions.search",
              {},
              _key
            );
          },
      },
      customAttributes: {
        numberShowingText:
          function modelDeployments_selectPanes_modelSelect_customAttributes_numberShowingText(
            numberShowing: number,
            _key?: boolean
          ): string {
            return t(
              "modelDeployments.selectPanes.modelSelect.customAttributes.numberShowingText",
              { numberShowing },
              _key
            );
          },
      },
    },
    computeSelect: {
      title: function modelDeployments_selectPanes_computeSelect_title(
        _key?: boolean
      ): string {
        return t("modelDeployments.selectPanes.computeSelect.title", {}, _key);
      },
      customAttributes: {
        numberShowingText:
          function modelDeployments_selectPanes_computeSelect_customAttributes_numberShowingText(
            numberShowing: number,
            _key?: boolean
          ): string {
            return t(
              "modelDeployments.selectPanes.computeSelect.customAttributes.numberShowingText",
              { numberShowing },
              _key
            );
          },
      },
    },
    loggingSelect: {
      title: function modelDeployments_selectPanes_loggingSelect_title(
        _key?: boolean
      ): string {
        return t("modelDeployments.selectPanes.loggingSelect.title", {}, _key);
      },
      accessLogsTitle:
        function modelDeployments_selectPanes_loggingSelect_accessLogsTitle(
          _key?: boolean
        ): string {
          return t(
            "modelDeployments.selectPanes.loggingSelect.accessLogsTitle",
            {},
            _key
          );
        },
      predictLogsTitle:
        function modelDeployments_selectPanes_loggingSelect_predictLogsTitle(
          _key?: boolean
        ): string {
          return t(
            "modelDeployments.selectPanes.loggingSelect.predictLogsTitle",
            {},
            _key
          );
        },
      compartment:
        function modelDeployments_selectPanes_loggingSelect_compartment(
          _key?: boolean
        ): string {
          return t(
            "modelDeployments.selectPanes.loggingSelect.compartment",
            {},
            _key
          );
        },
      logGroup: function modelDeployments_selectPanes_loggingSelect_logGroup(
        _key?: boolean
      ): string {
        return t(
          "modelDeployments.selectPanes.loggingSelect.logGroup",
          {},
          _key
        );
      },
      logName: function modelDeployments_selectPanes_loggingSelect_logName(
        _key?: boolean
      ): string {
        return t(
          "modelDeployments.selectPanes.loggingSelect.logName",
          {},
          _key
        );
      },
      noLogGroupsFound:
        function modelDeployments_selectPanes_loggingSelect_noLogGroupsFound(
          _key?: boolean
        ): string {
          return t(
            "modelDeployments.selectPanes.loggingSelect.noLogGroupsFound",
            {},
            _key
          );
        },
      noLogsFound:
        function modelDeployments_selectPanes_loggingSelect_noLogsFound(
          _key?: boolean
        ): string {
          return t(
            "modelDeployments.selectPanes.loggingSelect.noLogsFound",
            {},
            _key
          );
        },
      errorFetchingLogs:
        function modelDeployments_selectPanes_loggingSelect_errorFetchingLogs(
          _key?: boolean
        ): string {
          return t(
            "modelDeployments.selectPanes.loggingSelect.errorFetchingLogs",
            {},
            _key
          );
        },
      learnMore: function modelDeployments_selectPanes_loggingSelect_learnMore(
        _key?: boolean
      ): string {
        return t(
          "modelDeployments.selectPanes.loggingSelect.learnMore",
          {},
          _key
        );
      },
      tooltips: {
        accessLogs:
          function modelDeployments_selectPanes_loggingSelect_tooltips_accessLogs(
            _key?: boolean
          ): string {
            return t(
              "modelDeployments.selectPanes.loggingSelect.tooltips.accessLogs",
              {},
              _key
            );
          },
        predictLogs:
          function modelDeployments_selectPanes_loggingSelect_tooltips_predictLogs(
            _key?: boolean
          ): string {
            return t(
              "modelDeployments.selectPanes.loggingSelect.tooltips.predictLogs",
              {},
              _key
            );
          },
      },
    },
  },
  deploymentMode: {
    helpText: function modelDeployments_deploymentMode_helpText(
      _key?: boolean
    ): string {
      return t("modelDeployments.deploymentMode.helpText", {}, _key);
    },
    https: {
      label: function modelDeployments_deploymentMode_https_label(
        _key?: boolean
      ): string {
        return t("modelDeployments.deploymentMode.https.label", {}, _key);
      },
      description: function modelDeployments_deploymentMode_https_description(
        _key?: boolean
      ): string {
        return t("modelDeployments.deploymentMode.https.description", {}, _key);
      },
      helpText: function modelDeployments_deploymentMode_https_helpText(
        _key?: boolean
      ): string {
        return t("modelDeployments.deploymentMode.https.helpText", {}, _key);
      },
    },
    streaming: {
      label: function modelDeployments_deploymentMode_streaming_label(
        _key?: boolean
      ): string {
        return t("modelDeployments.deploymentMode.streaming.label", {}, _key);
      },
      description:
        function modelDeployments_deploymentMode_streaming_description(
          _key?: boolean
        ): string {
          return t(
            "modelDeployments.deploymentMode.streaming.description",
            {},
            _key
          );
        },
      inputHelpText:
        function modelDeployments_deploymentMode_streaming_inputHelpText(
          _key?: boolean
        ): string {
          return t(
            "modelDeployments.deploymentMode.streaming.inputHelpText",
            {},
            _key
          );
        },
      outputHelpText:
        function modelDeployments_deploymentMode_streaming_outputHelpText(
          _key?: boolean
        ): string {
          return t(
            "modelDeployments.deploymentMode.streaming.outputHelpText",
            {},
            _key
          );
        },
      compartmentLabel:
        function modelDeployments_deploymentMode_streaming_compartmentLabel(
          _key?: boolean
        ): string {
          return t(
            "modelDeployments.deploymentMode.streaming.compartmentLabel",
            {},
            _key
          );
        },
      streamLabel:
        function modelDeployments_deploymentMode_streaming_streamLabel(
          _key?: boolean
        ): string {
          return t(
            "modelDeployments.deploymentMode.streaming.streamLabel",
            {},
            _key
          );
        },
    },
  },
};
export const uploadModelArtifact = {
  information: {
    modelArtifactInfo:
      function uploadModelArtifact_information_modelArtifactInfo(
        href: string,
        _key?: boolean
      ): string {
        return t(
          "uploadModelArtifact.information.modelArtifactInfo",
          { href },
          _key
        );
      },
    line1: function uploadModelArtifact_information_line1(
      _key?: boolean
    ): string {
      return t("uploadModelArtifact.information.line1", {}, _key);
    },
    line2: function uploadModelArtifact_information_line2(
      _key?: boolean
    ): string {
      return t("uploadModelArtifact.information.line2", {}, _key);
    },
  },
  resourceType: function uploadModelArtifact_resourceType(
    _key?: boolean
  ): string {
    return t("uploadModelArtifact.resourceType", {}, _key);
  },
  uploadSuccessNotification:
    function uploadModelArtifact_uploadSuccessNotification(
      _key?: boolean
    ): string {
      return t("uploadModelArtifact.uploadSuccessNotification", {}, _key);
    },
  uploadFailureNotification:
    function uploadModelArtifact_uploadFailureNotification(
      _key?: boolean
    ): string {
      return t("uploadModelArtifact.uploadFailureNotification", {}, _key);
    },
};
export const workRequests = {
  linkText: function workRequests_linkText(_key?: boolean): string {
    return t("workRequests.linkText", {}, _key);
  },
  detailText: function workRequests_detailText(_key?: boolean): string {
    return t("workRequests.detailText", {}, _key);
  },
  breadCrumbsText: function workRequests_breadCrumbsText(
    _key?: boolean
  ): string {
    return t("workRequests.breadCrumbsText", {}, _key);
  },
  shapeText: function workRequests_shapeText(_key?: boolean): string {
    return t("workRequests.shapeText", {}, _key);
  },
  progressMsgText: function workRequests_progressMsgText(
    count: number,
    _key?: boolean
  ): string {
    return t("workRequests.progressMsgText", { count }, _key);
  },
  labels: {
    operation: function workRequests_labels_operation(_key?: boolean): string {
      return t("workRequests.labels.operation", {}, _key);
    },
    state: function workRequests_labels_state(_key?: boolean): string {
      return t("workRequests.labels.state", {}, _key);
    },
    completionPercentage: function workRequests_labels_completionPercentage(
      _key?: boolean
    ): string {
      return t("workRequests.labels.completionPercentage", {}, _key);
    },
    timeAccepted: function workRequests_labels_timeAccepted(
      _key?: boolean
    ): string {
      return t("workRequests.labels.timeAccepted", {}, _key);
    },
    timeStarted: function workRequests_labels_timeStarted(
      _key?: boolean
    ): string {
      return t("workRequests.labels.timeStarted", {}, _key);
    },
    timeFinished: function workRequests_labels_timeFinished(
      _key?: boolean
    ): string {
      return t("workRequests.labels.timeFinished", {}, _key);
    },
  },
  status: {
    ACCEPTED: function workRequests_status_ACCEPTED(_key?: boolean): string {
      return t("workRequests.status.ACCEPTED", {}, _key);
    },
    IN_PROGRESS: function workRequests_status_IN_PROGRESS(
      _key?: boolean
    ): string {
      return t("workRequests.status.IN_PROGRESS", {}, _key);
    },
    FAILED: function workRequests_status_FAILED(_key?: boolean): string {
      return t("workRequests.status.FAILED", {}, _key);
    },
    SUCCEEDED: function workRequests_status_SUCCEEDED(_key?: boolean): string {
      return t("workRequests.status.SUCCEEDED", {}, _key);
    },
    CANCELING: function workRequests_status_CANCELING(_key?: boolean): string {
      return t("workRequests.status.CANCELING", {}, _key);
    },
    CANCELED: function workRequests_status_CANCELED(_key?: boolean): string {
      return t("workRequests.status.CANCELED", {}, _key);
    },
  },
  resources: {
    logs: {
      linkText: function workRequests_resources_logs_linkText(
        _key?: boolean
      ): string {
        return t("workRequests.resources.logs.linkText", {}, _key);
      },
      labels: {
        message: function workRequests_resources_logs_labels_message(
          _key?: boolean
        ): string {
          return t("workRequests.resources.logs.labels.message", {}, _key);
        },
        timestamp: function workRequests_resources_logs_labels_timestamp(
          _key?: boolean
        ): string {
          return t("workRequests.resources.logs.labels.timestamp", {}, _key);
        },
      },
      errors: {
        errorFetchingLogs:
          function workRequests_resources_logs_errors_errorFetchingLogs(
            _key?: boolean
          ): string {
            return t(
              "workRequests.resources.logs.errors.errorFetchingLogs",
              {},
              _key
            );
          },
      },
    },
    errors: {
      linkText: function workRequests_resources_errors_linkText(
        _key?: boolean
      ): string {
        return t("workRequests.resources.errors.linkText", {}, _key);
      },
      labels: {
        code: function workRequests_resources_errors_labels_code(
          _key?: boolean
        ): string {
          return t("workRequests.resources.errors.labels.code", {}, _key);
        },
        message: function workRequests_resources_errors_labels_message(
          _key?: boolean
        ): string {
          return t("workRequests.resources.errors.labels.message", {}, _key);
        },
        timestamp: function workRequests_resources_errors_labels_timestamp(
          _key?: boolean
        ): string {
          return t("workRequests.resources.errors.labels.timestamp", {}, _key);
        },
      },
      errors: {
        errorFetchingErrors:
          function workRequests_resources_errors_errors_errorFetchingErrors(
            _key?: boolean
          ): string {
            return t(
              "workRequests.resources.errors.errors.errorFetchingErrors",
              {},
              _key
            );
          },
      },
    },
    associatedResources: {
      linkText: function workRequests_resources_associatedResources_linkText(
        _key?: boolean
      ): string {
        return t(
          "workRequests.resources.associatedResources.linkText",
          {},
          _key
        );
      },
      labels: {
        resourceName:
          function workRequests_resources_associatedResources_labels_resourceName(
            _key?: boolean
          ): string {
            return t(
              "workRequests.resources.associatedResources.labels.resourceName",
              {},
              _key
            );
          },
        resourceType:
          function workRequests_resources_associatedResources_labels_resourceType(
            _key?: boolean
          ): string {
            return t(
              "workRequests.resources.associatedResources.labels.resourceType",
              {},
              _key
            );
          },
        ocid: function workRequests_resources_associatedResources_labels_ocid(
          _key?: boolean
        ): string {
          return t(
            "workRequests.resources.associatedResources.labels.ocid",
            {},
            _key
          );
        },
      },
      errors: {
        errorFetchingAssociatedResources:
          function workRequests_resources_associatedResources_errors_errorFetchingAssociatedResources(
            _key?: boolean
          ): string {
            return t(
              "workRequests.resources.associatedResources.errors.errorFetchingAssociatedResources",
              {},
              _key
            );
          },
      },
    },
  },
};
export const sidePanels = {
  scope: {
    title: function sidePanels_scope_title(_key?: boolean): string {
      return t("sidePanels.scope.title", {}, _key);
    },
  },
  filters: {
    title: function sidePanels_filters_title(_key?: boolean): string {
      return t("sidePanels.filters.title", {}, _key);
    },
    lifecycleState: {
      ACTIVE: function sidePanels_filters_lifecycleState_ACTIVE(
        _key?: boolean
      ): string {
        return t("sidePanels.filters.lifecycleState.ACTIVE", {}, _key);
      },
      INACTIVE: function sidePanels_filters_lifecycleState_INACTIVE(
        _key?: boolean
      ): string {
        return t("sidePanels.filters.lifecycleState.INACTIVE", {}, _key);
      },
      DELETED: function sidePanels_filters_lifecycleState_DELETED(
        _key?: boolean
      ): string {
        return t("sidePanels.filters.lifecycleState.DELETED", {}, _key);
      },
      DELETING: function sidePanels_filters_lifecycleState_DELETING(
        _key?: boolean
      ): string {
        return t("sidePanels.filters.lifecycleState.DELETING", {}, _key);
      },
      FAILED: function sidePanels_filters_lifecycleState_FAILED(
        _key?: boolean
      ): string {
        return t("sidePanels.filters.lifecycleState.FAILED", {}, _key);
      },
      CREATING: function sidePanels_filters_lifecycleState_CREATING(
        _key?: boolean
      ): string {
        return t("sidePanels.filters.lifecycleState.CREATING", {}, _key);
      },
      UPDATING: function sidePanels_filters_lifecycleState_UPDATING(
        _key?: boolean
      ): string {
        return t("sidePanels.filters.lifecycleState.UPDATING", {}, _key);
      },
      NEEDS_ATTENTION:
        function sidePanels_filters_lifecycleState_NEEDS_ATTENTION(
          _key?: boolean
        ): string {
          return t(
            "sidePanels.filters.lifecycleState.NEEDS_ATTENTION",
            {},
            _key
          );
        },
      ACCEPTED: function sidePanels_filters_lifecycleState_ACCEPTED(
        _key?: boolean
      ): string {
        return t("sidePanels.filters.lifecycleState.ACCEPTED", {}, _key);
      },
      IN_PROGRESS: function sidePanels_filters_lifecycleState_IN_PROGRESS(
        _key?: boolean
      ): string {
        return t("sidePanels.filters.lifecycleState.IN_PROGRESS", {}, _key);
      },
      SUCCEEDED: function sidePanels_filters_lifecycleState_SUCCEEDED(
        _key?: boolean
      ): string {
        return t("sidePanels.filters.lifecycleState.SUCCEEDED", {}, _key);
      },
      CANCELING: function sidePanels_filters_lifecycleState_CANCELING(
        _key?: boolean
      ): string {
        return t("sidePanels.filters.lifecycleState.CANCELING", {}, _key);
      },
      CANCELED: function sidePanels_filters_lifecycleState_CANCELED(
        _key?: boolean
      ): string {
        return t("sidePanels.filters.lifecycleState.CANCELED", {}, _key);
      },
      WAITING: function sidePanels_filters_lifecycleState_WAITING(
        _key?: boolean
      ): string {
        return t("sidePanels.filters.lifecycleState.WAITING", {}, _key);
      },
      SKIPPED: function sidePanels_filters_lifecycleState_SKIPPED(
        _key?: boolean
      ): string {
        return t("sidePanels.filters.lifecycleState.SKIPPED", {}, _key);
      },
    },
    fullDate: function sidePanels_filters_fullDate(
      currentDateTime: Date,
      _key?: boolean
    ): string {
      return t("sidePanels.filters.fullDate", { currentDateTime }, _key);
    },
    createdStartDate: function sidePanels_filters_createdStartDate(
      _key?: boolean
    ): string {
      return t("sidePanels.filters.createdStartDate", {}, _key);
    },
    createdEndDate: function sidePanels_filters_createdEndDate(
      _key?: boolean
    ): string {
      return t("sidePanels.filters.createdEndDate", {}, _key);
    },
    dateRangeToday: function sidePanels_filters_dateRangeToday(
      _key?: boolean
    ): string {
      return t("sidePanels.filters.dateRangeToday", {}, _key);
    },
    dateRangeYesterday: function sidePanels_filters_dateRangeYesterday(
      _key?: boolean
    ): string {
      return t("sidePanels.filters.dateRangeYesterday", {}, _key);
    },
    dateRangePastThreeDays: function sidePanels_filters_dateRangePastThreeDays(
      _key?: boolean
    ): string {
      return t("sidePanels.filters.dateRangePastThreeDays", {}, _key);
    },
    allUsers: function sidePanels_filters_allUsers(_key?: boolean): string {
      return t("sidePanels.filters.allUsers", {}, _key);
    },
    all: function sidePanels_filters_all(_key?: boolean): string {
      return t("sidePanels.filters.all", {}, _key);
    },
    modelVersionSetFilter: function sidePanels_filters_modelVersionSetFilter(
      _key?: boolean
    ): string {
      return t("sidePanels.filters.modelVersionSetFilter", {}, _key);
    },
    versionLabelFilter: function sidePanels_filters_versionLabelFilter(
      _key?: boolean
    ): string {
      return t("sidePanels.filters.versionLabelFilter", {}, _key);
    },
  },
  modelSelect: {
    title: function sidePanels_modelSelect_title(_key?: boolean): string {
      return t("sidePanels.modelSelect.title", {}, _key);
    },
    message: function sidePanels_modelSelect_message(_key?: boolean): string {
      return t("sidePanels.modelSelect.message", {}, _key);
    },
    labels: {
      SelectByCompartment:
        function sidePanels_modelSelect_labels_SelectByCompartment(
          _key?: boolean
        ): string {
          return t(
            "sidePanels.modelSelect.labels.SelectByCompartment",
            {},
            _key
          );
        },
      SelectFromCompartmentList:
        function sidePanels_modelSelect_labels_SelectFromCompartmentList(
          _key?: boolean
        ): string {
          return t(
            "sidePanels.modelSelect.labels.SelectFromCompartmentList",
            {},
            _key
          );
        },
      SelectUsingOCID: function sidePanels_modelSelect_labels_SelectUsingOCID(
        _key?: boolean
      ): string {
        return t("sidePanels.modelSelect.labels.SelectUsingOCID", {}, _key);
      },
      searchOCID: function sidePanels_modelSelect_labels_searchOCID(
        _key?: boolean
      ): string {
        return t("sidePanels.modelSelect.labels.searchOCID", {}, _key);
      },
    },
    tooltips: {
      searchOCID: function sidePanels_modelSelect_tooltips_searchOCID(
        _key?: boolean
      ): string {
        return t("sidePanels.modelSelect.tooltips.searchOCID", {}, _key);
      },
    },
    actions: {
      search: function sidePanels_modelSelect_actions_search(
        _key?: boolean
      ): string {
        return t("sidePanels.modelSelect.actions.search", {}, _key);
      },
    },
  },
};
export const validation = {
  required: function validation_required(_key?: boolean): string {
    return t("validation.required", {}, _key);
  },
  invalidValue: function validation_invalidValue(_key?: boolean): string {
    return t("validation.invalidValue", {}, _key);
  },
  minLength: function validation_minLength(
    min: number,
    _key?: boolean
  ): string {
    return t("validation.minLength", { min }, _key);
  },
  maxLength: function validation_maxLength(
    max: number,
    _key?: boolean
  ): string {
    return t("validation.maxLength", { max }, _key);
  },
  maxSize: function validation_maxSize(type: string, _key?: boolean): string {
    return t("validation.maxSize", { type }, _key);
  },
  minSize: function validation_minSize(type: string, _key?: boolean): string {
    return t("validation.minSize", { type }, _key);
  },
  invalidJson: function validation_invalidJson(
    type: string,
    fileType: string,
    _key?: boolean
  ): string {
    return t("validation.invalidJson", { type, fileType }, _key);
  },
  invalidRangeValue: function validation_invalidRangeValue(
    min: string,
    max: string,
    _key?: boolean
  ): string {
    return t("validation.invalidRangeValue", { min, max }, _key);
  },
  requiredPipelineMlStepJob: function validation_requiredPipelineMlStepJob(
    _key?: boolean
  ): string {
    return t("validation.requiredPipelineMlStepJob", {}, _key);
  },
  byocEnvVar: function validation_byocEnvVar(_key?: boolean): string {
    return t("validation.byocEnvVar", {}, _key);
  },
};
export const upload = {
  progressMsgText: function upload_progressMsgText(
    count: number,
    _key?: boolean
  ): string {
    return t("upload.progressMsgText", { count }, _key);
  },
  size: {
    bytes: function upload_size_bytes(size: number, _key?: boolean): string {
      return t("upload.size.bytes", { size }, _key);
    },
    gib: function upload_size_gib(size: number, _key?: boolean): string {
      return t("upload.size.gib", { size }, _key);
    },
    kib: function upload_size_kib(size: number, _key?: boolean): string {
      return t("upload.size.kib", { size }, _key);
    },
    mib: function upload_size_mib(size: number, _key?: boolean): string {
      return t("upload.size.mib", { size }, _key);
    },
    pib: function upload_size_pib(size: number, _key?: boolean): string {
      return t("upload.size.pib", { size }, _key);
    },
    tib: function upload_size_tib(size: number, _key?: boolean): string {
      return t("upload.size.tib", { size }, _key);
    },
  },
  failed: function upload_failed(_key?: boolean): string {
    return t("upload.failed", {}, _key);
  },
  finished: function upload_finished(_key?: boolean): string {
    return t("upload.finished", {}, _key);
  },
};
export const dates = {
  fullDateTime: function dates_fullDateTime(
    date: Date,
    _key?: boolean
  ): string {
    return t("dates.fullDateTime", { date }, _key);
  },
};
export const metricsChartList = {
  cpuMetadata: function metricsChartList_cpuMetadata(_key?: boolean): string {
    return t("metricsChartList.cpuMetadata", {}, _key);
  },
  memoryMetadata: function metricsChartList_memoryMetadata(
    _key?: boolean
  ): string {
    return t("metricsChartList.memoryMetadata", {}, _key);
  },
  networkInMetadata: function metricsChartList_networkInMetadata(
    _key?: boolean
  ): string {
    return t("metricsChartList.networkInMetadata", {}, _key);
  },
  networkOutMetadata: function metricsChartList_networkOutMetadata(
    _key?: boolean
  ): string {
    return t("metricsChartList.networkOutMetadata", {}, _key);
  },
  cpuFriendly: function metricsChartList_cpuFriendly(_key?: boolean): string {
    return t("metricsChartList.cpuFriendly", {}, _key);
  },
  memoryFriendly: function metricsChartList_memoryFriendly(
    _key?: boolean
  ): string {
    return t("metricsChartList.memoryFriendly", {}, _key);
  },
  networkInFriendly: function metricsChartList_networkInFriendly(
    _key?: boolean
  ): string {
    return t("metricsChartList.networkInFriendly", {}, _key);
  },
  networkOutFriendly: function metricsChartList_networkOutFriendly(
    _key?: boolean
  ): string {
    return t("metricsChartList.networkOutFriendly", {}, _key);
  },
};
export const dsPrereq = {
  title: function dsPrereq_title(_key?: boolean): string {
    return t("dsPrereq.title", {}, _key);
  },
  showMore: function dsPrereq_showMore(_key?: boolean): string {
    return t("dsPrereq.showMore", {}, _key);
  },
  showLess: function dsPrereq_showLess(_key?: boolean): string {
    return t("dsPrereq.showLess", {}, _key);
  },
  intro: function dsPrereq_intro(_key?: boolean): string {
    return t("dsPrereq.intro", {}, _key);
  },
  step1Title: function dsPrereq_step1Title(_key?: boolean): string {
    return t("dsPrereq.step1Title", {}, _key);
  },
  step1CreateVcn: function dsPrereq_step1CreateVcn(_key?: boolean): string {
    return t("dsPrereq.step1CreateVcn", {}, _key);
  },
  step1Vcn: function dsPrereq_step1Vcn(_key?: boolean): string {
    return t("dsPrereq.step1Vcn", {}, _key);
  },
  step1VcnWizard: function dsPrereq_step1VcnWizard(_key?: boolean): string {
    return t("dsPrereq.step1VcnWizard", {}, _key);
  },
  step1VcnOption: function dsPrereq_step1VcnOption(_key?: boolean): string {
    return t("dsPrereq.step1VcnOption", {}, _key);
  },
  step1Natgw: function dsPrereq_step1Natgw(_key?: boolean): string {
    return t("dsPrereq.step1Natgw", {}, _key);
  },
  step2Title: function dsPrereq_step2Title(_key?: boolean): string {
    return t("dsPrereq.step2Title", {}, _key);
  },
  step2CreateDg: function dsPrereq_step2CreateDg(_key?: boolean): string {
    return t("dsPrereq.step2CreateDg", {}, _key);
  },
  step3Title: function dsPrereq_step3Title(_key?: boolean): string {
    return t("dsPrereq.step3Title", {}, _key);
  },
  step3Create: function dsPrereq_step3Create(_key?: boolean): string {
    return t("dsPrereq.step3Create", {}, _key);
  },
  step3Policy: function dsPrereq_step3Policy(_key?: boolean): string {
    return t("dsPrereq.step3Policy", {}, _key);
  },
  step3InRoot: function dsPrereq_step3InRoot(_key?: boolean): string {
    return t("dsPrereq.step3InRoot", {}, _key);
  },
  step31Title: function dsPrereq_step31Title(_key?: boolean): string {
    return t("dsPrereq.step31Title", {}, _key);
  },
  step32Title: function dsPrereq_step32Title(_key?: boolean): string {
    return t("dsPrereq.step32Title", {}, _key);
  },
  step33Title: function dsPrereq_step33Title(_key?: boolean): string {
    return t("dsPrereq.step33Title", {}, _key);
  },
  forMoreInfo: function dsPrereq_forMoreInfo(_key?: boolean): string {
    return t("dsPrereq.forMoreInfo", {}, _key);
  },
  documentation: function dsPrereq_documentation(_key?: boolean): string {
    return t("dsPrereq.documentation", {}, _key);
  },
};
export const pipelineRun = {
  shapeText: function pipelineRun_shapeText(_key?: boolean): string {
    return t("pipelineRun.shapeText", {}, _key);
  },
  linkText: function pipelineRun_linkText(_key?: boolean): string {
    return t("pipelineRun.linkText", {}, _key);
  },
  detailText: function pipelineRun_detailText(_key?: boolean): string {
    return t("pipelineRun.detailText", {}, _key);
  },
  deleteTitle: function pipelineRun_deleteTitle(_key?: boolean): string {
    return t("pipelineRun.deleteTitle", {}, _key);
  },
  deleteFailed: function pipelineRun_deleteFailed(_key?: boolean): string {
    return t("pipelineRun.deleteFailed", {}, _key);
  },
  deleteInProgress: function pipelineRun_deleteInProgress(
    _key?: boolean
  ): string {
    return t("pipelineRun.deleteInProgress", {}, _key);
  },
  deleteConfirmation: function pipelineRun_deleteConfirmation(
    name: string,
    _key?: boolean
  ): string {
    return t("pipelineRun.deleteConfirmation", { name }, _key);
  },
  cancelTitle: function pipelineRun_cancelTitle(_key?: boolean): string {
    return t("pipelineRun.cancelTitle", {}, _key);
  },
  cancelConfirmation: function pipelineRun_cancelConfirmation(
    name: string,
    _key?: boolean
  ): string {
    return t("pipelineRun.cancelConfirmation", { name }, _key);
  },
  cancelAgreement: function pipelineRun_cancelAgreement(
    confirmationText: string,
    _key?: boolean
  ): string {
    return t("pipelineRun.cancelAgreement", { confirmationText }, _key);
  },
  deleteWarningTitle: function pipelineRun_deleteWarningTitle(
    _key?: boolean
  ): string {
    return t("pipelineRun.deleteWarningTitle", {}, _key);
  },
  deleteAgreement: function pipelineRun_deleteAgreement(
    confirmationText: string,
    _key?: boolean
  ): string {
    return t("pipelineRun.deleteAgreement", { confirmationText }, _key);
  },
  pipelineRunLoggingTitle: function pipelineRun_pipelineRunLoggingTitle(
    _key?: boolean
  ): string {
    return t("pipelineRun.pipelineRunLoggingTitle", {}, _key);
  },
  createPipelineRunSuccess: function pipelineRun_createPipelineRunSuccess(
    name: string,
    _key?: boolean
  ): string {
    return t("pipelineRun.createPipelineRunSuccess", { name }, _key);
  },
  editPipelineRunSuccess: function pipelineRun_editPipelineRunSuccess(
    name: string,
    _key?: boolean
  ): string {
    return t("pipelineRun.editPipelineRunSuccess", { name }, _key);
  },
  editTitle: function pipelineRun_editTitle(_key?: boolean): string {
    return t("pipelineRun.editTitle", {}, _key);
  },
  labels: {
    description: function pipelineRun_labels_description(
      _key?: boolean
    ): string {
      return t("pipelineRun.labels.description", {}, _key);
    },
    name: function pipelineRun_labels_name(_key?: boolean): string {
      return t("pipelineRun.labels.name", {}, _key);
    },
    state: function pipelineRun_labels_state(_key?: boolean): string {
      return t("pipelineRun.labels.state", {}, _key);
    },
    createdBy: function pipelineRun_labels_createdBy(_key?: boolean): string {
      return t("pipelineRun.labels.createdBy", {}, _key);
    },
    timeAccepted: function pipelineRun_labels_timeAccepted(
      _key?: boolean
    ): string {
      return t("pipelineRun.labels.timeAccepted", {}, _key);
    },
    timeStarted: function pipelineRun_labels_timeStarted(
      _key?: boolean
    ): string {
      return t("pipelineRun.labels.timeStarted", {}, _key);
    },
    timeFinished: function pipelineRun_labels_timeFinished(
      _key?: boolean
    ): string {
      return t("pipelineRun.labels.timeFinished", {}, _key);
    },
    timeCreated: function pipelineRun_labels_timeCreated(
      _key?: boolean
    ): string {
      return t("pipelineRun.labels.timeCreated", {}, _key);
    },
    numberShowingText: function pipelineRun_labels_numberShowingText(
      numberShowing: number,
      _key?: boolean
    ): string {
      return t("pipelineRun.labels.numberShowingText", { numberShowing }, _key);
    },
    pipelineConfigurationOverride:
      function pipelineRun_labels_pipelineConfigurationOverride(
        _key?: boolean
      ): string {
        return t("pipelineRun.labels.pipelineConfigurationOverride", {}, _key);
      },
    pipelineRunInformation: function pipelineRun_labels_pipelineRunInformation(
      _key?: boolean
    ): string {
      return t("pipelineRun.labels.pipelineRunInformation", {}, _key);
    },
    pipelineStepConfigurationOverride:
      function pipelineRun_labels_pipelineStepConfigurationOverride(
        _key?: boolean
      ): string {
        return t(
          "pipelineRun.labels.pipelineStepConfigurationOverride",
          {},
          _key
        );
      },
  },
  actions: {
    start: function pipelineRun_actions_start(_key?: boolean): string {
      return t("pipelineRun.actions.start", {}, _key);
    },
    edit: function pipelineRun_actions_edit(_key?: boolean): string {
      return t("pipelineRun.actions.edit", {}, _key);
    },
    cancel: function pipelineRun_actions_cancel(_key?: boolean): string {
      return t("pipelineRun.actions.cancel", {}, _key);
    },
    confirm: function pipelineRun_actions_confirm(_key?: boolean): string {
      return t("pipelineRun.actions.confirm", {}, _key);
    },
    clone: function pipelineRun_actions_clone(_key?: boolean): string {
      return t("pipelineRun.actions.clone", {}, _key);
    },
    cloneAJobRun: function pipelineRun_actions_cloneAJobRun(
      _key?: boolean
    ): string {
      return t("pipelineRun.actions.cloneAJobRun", {}, _key);
    },
    cloneJobRun: function pipelineRun_actions_cloneJobRun(
      _key?: boolean
    ): string {
      return t("pipelineRun.actions.cloneJobRun", {}, _key);
    },
    delete: function pipelineRun_actions_delete(_key?: boolean): string {
      return t("pipelineRun.actions.delete", {}, _key);
    },
    create: function pipelineRun_actions_create(_key?: boolean): string {
      return t("pipelineRun.actions.create", {}, _key);
    },
    moveResource: function pipelineRun_actions_moveResource(
      _key?: boolean
    ): string {
      return t("pipelineRun.actions.moveResource", {}, _key);
    },
  },
  hints: {
    maxRuntimeInMinutes: function pipelineRun_hints_maxRuntimeInMinutes(
      minSize: number,
      maxSize: number,
      _key?: boolean
    ): string {
      return t(
        "pipelineRun.hints.maxRuntimeInMinutes",
        { minSize, maxSize },
        _key
      );
    },
  },
  monitoring: {
    linkText: function pipelineRun_monitoring_linkText(_key?: boolean): string {
      return t("pipelineRun.monitoring.linkText", {}, _key);
    },
    friendlyNames: {
      cpuUtilization:
        function pipelineRun_monitoring_friendlyNames_cpuUtilization(
          _key?: boolean
        ): string {
          return t(
            "pipelineRun.monitoring.friendlyNames.cpuUtilization",
            {},
            _key
          );
        },
      memoryUtilization:
        function pipelineRun_monitoring_friendlyNames_memoryUtilization(
          _key?: boolean
        ): string {
          return t(
            "pipelineRun.monitoring.friendlyNames.memoryUtilization",
            {},
            _key
          );
        },
      networkBytesIn:
        function pipelineRun_monitoring_friendlyNames_networkBytesIn(
          _key?: boolean
        ): string {
          return t(
            "pipelineRun.monitoring.friendlyNames.networkBytesIn",
            {},
            _key
          );
        },
      networkBytesOut:
        function pipelineRun_monitoring_friendlyNames_networkBytesOut(
          _key?: boolean
        ): string {
          return t(
            "pipelineRun.monitoring.friendlyNames.networkBytesOut",
            {},
            _key
          );
        },
      diskUtilization:
        function pipelineRun_monitoring_friendlyNames_diskUtilization(
          _key?: boolean
        ): string {
          return t(
            "pipelineRun.monitoring.friendlyNames.diskUtilization",
            {},
            _key
          );
        },
    },
    metadata: {
      cpuUtilization: function pipelineRun_monitoring_metadata_cpuUtilization(
        _key?: boolean
      ): string {
        return t("pipelineRun.monitoring.metadata.cpuUtilization", {}, _key);
      },
      memoryUtilization:
        function pipelineRun_monitoring_metadata_memoryUtilization(
          _key?: boolean
        ): string {
          return t(
            "pipelineRun.monitoring.metadata.memoryUtilization",
            {},
            _key
          );
        },
      networkBytesIn: function pipelineRun_monitoring_metadata_networkBytesIn(
        _key?: boolean
      ): string {
        return t("pipelineRun.monitoring.metadata.networkBytesIn", {}, _key);
      },
      networkBytesOut: function pipelineRun_monitoring_metadata_networkBytesOut(
        _key?: boolean
      ): string {
        return t("pipelineRun.monitoring.metadata.networkBytesOut", {}, _key);
      },
      diskUtilization: function pipelineRun_monitoring_metadata_diskUtilization(
        _key?: boolean
      ): string {
        return t("pipelineRun.monitoring.metadata.diskUtilization", {}, _key);
      },
    },
  },
};
export const pipelineStep = {
  linkText: function pipelineStep_linkText(_key?: boolean): string {
    return t("pipelineStep.linkText", {}, _key);
  },
  editPipelineStepSuccess: function pipelineStep_editPipelineStepSuccess(
    name: string,
    _key?: boolean
  ): string {
    return t("pipelineStep.editPipelineStepSuccess", { name }, _key);
  },
  none: function pipelineStep_none(_key?: boolean): string {
    return t("pipelineStep.none", {}, _key);
  },
  labels: {
    stepInformation: function pipelineStep_labels_stepInformation(
      _key?: boolean
    ): string {
      return t("pipelineStep.labels.stepInformation", {}, _key);
    },
    generalInformation: function pipelineStep_labels_generalInformation(
      _key?: boolean
    ): string {
      return t("pipelineStep.labels.generalInformation", {}, _key);
    },
    stepArtifact: function pipelineStep_labels_stepArtifact(
      _key?: boolean
    ): string {
      return t("pipelineStep.labels.stepArtifact", {}, _key);
    },
    description: function pipelineStep_labels_description(
      _key?: boolean
    ): string {
      return t("pipelineStep.labels.description", {}, _key);
    },
    type: function pipelineStep_labels_type(_key?: boolean): string {
      return t("pipelineStep.labels.type", {}, _key);
    },
    dependsOn: function pipelineStep_labels_dependsOn(_key?: boolean): string {
      return t("pipelineStep.labels.dependsOn", {}, _key);
    },
    job: function pipelineStep_labels_job(_key?: boolean): string {
      return t("pipelineStep.labels.job", {}, _key);
    },
    defaultConfiguration: function pipelineStep_labels_defaultConfiguration(
      _key?: boolean
    ): string {
      return t("pipelineStep.labels.defaultConfiguration", {}, _key);
    },
    tag: function pipelineStep_labels_tag(_key?: boolean): string {
      return t("pipelineStep.labels.tag", {}, _key);
    },
    infrastructureConfiguration:
      function pipelineStep_labels_infrastructureConfiguration(
        _key?: boolean
      ): string {
        return t("pipelineStep.labels.infrastructureConfiguration", {}, _key);
      },
    shapeName: function pipelineStep_labels_shapeName(_key?: boolean): string {
      return t("pipelineStep.labels.shapeName", {}, _key);
    },
    blockStorage: function pipelineStep_labels_blockStorage(
      _key?: boolean
    ): string {
      return t("pipelineStep.labels.blockStorage", {}, _key);
    },
    stepConfiguration: function pipelineStep_labels_stepConfiguration(
      _key?: boolean
    ): string {
      return t("pipelineStep.labels.stepConfiguration", {}, _key);
    },
    buildByJobs: function pipelineStep_labels_buildByJobs(
      _key?: boolean
    ): string {
      return t("pipelineStep.labels.buildByJobs", {}, _key);
    },
    buildByJobsDescription: function pipelineStep_labels_buildByJobsDescription(
      _key?: boolean
    ): string {
      return t("pipelineStep.labels.buildByJobsDescription", {}, _key);
    },
    buildByScript: function pipelineStep_labels_buildByScript(
      _key?: boolean
    ): string {
      return t("pipelineStep.labels.buildByScript", {}, _key);
    },
    buildByScriptDescription:
      function pipelineStep_labels_buildByScriptDescription(
        _key?: boolean
      ): string {
        return t("pipelineStep.labels.buildByScriptDescription", {}, _key);
      },
    computeLabels: {
      shapeName: function pipelineStep_labels_computeLabels_shapeName(
        _key?: boolean
      ): string {
        return t("pipelineStep.labels.computeLabels.shapeName", {}, _key);
      },
      numberOCPUs: function pipelineStep_labels_computeLabels_numberOCPUs(
        _key?: boolean
      ): string {
        return t("pipelineStep.labels.computeLabels.numberOCPUs", {}, _key);
      },
      memoryInGBs: function pipelineStep_labels_computeLabels_memoryInGBs(
        _key?: boolean
      ): string {
        return t("pipelineStep.labels.computeLabels.memoryInGBs", {}, _key);
      },
      fastLaunchCapable:
        function pipelineStep_labels_computeLabels_fastLaunchCapable(
          _key?: boolean
        ): string {
          return t(
            "pipelineStep.labels.computeLabels.fastLaunchCapable",
            {},
            _key
          );
        },
      isFastLaunchCapable:
        function pipelineStep_labels_computeLabels_isFastLaunchCapable(
          _key?: boolean
        ): string {
          return t(
            "pipelineStep.labels.computeLabels.isFastLaunchCapable",
            {},
            _key
          );
        },
      isNotFastLaunchCapable:
        function pipelineStep_labels_computeLabels_isNotFastLaunchCapable(
          _key?: boolean
        ): string {
          return t(
            "pipelineStep.labels.computeLabels.isNotFastLaunchCapable",
            {},
            _key
          );
        },
    },
    numberShowingText: function pipelineStep_labels_numberShowingText(
      numberShowing: number,
      _key?: boolean
    ): string {
      return t(
        "pipelineStep.labels.numberShowingText",
        { numberShowing },
        _key
      );
    },
  },
  uploadStepArtifact: function pipelineStep_uploadStepArtifact(
    _key?: boolean
  ): string {
    return t("pipelineStep.uploadStepArtifact", {}, _key);
  },
  successfullyUploadedArtifact:
    function pipelineStep_successfullyUploadedArtifact(_key?: boolean): string {
      return t("pipelineStep.successfullyUploadedArtifact", {}, _key);
    },
  createPanelTitle: function pipelineStep_createPanelTitle(
    _key?: boolean
  ): string {
    return t("pipelineStep.createPanelTitle", {}, _key);
  },
  deleteTitle: function pipelineStep_deleteTitle(_key?: boolean): string {
    return t("pipelineStep.deleteTitle", {}, _key);
  },
  editPanelTitle: function pipelineStep_editPanelTitle(_key?: boolean): string {
    return t("pipelineStep.editPanelTitle", {}, _key);
  },
  deleteConfirmation: function pipelineStep_deleteConfirmation(
    pipelineStepName: string,
    _key?: boolean
  ): string {
    return t("pipelineStep.deleteConfirmation", { pipelineStepName }, _key);
  },
  deleteWarningTitle: function pipelineStep_deleteWarningTitle(
    dependentStepNames: string,
    _key?: boolean
  ): string {
    return t("pipelineStep.deleteWarningTitle", { dependentStepNames }, _key);
  },
  defaultText: function pipelineStep_defaultText(_key?: boolean): string {
    return t("pipelineStep.defaultText", {}, _key);
  },
  learnMore: function pipelineStep_learnMore(_key?: boolean): string {
    return t("pipelineStep.learnMore", {}, _key);
  },
  hints: {
    dependsOn: function pipelineStep_hints_dependsOn(_key?: boolean): string {
      return t("pipelineStep.hints.dependsOn", {}, _key);
    },
    jobName: function pipelineStep_hints_jobName(_key?: boolean): string {
      return t("pipelineStep.hints.jobName", {}, _key);
    },
    blockStorageSize: function pipelineStep_hints_blockStorageSize(
      minSize: number,
      maxSize: number,
      _key?: boolean
    ): string {
      return t(
        "pipelineStep.hints.blockStorageSize",
        { minSize, maxSize },
        _key
      );
    },
  },
  tooltips: {
    artifactUploaded: function pipelineStep_tooltips_artifactUploaded(
      _key?: boolean
    ): string {
      return t("pipelineStep.tooltips.artifactUploaded", {}, _key);
    },
  },
  errorMessages: {
    noHeadingNumber: function pipelineStep_errorMessages_noHeadingNumber(
      _key?: boolean
    ): string {
      return t("pipelineStep.errorMessages.noHeadingNumber", {}, _key);
    },
    noNonAlphanumericOrUnderscoreOrSpace:
      function pipelineStep_errorMessages_noNonAlphanumericOrUnderscoreOrSpace(
        _key?: boolean
      ): string {
        return t(
          "pipelineStep.errorMessages.noNonAlphanumericOrUnderscoreOrSpace",
          {},
          _key
        );
      },
    noDuplicates: function pipelineStep_errorMessages_noDuplicates(
      _key?: boolean
    ): string {
      return t("pipelineStep.errorMessages.noDuplicates", {}, _key);
    },
  },
  actions: {
    edit: function pipelineStep_actions_edit(_key?: boolean): string {
      return t("pipelineStep.actions.edit", {}, _key);
    },
    delete: function pipelineStep_actions_delete(_key?: boolean): string {
      return t("pipelineStep.actions.delete", {}, _key);
    },
    downloadArtifact: function pipelineStep_actions_downloadArtifact(
      _key?: boolean
    ): string {
      return t("pipelineStep.actions.downloadArtifact", {}, _key);
    },
    uploadArtifact: function pipelineStep_actions_uploadArtifact(
      _key?: boolean
    ): string {
      return t("pipelineStep.actions.uploadArtifact", {}, _key);
    },
  },
};
export const pipelineStepRun = {
  linkText: function pipelineStepRun_linkText(_key?: boolean): string {
    return t("pipelineStepRun.linkText", {}, _key);
  },
  labels: {
    state: function pipelineStepRun_labels_state(_key?: boolean): string {
      return t("pipelineStepRun.labels.state", {}, _key);
    },
    lifecycleDetails: function pipelineStepRun_labels_lifecycleDetails(
      _key?: boolean
    ): string {
      return t("pipelineStepRun.labels.lifecycleDetails", {}, _key);
    },
    name: function pipelineStepRun_labels_name(_key?: boolean): string {
      return t("pipelineStepRun.labels.name", {}, _key);
    },
    timeStarted: function pipelineStepRun_labels_timeStarted(
      _key?: boolean
    ): string {
      return t("pipelineStepRun.labels.timeStarted", {}, _key);
    },
    timeFinished: function pipelineStepRun_labels_timeFinished(
      _key?: boolean
    ): string {
      return t("pipelineStepRun.labels.timeFinished", {}, _key);
    },
    runInformation: function pipelineStepRun_labels_runInformation(
      _key?: boolean
    ): string {
      return t("pipelineStepRun.labels.runInformation", {}, _key);
    },
    numberShowingText: function pipelineStepRun_labels_numberShowingText(
      numberShowing: number,
      _key?: boolean
    ): string {
      return t(
        "pipelineStepRun.labels.numberShowingText",
        { numberShowing },
        _key
      );
    },
  },
};
export const pipelineStepRunDetails = {
  detailText: function pipelineStepRunDetails_detailText(
    _key?: boolean
  ): string {
    return t("pipelineStepRunDetails.detailText", {}, _key);
  },
  generalInformation: function pipelineStepRunDetails_generalInformation(
    _key?: boolean
  ): string {
    return t("pipelineStepRunDetails.generalInformation", {}, _key);
  },
  actions: {
    start: function pipelineStepRunDetails_actions_start(
      _key?: boolean
    ): string {
      return t("pipelineStepRunDetails.actions.start", {}, _key);
    },
    edit: function pipelineStepRunDetails_actions_edit(_key?: boolean): string {
      return t("pipelineStepRunDetails.actions.edit", {}, _key);
    },
    cancel: function pipelineStepRunDetails_actions_cancel(
      _key?: boolean
    ): string {
      return t("pipelineStepRunDetails.actions.cancel", {}, _key);
    },
    confirm: function pipelineStepRunDetails_actions_confirm(
      _key?: boolean
    ): string {
      return t("pipelineStepRunDetails.actions.confirm", {}, _key);
    },
    clone: function pipelineStepRunDetails_actions_clone(
      _key?: boolean
    ): string {
      return t("pipelineStepRunDetails.actions.clone", {}, _key);
    },
    delete: function pipelineStepRunDetails_actions_delete(
      _key?: boolean
    ): string {
      return t("pipelineStepRunDetails.actions.delete", {}, _key);
    },
    create: function pipelineStepRunDetails_actions_create(
      _key?: boolean
    ): string {
      return t("pipelineStepRunDetails.actions.create", {}, _key);
    },
  },
  labels: {
    name: function pipelineStepRunDetails_labels_name(_key?: boolean): string {
      return t("pipelineStepRunDetails.labels.name", {}, _key);
    },
    status: function pipelineStepRunDetails_labels_status(
      _key?: boolean
    ): string {
      return t("pipelineStepRunDetails.labels.status", {}, _key);
    },
    jobRunLink: function pipelineStepRunDetails_labels_jobRunLink(
      _key?: boolean
    ): string {
      return t("pipelineStepRunDetails.labels.jobRunLink", {}, _key);
    },
    type: function pipelineStepRunDetails_labels_type(_key?: boolean): string {
      return t("pipelineStepRunDetails.labels.type", {}, _key);
    },
    lifecycleDetails: function pipelineStepRunDetails_labels_lifecycleDetails(
      _key?: boolean
    ): string {
      return t("pipelineStepRunDetails.labels.lifecycleDetails", {}, _key);
    },
    createdBy: function pipelineStepRunDetails_labels_createdBy(
      _key?: boolean
    ): string {
      return t("pipelineStepRunDetails.labels.createdBy", {}, _key);
    },
    timeStarted: function pipelineStepRunDetails_labels_timeStarted(
      _key?: boolean
    ): string {
      return t("pipelineStepRunDetails.labels.timeStarted", {}, _key);
    },
    timeFinished: function pipelineStepRunDetails_labels_timeFinished(
      _key?: boolean
    ): string {
      return t("pipelineStepRunDetails.labels.timeFinished", {}, _key);
    },
    runtimeConfiguration:
      function pipelineStepRunDetails_labels_runtimeConfiguration(
        _key?: boolean
      ): string {
        return t(
          "pipelineStepRunDetails.labels.runtimeConfiguration",
          {},
          _key
        );
      },
    maxRuntimeInMinutes:
      function pipelineStepRunDetails_labels_maxRuntimeInMinutes(
        _key?: boolean
      ): string {
        return t("pipelineStepRunDetails.labels.maxRuntimeInMinutes", {}, _key);
      },
    customEnvironmentVariables:
      function pipelineStepRunDetails_labels_customEnvironmentVariables(
        _key?: boolean
      ): string {
        return t(
          "pipelineStepRunDetails.labels.customEnvironmentVariables",
          {},
          _key
        );
      },
    stepDefinition: function pipelineStepRunDetails_labels_stepDefinition(
      _key?: boolean
    ): string {
      return t("pipelineStepRunDetails.labels.stepDefinition", {}, _key);
    },
    stepRunConfiguration:
      function pipelineStepRunDetails_labels_stepRunConfiguration(
        _key?: boolean
      ): string {
        return t(
          "pipelineStepRunDetails.labels.stepRunConfiguration",
          {},
          _key
        );
      },
    stepRunConfigurationOverride:
      function pipelineStepRunDetails_labels_stepRunConfigurationOverride(
        _key?: boolean
      ): string {
        return t(
          "pipelineStepRunDetails.labels.stepRunConfigurationOverride",
          {},
          _key
        );
      },
    infrastructureConfiguration:
      function pipelineStepRunDetails_labels_infrastructureConfiguration(
        _key?: boolean
      ): string {
        return t(
          "pipelineStepRunDetails.labels.infrastructureConfiguration",
          {},
          _key
        );
      },
    shapeName: function pipelineStepRunDetails_labels_shapeName(
      _key?: boolean
    ): string {
      return t("pipelineStepRunDetails.labels.shapeName", {}, _key);
    },
    blockStorage: function pipelineStepRunDetails_labels_blockStorage(
      _key?: boolean
    ): string {
      return t("pipelineStepRunDetails.labels.blockStorage", {}, _key);
    },
    numberShowingText: function pipelineStepRunDetails_labels_numberShowingText(
      numberShowing: number,
      _key?: boolean
    ): string {
      return t(
        "pipelineStepRunDetails.labels.numberShowingText",
        { numberShowing },
        _key
      );
    },
  },
};
export const pipelines = {
  createTitle: function pipelines_createTitle(_key?: boolean): string {
    return t("pipelines.createTitle", {}, _key);
  },
  computeTitle: function pipelines_computeTitle(_key?: boolean): string {
    return t("pipelines.computeTitle", {}, _key);
  },
  linkText: function pipelines_linkText(_key?: boolean): string {
    return t("pipelines.linkText", {}, _key);
  },
  editPipelineSuccess: function pipelines_editPipelineSuccess(
    name: string,
    _key?: boolean
  ): string {
    return t("pipelines.editPipelineSuccess", { name }, _key);
  },
  editTitle: function pipelines_editTitle(_key?: boolean): string {
    return t("pipelines.editTitle", {}, _key);
  },
  detailText: function pipelines_detailText(_key?: boolean): string {
    return t("pipelines.detailText", {}, _key);
  },
  pipelineRunLoggingTitle: function pipelines_pipelineRunLoggingTitle(
    _key?: boolean
  ): string {
    return t("pipelines.pipelineRunLoggingTitle", {}, _key);
  },
  deleteTitle: function pipelines_deleteTitle(_key?: boolean): string {
    return t("pipelines.deleteTitle", {}, _key);
  },
  deleteFailed: function pipelines_deleteFailed(_key?: boolean): string {
    return t("pipelines.deleteFailed", {}, _key);
  },
  deleteConfirmation: function pipelines_deleteConfirmation(
    displayName: string,
    _key?: boolean
  ): string {
    return t("pipelines.deleteConfirmation", { displayName }, _key);
  },
  deleteAgreement: function pipelines_deleteAgreement(
    confirmationText: string,
    _key?: boolean
  ): string {
    return t("pipelines.deleteAgreement", { confirmationText }, _key);
  },
  deleteWarningTitleWithDeletePipelineRun:
    function pipelines_deleteWarningTitleWithDeletePipelineRun(
      _key?: boolean
    ): string {
      return t("pipelines.deleteWarningTitleWithDeletePipelineRun", {}, _key);
    },
  deleteWarningTitle: function pipelines_deleteWarningTitle(
    _key?: boolean
  ): string {
    return t("pipelines.deleteWarningTitle", {}, _key);
  },
  deleteWarningTitleWithDeleteJobRun:
    function pipelines_deleteWarningTitleWithDeleteJobRun(
      _key?: boolean
    ): string {
      return t("pipelines.deleteWarningTitleWithDeleteJobRun", {}, _key);
    },
  deleteInProgress: function pipelines_deleteInProgress(
    _key?: boolean
  ): string {
    return t("pipelines.deleteInProgress", {}, _key);
  },
  shapeText: function pipelines_shapeText(_key?: boolean): string {
    return t("pipelines.shapeText", {}, _key);
  },
  deleteRelatedPipelineRuns: function pipelines_deleteRelatedPipelineRuns(
    _key?: boolean
  ): string {
    return t("pipelines.deleteRelatedPipelineRuns", {}, _key);
  },
  deleteRelatedJobRuns: function pipelines_deleteRelatedJobRuns(
    _key?: boolean
  ): string {
    return t("pipelines.deleteRelatedJobRuns", {}, _key);
  },
  removeResourcesWarning: function pipelines_removeResourcesWarning(
    _key?: boolean
  ): string {
    return t("pipelines.removeResourcesWarning", {}, _key);
  },
  deletePipelineRunWarning: function pipelines_deletePipelineRunWarning(
    _key?: boolean
  ): string {
    return t("pipelines.deletePipelineRunWarning", {}, _key);
  },
  uploadArtifactFailure: function pipelines_uploadArtifactFailure(
    _key?: boolean
  ): string {
    return t("pipelines.uploadArtifactFailure", {}, _key);
  },
  pipelineStepArtifactWarning: function pipelines_pipelineStepArtifactWarning(
    _key?: boolean
  ): string {
    return t("pipelines.pipelineStepArtifactWarning", {}, _key);
  },
  actions: {
    edit: function pipelines_actions_edit(_key?: boolean): string {
      return t("pipelines.actions.edit", {}, _key);
    },
    delete: function pipelines_actions_delete(_key?: boolean): string {
      return t("pipelines.actions.delete", {}, _key);
    },
    select: function pipelines_actions_select(_key?: boolean): string {
      return t("pipelines.actions.select", {}, _key);
    },
    create: function pipelines_actions_create(_key?: boolean): string {
      return t("pipelines.actions.create", {}, _key);
    },
    moveResource: function pipelines_actions_moveResource(
      _key?: boolean
    ): string {
      return t("pipelines.actions.moveResource", {}, _key);
    },
    addEnvironmentVariable: function pipelines_actions_addEnvironmentVariable(
      _key?: boolean
    ): string {
      return t("pipelines.actions.addEnvironmentVariable", {}, _key);
    },
    addSteps: function pipelines_actions_addSteps(_key?: boolean): string {
      return t("pipelines.actions.addSteps", {}, _key);
    },
    editJob: function pipelines_actions_editJob(_key?: boolean): string {
      return t("pipelines.actions.editJob", {}, _key);
    },
  },
  labels: {
    maxRuntimeInMinutes: function pipelines_labels_maxRuntimeInMinutes(
      _key?: boolean
    ): string {
      return t("pipelines.labels.maxRuntimeInMinutes", {}, _key);
    },
    dependsOn: function pipelines_labels_dependsOn(_key?: boolean): string {
      return t("pipelines.labels.dependsOn", {}, _key);
    },
    stepName: function pipelines_labels_stepName(_key?: boolean): string {
      return t("pipelines.labels.stepName", {}, _key);
    },
    stepArtifact: function pipelines_labels_stepArtifact(
      _key?: boolean
    ): string {
      return t("pipelines.labels.stepArtifact", {}, _key);
    },
    stepDescription: function pipelines_labels_stepDescription(
      _key?: boolean
    ): string {
      return t("pipelines.labels.stepDescription", {}, _key);
    },
    selectJob: function pipelines_labels_selectJob(_key?: boolean): string {
      return t("pipelines.labels.selectJob", {}, _key);
    },
    loggingSelect: function pipelines_labels_loggingSelect(
      _key?: boolean
    ): string {
      return t("pipelines.labels.loggingSelect", {}, _key);
    },
    description: function pipelines_labels_description(_key?: boolean): string {
      return t("pipelines.labels.description", {}, _key);
    },
    pipelineSteps: function pipelines_labels_pipelineSteps(
      _key?: boolean
    ): string {
      return t("pipelines.labels.pipelineSteps", {}, _key);
    },
    defaultConfiguration: function pipelines_labels_defaultConfiguration(
      _key?: boolean
    ): string {
      return t("pipelines.labels.defaultConfiguration", {}, _key);
    },
    stepConfiguration: function pipelines_labels_stepConfiguration(
      _key?: boolean
    ): string {
      return t("pipelines.labels.stepConfiguration", {}, _key);
    },
    name: function pipelines_labels_name(_key?: boolean): string {
      return t("pipelines.labels.name", {}, _key);
    },
    state: function pipelines_labels_state(_key?: boolean): string {
      return t("pipelines.labels.state", {}, _key);
    },
    createdBy: function pipelines_labels_createdBy(_key?: boolean): string {
      return t("pipelines.labels.createdBy", {}, _key);
    },
    timeCreated: function pipelines_labels_timeCreated(_key?: boolean): string {
      return t("pipelines.labels.timeCreated", {}, _key);
    },
    numberShowingText: function pipelines_labels_numberShowingText(
      numberShowing: number,
      _key?: boolean
    ): string {
      return t("pipelines.labels.numberShowingText", { numberShowing }, _key);
    },
    pipelineDetails: function pipelines_labels_pipelineDetails(
      _key?: boolean
    ): string {
      return t("pipelines.labels.pipelineDetails", {}, _key);
    },
    pipelineInformation: function pipelines_labels_pipelineInformation(
      _key?: boolean
    ): string {
      return t("pipelines.labels.pipelineInformation", {}, _key);
    },
    pipelineRunLoggingSelect:
      function pipelines_labels_pipelineRunLoggingSelect(
        _key?: boolean
      ): string {
        return t("pipelines.labels.pipelineRunLoggingSelect", {}, _key);
      },
    compartment: function pipelines_labels_compartment(_key?: boolean): string {
      return t("pipelines.labels.compartment", {}, _key);
    },
    environmentVariableKey: function pipelines_labels_environmentVariableKey(
      _key?: boolean
    ): string {
      return t("pipelines.labels.environmentVariableKey", {}, _key);
    },
    environmentVariableValue:
      function pipelines_labels_environmentVariableValue(
        _key?: boolean
      ): string {
        return t("pipelines.labels.environmentVariableValue", {}, _key);
      },
    commandLineArguments: function pipelines_labels_commandLineArguments(
      _key?: boolean
    ): string {
      return t("pipelines.labels.commandLineArguments", {}, _key);
    },
    uploadArtifact: function pipelines_labels_uploadArtifact(
      _key?: boolean
    ): string {
      return t("pipelines.labels.uploadArtifact", {}, _key);
    },
    fileSelectorText: function pipelines_labels_fileSelectorText(
      _key?: boolean
    ): string {
      return t("pipelines.labels.fileSelectorText", {}, _key);
    },
    fileSelectorBrowseLinkText:
      function pipelines_labels_fileSelectorBrowseLinkText(
        _key?: boolean
      ): string {
        return t("pipelines.labels.fileSelectorBrowseLinkText", {}, _key);
      },
    uploadFileTypeRequirementText:
      function pipelines_labels_uploadFileTypeRequirementText(
        _key?: boolean
      ): string {
        return t("pipelines.labels.uploadFileTypeRequirementText", {}, _key);
      },
    uploadFileTypeError: function pipelines_labels_uploadFileTypeError(
      _key?: boolean
    ): string {
      return t("pipelines.labels.uploadFileTypeError", {}, _key);
    },
    entryPoint: function pipelines_labels_entryPoint(_key?: boolean): string {
      return t("pipelines.labels.entryPoint", {}, _key);
    },
    condaEnvironmentType: function pipelines_labels_condaEnvironmentType(
      _key?: boolean
    ): string {
      return t("pipelines.labels.condaEnvironmentType", {}, _key);
    },
    condaEnvironmentSlugName:
      function pipelines_labels_condaEnvironmentSlugName(
        _key?: boolean
      ): string {
        return t("pipelines.labels.condaEnvironmentSlugName", {}, _key);
      },
    blockStorage: function pipelines_labels_blockStorage(
      _key?: boolean
    ): string {
      return t("pipelines.labels.blockStorage", {}, _key);
    },
    computeSelect: function pipelines_labels_computeSelect(
      _key?: boolean
    ): string {
      return t("pipelines.labels.computeSelect", {}, _key);
    },
    infrastructureConfiguration:
      function pipelines_labels_infrastructureConfiguration(
        _key?: boolean
      ): string {
        return t("pipelines.labels.infrastructureConfiguration", {}, _key);
      },
    shapeName: function pipelines_labels_shapeName(_key?: boolean): string {
      return t("pipelines.labels.shapeName", {}, _key);
    },
    numberOCPUs: function pipelines_labels_numberOCPUs(_key?: boolean): string {
      return t("pipelines.labels.numberOCPUs", {}, _key);
    },
    memoryInGBs: function pipelines_labels_memoryInGBs(_key?: boolean): string {
      return t("pipelines.labels.memoryInGBs", {}, _key);
    },
  },
  hints: {
    uniqueStepName: function pipelines_hints_uniqueStepName(
      _key?: boolean
    ): string {
      return t("pipelines.hints.uniqueStepName", {}, _key);
    },
    noJobSelected: function pipelines_hints_noJobSelected(
      _key?: boolean
    ): string {
      return t("pipelines.hints.noJobSelected", {}, _key);
    },
    maxRuntimeInMinutes: function pipelines_hints_maxRuntimeInMinutes(
      minSize: number,
      maxSize: number,
      _key?: boolean
    ): string {
      return t(
        "pipelines.hints.maxRuntimeInMinutes",
        { minSize, maxSize },
        _key
      );
    },
    uploadStepArtifact: function pipelines_hints_uploadStepArtifact(
      _key?: boolean
    ): string {
      return t("pipelines.hints.uploadStepArtifact", {}, _key);
    },
    entryPoint: function pipelines_hints_entryPoint(_key?: boolean): string {
      return t("pipelines.hints.entryPoint", {}, _key);
    },
    computeShape: function pipelines_hints_computeShape(
      _key?: boolean
    ): string {
      return t("pipelines.hints.computeShape", {}, _key);
    },
    blockStorage: function pipelines_hints_blockStorage(
      _key?: boolean
    ): string {
      return t("pipelines.hints.blockStorage", {}, _key);
    },
    stepEntryPoint: function pipelines_hints_stepEntryPoint(
      _key?: boolean
    ): string {
      return t("pipelines.hints.stepEntryPoint", {}, _key);
    },
  },
  tooltips: {
    autoLogCreation: function pipelines_tooltips_autoLogCreation(
      _key?: boolean
    ): string {
      return t("pipelines.tooltips.autoLogCreation", {}, _key);
    },
    environmentVariables_1: function pipelines_tooltips_environmentVariables_1(
      _key?: boolean
    ): string {
      return t("pipelines.tooltips.environmentVariables_1", {}, _key);
    },
    environmentVariables_2: function pipelines_tooltips_environmentVariables_2(
      conda_env_type: string,
      service: string,
      published: string,
      _key?: boolean
    ): string {
      return t(
        "pipelines.tooltips.environmentVariables_2",
        { conda_env_type, service, published },
        _key
      );
    },
    environmentVariables_3: function pipelines_tooltips_environmentVariables_3(
      conda_env_slug: string,
      _key?: boolean
    ): string {
      return t(
        "pipelines.tooltips.environmentVariables_3",
        { conda_env_slug },
        _key
      );
    },
    environmentVariables_4: function pipelines_tooltips_environmentVariables_4(
      conda_env_region: string,
      _key?: boolean
    ): string {
      return t(
        "pipelines.tooltips.environmentVariables_4",
        { conda_env_region },
        _key
      );
    },
    environmentVariables_5: function pipelines_tooltips_environmentVariables_5(
      conda_env_object_name: string,
      _key?: boolean
    ): string {
      return t(
        "pipelines.tooltips.environmentVariables_5",
        { conda_env_object_name },
        _key
      );
    },
    environmentVariables_6: function pipelines_tooltips_environmentVariables_6(
      conda_env_namespace: string,
      _key?: boolean
    ): string {
      return t(
        "pipelines.tooltips.environmentVariables_6",
        { conda_env_namespace },
        _key
      );
    },
    environmentVariables_7: function pipelines_tooltips_environmentVariables_7(
      conda_env_bucket: string,
      _key?: boolean
    ): string {
      return t(
        "pipelines.tooltips.environmentVariables_7",
        { conda_env_bucket },
        _key
      );
    },
  },
  logs: {
    linkText: function pipelines_logs_linkText(_key?: boolean): string {
      return t("pipelines.logs.linkText", {}, _key);
    },
  },
};
export const jobs = {
  linkText: function jobs_linkText(_key?: boolean): string {
    return t("jobs.linkText", {}, _key);
  },
  detailText: function jobs_detailText(_key?: boolean): string {
    return t("jobs.detailText", {}, _key);
  },
  genericMissingArtifact: function jobs_genericMissingArtifact(
    _key?: boolean
  ): string {
    return t("jobs.genericMissingArtifact", {}, _key);
  },
  missingArtifact: function jobs_missingArtifact(_key?: boolean): string {
    return t("jobs.missingArtifact", {}, _key);
  },
  shapeText: function jobs_shapeText(_key?: boolean): string {
    return t("jobs.shapeText", {}, _key);
  },
  sizeInGigabytes: function jobs_sizeInGigabytes(
    size: number,
    _key?: boolean
  ): string {
    return t("jobs.sizeInGigabytes", { size }, _key);
  },
  createTitle: function jobs_createTitle(_key?: boolean): string {
    return t("jobs.createTitle", {}, _key);
  },
  editTitle: function jobs_editTitle(_key?: boolean): string {
    return t("jobs.editTitle", {}, _key);
  },
  deleteFailed: function jobs_deleteFailed(_key?: boolean): string {
    return t("jobs.deleteFailed", {}, _key);
  },
  deleteTitle: function jobs_deleteTitle(_key?: boolean): string {
    return t("jobs.deleteTitle", {}, _key);
  },
  deleteConfirmation: function jobs_deleteConfirmation(
    displayName: string,
    _key?: boolean
  ): string {
    return t("jobs.deleteConfirmation", { displayName }, _key);
  },
  deleteWarningTitle: function jobs_deleteWarningTitle(_key?: boolean): string {
    return t("jobs.deleteWarningTitle", {}, _key);
  },
  deleteAgreement: function jobs_deleteAgreement(
    confirmationText: string,
    _key?: boolean
  ): string {
    return t("jobs.deleteAgreement", { confirmationText }, _key);
  },
  deleteInProgress: function jobs_deleteInProgress(_key?: boolean): string {
    return t("jobs.deleteInProgress", {}, _key);
  },
  editJobSuccess: function jobs_editJobSuccess(
    name: string,
    _key?: boolean
  ): string {
    return t("jobs.editJobSuccess", { name }, _key);
  },
  computeTitle: function jobs_computeTitle(_key?: boolean): string {
    return t("jobs.computeTitle", {}, _key);
  },
  loggingTitle: function jobs_loggingTitle(_key?: boolean): string {
    return t("jobs.loggingTitle", {}, _key);
  },
  jobRunLoggingTitle: function jobs_jobRunLoggingTitle(_key?: boolean): string {
    return t("jobs.jobRunLoggingTitle", {}, _key);
  },
  loggingEnabled: function jobs_loggingEnabled(_key?: boolean): string {
    return t("jobs.loggingEnabled", {}, _key);
  },
  loggingDisabled: function jobs_loggingDisabled(_key?: boolean): string {
    return t("jobs.loggingDisabled", {}, _key);
  },
  selectLogging: function jobs_selectLogging(_key?: boolean): string {
    return t("jobs.selectLogging", {}, _key);
  },
  noLogGroupsFound: function jobs_noLogGroupsFound(_key?: boolean): string {
    return t("jobs.noLogGroupsFound", {}, _key);
  },
  noLogsFound: function jobs_noLogsFound(_key?: boolean): string {
    return t("jobs.noLogsFound", {}, _key);
  },
  noDefaultLogGroupSelected: function jobs_noDefaultLogGroupSelected(
    _key?: boolean
  ): string {
    return t("jobs.noDefaultLogGroupSelected", {}, _key);
  },
  loggingIsNotEnabled: function jobs_loggingIsNotEnabled(
    _key?: boolean
  ): string {
    return t("jobs.loggingIsNotEnabled", {}, _key);
  },
  noDefaultLogSelected: function jobs_noDefaultLogSelected(
    _key?: boolean
  ): string {
    return t("jobs.noDefaultLogSelected", {}, _key);
  },
  autoLoggingEnabled: function jobs_autoLoggingEnabled(_key?: boolean): string {
    return t("jobs.autoLoggingEnabled", {}, _key);
  },
  loggingConfiguration: function jobs_loggingConfiguration(
    _key?: boolean
  ): string {
    return t("jobs.loggingConfiguration", {}, _key);
  },
  loggingConfigurationOverride: function jobs_loggingConfigurationOverride(
    _key?: boolean
  ): string {
    return t("jobs.loggingConfigurationOverride", {}, _key);
  },
  successfullyUploadedArtifact: function jobs_successfullyUploadedArtifact(
    _key?: boolean
  ): string {
    return t("jobs.successfullyUploadedArtifact", {}, _key);
  },
  defaultLogGroup: function jobs_defaultLogGroup(
    groupName: string,
    _key?: boolean
  ): string {
    return t("jobs.defaultLogGroup", { groupName }, _key);
  },
  defaultLogGroupAndAutoLog: function jobs_defaultLogGroupAndAutoLog(
    groupName: string,
    _key?: boolean
  ): string {
    return t("jobs.defaultLogGroupAndAutoLog", { groupName }, _key);
  },
  defaultLogGroupAndLog: function jobs_defaultLogGroupAndLog(
    groupName: string,
    logName: string,
    _key?: boolean
  ): string {
    return t("jobs.defaultLogGroupAndLog", { groupName, logName }, _key);
  },
  bringYourOwnContainer: function jobs_bringYourOwnContainer(
    _key?: boolean
  ): string {
    return t("jobs.bringYourOwnContainer", {}, _key);
  },
  nullableArtifactForByoc: function jobs_nullableArtifactForByoc(
    _key?: boolean
  ): string {
    return t("jobs.nullableArtifactForByoc", {}, _key);
  },
  actions: {
    create: function jobs_actions_create(_key?: boolean): string {
      return t("jobs.actions.create", {}, _key);
    },
    edit: function jobs_actions_edit(_key?: boolean): string {
      return t("jobs.actions.edit", {}, _key);
    },
    downloadArtifact: function jobs_actions_downloadArtifact(
      _key?: boolean
    ): string {
      return t("jobs.actions.downloadArtifact", {}, _key);
    },
    uploadArtifact: function jobs_actions_uploadArtifact(
      _key?: boolean
    ): string {
      return t("jobs.actions.uploadArtifact", {}, _key);
    },
    delete: function jobs_actions_delete(_key?: boolean): string {
      return t("jobs.actions.delete", {}, _key);
    },
    retryUpload: function jobs_actions_retryUpload(_key?: boolean): string {
      return t("jobs.actions.retryUpload", {}, _key);
    },
    addEnvironmentVariable: function jobs_actions_addEnvironmentVariable(
      _key?: boolean
    ): string {
      return t("jobs.actions.addEnvironmentVariable", {}, _key);
    },
    select: function jobs_actions_select(_key?: boolean): string {
      return t("jobs.actions.select", {}, _key);
    },
    moveResource: function jobs_actions_moveResource(_key?: boolean): string {
      return t("jobs.actions.moveResource", {}, _key);
    },
    editArtifact: function jobs_actions_editArtifact(_key?: boolean): string {
      return t("jobs.actions.editArtifact", {}, _key);
    },
  },
  labels: {
    numberShowingText: function jobs_labels_numberShowingText(
      numberShowing: number,
      _key?: boolean
    ): string {
      return t("jobs.labels.numberShowingText", { numberShowing }, _key);
    },
    name: function jobs_labels_name(_key?: boolean): string {
      return t("jobs.labels.name", {}, _key);
    },
    state: function jobs_labels_state(_key?: boolean): string {
      return t("jobs.labels.state", {}, _key);
    },
    createdBy: function jobs_labels_createdBy(_key?: boolean): string {
      return t("jobs.labels.createdBy", {}, _key);
    },
    timeCreated: function jobs_labels_timeCreated(_key?: boolean): string {
      return t("jobs.labels.timeCreated", {}, _key);
    },
    jobArtifact: function jobs_labels_jobArtifact(_key?: boolean): string {
      return t("jobs.labels.jobArtifact", {}, _key);
    },
    jobInformation: function jobs_labels_jobInformation(
      _key?: boolean
    ): string {
      return t("jobs.labels.jobInformation", {}, _key);
    },
    jobInfrastructure: function jobs_labels_jobInfrastructure(
      _key?: boolean
    ): string {
      return t("jobs.labels.jobInfrastructure", {}, _key);
    },
    computeShape: function jobs_labels_computeShape(_key?: boolean): string {
      return t("jobs.labels.computeShape", {}, _key);
    },
    storage: function jobs_labels_storage(_key?: boolean): string {
      return t("jobs.labels.storage", {}, _key);
    },
    vcn: function jobs_labels_vcn(_key?: boolean): string {
      return t("jobs.labels.vcn", {}, _key);
    },
    subnet: function jobs_labels_subnet(_key?: boolean): string {
      return t("jobs.labels.subnet", {}, _key);
    },
    defaultConfiguration: function jobs_labels_defaultConfiguration(
      _key?: boolean
    ): string {
      return t("jobs.labels.defaultConfiguration", {}, _key);
    },
    commandLineArguments: function jobs_labels_commandLineArguments(
      _key?: boolean
    ): string {
      return t("jobs.labels.commandLineArguments", {}, _key);
    },
    maxRuntimeInMinutes: function jobs_labels_maxRuntimeInMinutes(
      _key?: boolean
    ): string {
      return t("jobs.labels.maxRuntimeInMinutes", {}, _key);
    },
    customEnvironmentVariables: function jobs_labels_customEnvironmentVariables(
      _key?: boolean
    ): string {
      return t("jobs.labels.customEnvironmentVariables", {}, _key);
    },
    description: function jobs_labels_description(_key?: boolean): string {
      return t("jobs.labels.description", {}, _key);
    },
    objectStorageInfo: function jobs_labels_objectStorageInfo(
      gb: number,
      _key?: boolean
    ): string {
      return t("jobs.labels.objectStorageInfo", { gb }, _key);
    },
    compartment: function jobs_labels_compartment(_key?: boolean): string {
      return t("jobs.labels.compartment", {}, _key);
    },
    fileSelectorText: function jobs_labels_fileSelectorText(
      _key?: boolean
    ): string {
      return t("jobs.labels.fileSelectorText", {}, _key);
    },
    fileSelectorBrowseLinkText: function jobs_labels_fileSelectorBrowseLinkText(
      _key?: boolean
    ): string {
      return t("jobs.labels.fileSelectorBrowseLinkText", {}, _key);
    },
    instanceShape: function jobs_labels_instanceShape(_key?: boolean): string {
      return t("jobs.labels.instanceShape", {}, _key);
    },
    blockStorageSize: function jobs_labels_blockStorageSize(
      minSize: number,
      maxSize: number,
      maxSizeTB: number,
      _key?: boolean
    ): string {
      return t(
        "jobs.labels.blockStorageSize",
        { minSize, maxSize, maxSizeTB },
        _key
      );
    },
    uploadJobArtifact: function jobs_labels_uploadJobArtifact(
      _key?: boolean
    ): string {
      return t("jobs.labels.uploadJobArtifact", {}, _key);
    },
    additionalStorage: function jobs_labels_additionalStorage(
      _key?: boolean
    ): string {
      return t("jobs.labels.additionalStorage", {}, _key);
    },
    environmentVariableKey: function jobs_labels_environmentVariableKey(
      _key?: boolean
    ): string {
      return t("jobs.labels.environmentVariableKey", {}, _key);
    },
    byocVariableKey: function jobs_labels_byocVariableKey(
      _key?: boolean
    ): string {
      return t("jobs.labels.byocVariableKey", {}, _key);
    },
    environmentVariableValue: function jobs_labels_environmentVariableValue(
      _key?: boolean
    ): string {
      return t("jobs.labels.environmentVariableValue", {}, _key);
    },
    shapeName: function jobs_labels_shapeName(_key?: boolean): string {
      return t("jobs.labels.shapeName", {}, _key);
    },
    numberOCPUs: function jobs_labels_numberOCPUs(_key?: boolean): string {
      return t("jobs.labels.numberOCPUs", {}, _key);
    },
    memoryInGBs: function jobs_labels_memoryInGBs(_key?: boolean): string {
      return t("jobs.labels.memoryInGBs", {}, _key);
    },
    vmShape: function jobs_labels_vmShape(_key?: boolean): string {
      return t("jobs.labels.vmShape", {}, _key);
    },
    computeSelect: function jobs_labels_computeSelect(_key?: boolean): string {
      return t("jobs.labels.computeSelect", {}, _key);
    },
    computeSelectLabel: function jobs_labels_computeSelectLabel(
      cores: number,
      gb: number,
      _key?: boolean
    ): string {
      return t("jobs.labels.computeSelectLabel", { cores, gb }, _key);
    },
    loggingSelect: function jobs_labels_loggingSelect(_key?: boolean): string {
      return t("jobs.labels.loggingSelect", {}, _key);
    },
    jobRunLoggingSelect: function jobs_labels_jobRunLoggingSelect(
      _key?: boolean
    ): string {
      return t("jobs.labels.jobRunLoggingSelect", {}, _key);
    },
    enableLogging: function jobs_labels_enableLogging(_key?: boolean): string {
      return t("jobs.labels.enableLogging", {}, _key);
    },
    automaticLogging: function jobs_labels_automaticLogging(
      _key?: boolean
    ): string {
      return t("jobs.labels.automaticLogging", {}, _key);
    },
    enableAutoLogCreation: function jobs_labels_enableAutoLogCreation(
      _key?: boolean
    ): string {
      return t("jobs.labels.enableAutoLogCreation", {}, _key);
    },
    selectALog: function jobs_labels_selectALog(_key?: boolean): string {
      return t("jobs.labels.selectALog", {}, _key);
    },
    logGroup: function jobs_labels_logGroup(_key?: boolean): string {
      return t("jobs.labels.logGroup", {}, _key);
    },
    logName: function jobs_labels_logName(_key?: boolean): string {
      return t("jobs.labels.logName", {}, _key);
    },
    noLogGroupSelected: function jobs_labels_noLogGroupSelected(
      _key?: boolean
    ): string {
      return t("jobs.labels.noLogGroupSelected", {}, _key);
    },
    noLogSelected: function jobs_labels_noLogSelected(_key?: boolean): string {
      return t("jobs.labels.noLogSelected", {}, _key);
    },
    defaultLogGroup: function jobs_labels_defaultLogGroup(
      _key?: boolean
    ): string {
      return t("jobs.labels.defaultLogGroup", {}, _key);
    },
    defaultLog: function jobs_labels_defaultLog(_key?: boolean): string {
      return t("jobs.labels.defaultLog", {}, _key);
    },
    loggingDetails: function jobs_labels_loggingDetails(
      _key?: boolean
    ): string {
      return t("jobs.labels.loggingDetails", {}, _key);
    },
    log: function jobs_labels_log(_key?: boolean): string {
      return t("jobs.labels.log", {}, _key);
    },
    uploadFileTypeRequirementText:
      function jobs_labels_uploadFileTypeRequirementText(
        _key?: boolean
      ): string {
        return t("jobs.labels.uploadFileTypeRequirementText", {}, _key);
      },
    uploadFileTypeError: function jobs_labels_uploadFileTypeError(
      _key?: boolean
    ): string {
      return t("jobs.labels.uploadFileTypeError", {}, _key);
    },
    jobDetails: function jobs_labels_jobDetails(_key?: boolean): string {
      return t("jobs.labels.jobDetails", {}, _key);
    },
  },
  hints: {
    vcnMissingPermissionsHoverText:
      function jobs_hints_vcnMissingPermissionsHoverText(
        _key?: boolean
      ): string {
        return t("jobs.hints.vcnMissingPermissionsHoverText", {}, _key);
      },
    jobArtifact: function jobs_hints_jobArtifact(
      maxSize: number,
      _key?: boolean
    ): string {
      return t("jobs.hints.jobArtifact", { maxSize }, _key);
    },
    storageHint: function jobs_hints_storageHint(
      minSize: number,
      maxSize: number,
      _key?: boolean
    ): string {
      return t("jobs.hints.storageHint", { minSize, maxSize }, _key);
    },
    maxRuntimeInMinutes: function jobs_hints_maxRuntimeInMinutes(
      minSize: number,
      maxSize: number,
      _key?: boolean
    ): string {
      return t("jobs.hints.maxRuntimeInMinutes", { minSize, maxSize }, _key);
    },
  },
  shapeFamilies: {
    intelSkylake: {
      label: function jobs_shapeFamilies_intelSkylake_label(
        _key?: boolean
      ): string {
        return t("jobs.shapeFamilies.intelSkylake.label", {}, _key);
      },
      description: function jobs_shapeFamilies_intelSkylake_description(
        _key?: boolean
      ): string {
        return t("jobs.shapeFamilies.intelSkylake.description", {}, _key);
      },
    },
  },
  selectPanes: {
    computeSelect: function jobs_selectPanes_computeSelect(
      _key?: boolean
    ): string {
      return t("jobs.selectPanes.computeSelect", {}, _key);
    },
  },
  tooltips: {
    autoLogCreation: function jobs_tooltips_autoLogCreation(
      _key?: boolean
    ): string {
      return t("jobs.tooltips.autoLogCreation", {}, _key);
    },
    environmentVariables_1: function jobs_tooltips_environmentVariables_1(
      _key?: boolean
    ): string {
      return t("jobs.tooltips.environmentVariables_1", {}, _key);
    },
    environmentVariables_2: function jobs_tooltips_environmentVariables_2(
      conda_env_type: string,
      service: string,
      published: string,
      _key?: boolean
    ): string {
      return t(
        "jobs.tooltips.environmentVariables_2",
        { conda_env_type, service, published },
        _key
      );
    },
    environmentVariables_3: function jobs_tooltips_environmentVariables_3(
      conda_env_slug: string,
      _key?: boolean
    ): string {
      return t(
        "jobs.tooltips.environmentVariables_3",
        { conda_env_slug },
        _key
      );
    },
    environmentVariables_4: function jobs_tooltips_environmentVariables_4(
      conda_env_region: string,
      _key?: boolean
    ): string {
      return t(
        "jobs.tooltips.environmentVariables_4",
        { conda_env_region },
        _key
      );
    },
    environmentVariables_5: function jobs_tooltips_environmentVariables_5(
      conda_env_object_name: string,
      _key?: boolean
    ): string {
      return t(
        "jobs.tooltips.environmentVariables_5",
        { conda_env_object_name },
        _key
      );
    },
    environmentVariables_6: function jobs_tooltips_environmentVariables_6(
      conda_env_namespace: string,
      _key?: boolean
    ): string {
      return t(
        "jobs.tooltips.environmentVariables_6",
        { conda_env_namespace },
        _key
      );
    },
    environmentVariables_7: function jobs_tooltips_environmentVariables_7(
      conda_env_bucket: string,
      _key?: boolean
    ): string {
      return t(
        "jobs.tooltips.environmentVariables_7",
        { conda_env_bucket },
        _key
      );
    },
    environmentVariables_8: function jobs_tooltips_environmentVariables_8(
      job_run_entrypoint: string,
      zip: string,
      tar: string,
      _key?: boolean
    ): string {
      return t(
        "jobs.tooltips.environmentVariables_8",
        { job_run_entrypoint, zip, tar },
        _key
      );
    },
    environmentVariables_9: function jobs_tooltips_environmentVariables_9(
      container_entrypoint: string,
      ENTRYPOINT: string,
      _key?: boolean
    ): string {
      return t(
        "jobs.tooltips.environmentVariables_9",
        { container_entrypoint, ENTRYPOINT },
        _key
      );
    },
    environmentVariables_10: function jobs_tooltips_environmentVariables_10(
      container_cmd: string,
      CMD: string,
      _key?: boolean
    ): string {
      return t(
        "jobs.tooltips.environmentVariables_10",
        { container_cmd, CMD },
        _key
      );
    },
  },
};
export const jobRuns = {
  linkText: function jobRuns_linkText(_key?: boolean): string {
    return t("jobRuns.linkText", {}, _key);
  },
  detailText: function jobRuns_detailText(_key?: boolean): string {
    return t("jobRuns.detailText", {}, _key);
  },
  shapeText: function jobRuns_shapeText(_key?: boolean): string {
    return t("jobRuns.shapeText", {}, _key);
  },
  createJobRunSuccess: function jobRuns_createJobRunSuccess(
    name: string,
    _key?: boolean
  ): string {
    return t("jobRuns.createJobRunSuccess", { name }, _key);
  },
  editTitle: function jobRuns_editTitle(_key?: boolean): string {
    return t("jobRuns.editTitle", {}, _key);
  },
  cancelTitle: function jobRuns_cancelTitle(_key?: boolean): string {
    return t("jobRuns.cancelTitle", {}, _key);
  },
  cancelConfirmation: function jobRuns_cancelConfirmation(
    name: string,
    _key?: boolean
  ): string {
    return t("jobRuns.cancelConfirmation", { name }, _key);
  },
  deleteTitle: function jobRuns_deleteTitle(_key?: boolean): string {
    return t("jobRuns.deleteTitle", {}, _key);
  },
  deleteConfirmation: function jobRuns_deleteConfirmation(
    name: string,
    _key?: boolean
  ): string {
    return t("jobRuns.deleteConfirmation", { name }, _key);
  },
  loggingOverrideConfigured: function jobRuns_loggingOverrideConfigured(
    _key?: boolean
  ): string {
    return t("jobRuns.loggingOverrideConfigured", {}, _key);
  },
  cancelAgreement: function jobRuns_cancelAgreement(
    confirmationText: string,
    _key?: boolean
  ): string {
    return t("jobRuns.cancelAgreement", { confirmationText }, _key);
  },
  actions: {
    start: function jobRuns_actions_start(_key?: boolean): string {
      return t("jobRuns.actions.start", {}, _key);
    },
    edit: function jobRuns_actions_edit(_key?: boolean): string {
      return t("jobRuns.actions.edit", {}, _key);
    },
    cancel: function jobRuns_actions_cancel(_key?: boolean): string {
      return t("jobRuns.actions.cancel", {}, _key);
    },
    confirm: function jobRuns_actions_confirm(_key?: boolean): string {
      return t("jobRuns.actions.confirm", {}, _key);
    },
    delete: function jobRuns_actions_delete(_key?: boolean): string {
      return t("jobRuns.actions.delete", {}, _key);
    },
    clone: function jobRuns_actions_clone(_key?: boolean): string {
      return t("jobRuns.actions.clone", {}, _key);
    },
    cloneAJobRun: function jobRuns_actions_cloneAJobRun(
      _key?: boolean
    ): string {
      return t("jobRuns.actions.cloneAJobRun", {}, _key);
    },
    cloneJobRun: function jobRuns_actions_cloneJobRun(_key?: boolean): string {
      return t("jobRuns.actions.cloneJobRun", {}, _key);
    },
  },
  labels: {
    name: function jobRuns_labels_name(_key?: boolean): string {
      return t("jobRuns.labels.name", {}, _key);
    },
    state: function jobRuns_labels_state(_key?: boolean): string {
      return t("jobRuns.labels.state", {}, _key);
    },
    lifecycleDetails: function jobRuns_labels_lifecycleDetails(
      _key?: boolean
    ): string {
      return t("jobRuns.labels.lifecycleDetails", {}, _key);
    },
    createdBy: function jobRuns_labels_createdBy(_key?: boolean): string {
      return t("jobRuns.labels.createdBy", {}, _key);
    },
    timeAccepted: function jobRuns_labels_timeAccepted(_key?: boolean): string {
      return t("jobRuns.labels.timeAccepted", {}, _key);
    },
    numberShowingText: function jobRuns_labels_numberShowingText(
      numberShowing: number,
      _key?: boolean
    ): string {
      return t("jobRuns.labels.numberShowingText", { numberShowing }, _key);
    },
    jobRunInformation: function jobRuns_labels_jobRunInformation(
      _key?: boolean
    ): string {
      return t("jobRuns.labels.jobRunInformation", {}, _key);
    },
    timeStarted: function jobRuns_labels_timeStarted(_key?: boolean): string {
      return t("jobRuns.labels.timeStarted", {}, _key);
    },
    timeFinished: function jobRuns_labels_timeFinished(_key?: boolean): string {
      return t("jobRuns.labels.timeFinished", {}, _key);
    },
    jobConfigurationOverride: function jobRuns_labels_jobConfigurationOverride(
      _key?: boolean
    ): string {
      return t("jobRuns.labels.jobConfigurationOverride", {}, _key);
    },
    runtimeConfiguration: function jobRuns_labels_runtimeConfiguration(
      _key?: boolean
    ): string {
      return t("jobRuns.labels.runtimeConfiguration", {}, _key);
    },
    overrideConfiguration: function jobRuns_labels_overrideConfiguration(
      _key?: boolean
    ): string {
      return t("jobRuns.labels.overrideConfiguration", {}, _key);
    },
    jobRunDetails: function jobRuns_labels_jobRunDetails(
      _key?: boolean
    ): string {
      return t("jobRuns.labels.jobRunDetails", {}, _key);
    },
  },
  monitoring: {
    linkText: function jobRuns_monitoring_linkText(_key?: boolean): string {
      return t("jobRuns.monitoring.linkText", {}, _key);
    },
    friendlyNames: {
      cpuUtilization: function jobRuns_monitoring_friendlyNames_cpuUtilization(
        _key?: boolean
      ): string {
        return t("jobRuns.monitoring.friendlyNames.cpuUtilization", {}, _key);
      },
      memoryUtilization:
        function jobRuns_monitoring_friendlyNames_memoryUtilization(
          _key?: boolean
        ): string {
          return t(
            "jobRuns.monitoring.friendlyNames.memoryUtilization",
            {},
            _key
          );
        },
      networkBytesIn: function jobRuns_monitoring_friendlyNames_networkBytesIn(
        _key?: boolean
      ): string {
        return t("jobRuns.monitoring.friendlyNames.networkBytesIn", {}, _key);
      },
      networkBytesOut:
        function jobRuns_monitoring_friendlyNames_networkBytesOut(
          _key?: boolean
        ): string {
          return t(
            "jobRuns.monitoring.friendlyNames.networkBytesOut",
            {},
            _key
          );
        },
      diskUtilization:
        function jobRuns_monitoring_friendlyNames_diskUtilization(
          _key?: boolean
        ): string {
          return t(
            "jobRuns.monitoring.friendlyNames.diskUtilization",
            {},
            _key
          );
        },
      gpuUtilization: function jobRuns_monitoring_friendlyNames_gpuUtilization(
        _key?: boolean
      ): string {
        return t("jobRuns.monitoring.friendlyNames.gpuUtilization", {}, _key);
      },
    },
    metadata: {
      cpuUtilization: function jobRuns_monitoring_metadata_cpuUtilization(
        _key?: boolean
      ): string {
        return t("jobRuns.monitoring.metadata.cpuUtilization", {}, _key);
      },
      memoryUtilization: function jobRuns_monitoring_metadata_memoryUtilization(
        _key?: boolean
      ): string {
        return t("jobRuns.monitoring.metadata.memoryUtilization", {}, _key);
      },
      networkBytesIn: function jobRuns_monitoring_metadata_networkBytesIn(
        _key?: boolean
      ): string {
        return t("jobRuns.monitoring.metadata.networkBytesIn", {}, _key);
      },
      networkBytesOut: function jobRuns_monitoring_metadata_networkBytesOut(
        _key?: boolean
      ): string {
        return t("jobRuns.monitoring.metadata.networkBytesOut", {}, _key);
      },
      diskUtilization: function jobRuns_monitoring_metadata_diskUtilization(
        _key?: boolean
      ): string {
        return t("jobRuns.monitoring.metadata.diskUtilization", {}, _key);
      },
      gpuUtilization: function jobRuns_monitoring_metadata_gpuUtilization(
        _key?: boolean
      ): string {
        return t("jobRuns.monitoring.metadata.gpuUtilization", {}, _key);
      },
    },
  },
};
export const operationType = {
  NOTEBOOK_SESSION_CREATE: function operationType_NOTEBOOK_SESSION_CREATE(
    _key?: boolean
  ): string {
    return t("operationType.NOTEBOOK_SESSION_CREATE", {}, _key);
  },
  NOTEBOOK_SESSION_DELETE: function operationType_NOTEBOOK_SESSION_DELETE(
    _key?: boolean
  ): string {
    return t("operationType.NOTEBOOK_SESSION_DELETE", {}, _key);
  },
  NOTEBOOK_SESSION_ACTIVATE: function operationType_NOTEBOOK_SESSION_ACTIVATE(
    _key?: boolean
  ): string {
    return t("operationType.NOTEBOOK_SESSION_ACTIVATE", {}, _key);
  },
  NOTEBOOK_SESSION_DEACTIVATE:
    function operationType_NOTEBOOK_SESSION_DEACTIVATE(_key?: boolean): string {
      return t("operationType.NOTEBOOK_SESSION_DEACTIVATE", {}, _key);
    },
  MODEL_DEPLOYMENT_CREATE: function operationType_MODEL_DEPLOYMENT_CREATE(
    _key?: boolean
  ): string {
    return t("operationType.MODEL_DEPLOYMENT_CREATE", {}, _key);
  },
  MODEL_DEPLOYMENT_DELETE: function operationType_MODEL_DEPLOYMENT_DELETE(
    _key?: boolean
  ): string {
    return t("operationType.MODEL_DEPLOYMENT_DELETE", {}, _key);
  },
  MODEL_DEPLOYMENT_ACTIVATE: function operationType_MODEL_DEPLOYMENT_ACTIVATE(
    _key?: boolean
  ): string {
    return t("operationType.MODEL_DEPLOYMENT_ACTIVATE", {}, _key);
  },
  MODEL_DEPLOYMENT_DEACTIVATE:
    function operationType_MODEL_DEPLOYMENT_DEACTIVATE(_key?: boolean): string {
      return t("operationType.MODEL_DEPLOYMENT_DEACTIVATE", {}, _key);
    },
  MODEL_DEPLOYMENT_UPDATE: function operationType_MODEL_DEPLOYMENT_UPDATE(
    _key?: boolean
  ): string {
    return t("operationType.MODEL_DEPLOYMENT_UPDATE", {}, _key);
  },
  PROJECT_DELETE: function operationType_PROJECT_DELETE(
    _key?: boolean
  ): string {
    return t("operationType.PROJECT_DELETE", {}, _key);
  },
  WORKREQUEST_CANCEL: function operationType_WORKREQUEST_CANCEL(
    _key?: boolean
  ): string {
    return t("operationType.WORKREQUEST_CANCEL", {}, _key);
  },
  JOB_DELETE: function operationType_JOB_DELETE(_key?: boolean): string {
    return t("operationType.JOB_DELETE", {}, _key);
  },
};
export const computePanels = {
  title: function computePanels_title(_key?: boolean): string {
    return t("computePanels.title", {}, _key);
  },
  description: function computePanels_description(
    href: string,
    _key?: boolean
  ): string {
    return t("computePanels.description", { href }, _key);
  },
  flexSliderHint: function computePanels_flexSliderHint(
    href: string,
    _key?: boolean
  ): string {
    return t("computePanels.flexSliderHint", { href }, _key);
  },
  ocpuSliderLabel: function computePanels_ocpuSliderLabel(
    _key?: boolean
  ): string {
    return t("computePanels.ocpuSliderLabel", {}, _key);
  },
  memorySliderLabel: function computePanels_memorySliderLabel(
    _key?: boolean
  ): string {
    return t("computePanels.memorySliderLabel", {}, _key);
  },
  customConfiguration: function computePanels_customConfiguration(
    _key?: boolean
  ): string {
    return t("computePanels.customConfiguration", {}, _key);
  },
  customConfigurationDescription:
    function computePanels_customConfigurationDescription(
      _key?: boolean
    ): string {
      return t("computePanels.customConfigurationDescription", {}, _key);
    },
  fastLaunch: function computePanels_fastLaunch(_key?: boolean): string {
    return t("computePanels.fastLaunch", {}, _key);
  },
  fastLaunchDescription: function computePanels_fastLaunchDescription(
    _key?: boolean
  ): string {
    return t("computePanels.fastLaunchDescription", {}, _key);
  },
  fastLaunchEnabled: function computePanels_fastLaunchEnabled(
    _key?: boolean
  ): string {
    return t("computePanels.fastLaunchEnabled", {}, _key);
  },
  shapeTableShapeNameColumn: function computePanels_shapeTableShapeNameColumn(
    _key?: boolean
  ): string {
    return t("computePanels.shapeTableShapeNameColumn", {}, _key);
  },
  shapeTableMemoryColumn: function computePanels_shapeTableMemoryColumn(
    _key?: boolean
  ): string {
    return t("computePanels.shapeTableMemoryColumn", {}, _key);
  },
  shapeTableOCPUsColumn: function computePanels_shapeTableOCPUsColumn(
    _key?: boolean
  ): string {
    return t("computePanels.shapeTableOCPUsColumn", {}, _key);
  },
  changeShape: function computePanels_changeShape(_key?: boolean): string {
    return t("computePanels.changeShape", {}, _key);
  },
  selectShape: function computePanels_selectShape(_key?: boolean): string {
    return t("computePanels.selectShape", {}, _key);
  },
  radioGroup: {
    label: function computePanels_radioGroup_label(_key?: boolean): string {
      return t("computePanels.radioGroup.label", {}, _key);
    },
    amdRomeHeader: function computePanels_radioGroup_amdRomeHeader(
      _key?: boolean
    ): string {
      return t("computePanels.radioGroup.amdRomeHeader", {}, _key);
    },
    amdRomeDescription: function computePanels_radioGroup_amdRomeDescription(
      _key?: boolean
    ): string {
      return t("computePanels.radioGroup.amdRomeDescription", {}, _key);
    },
    intelSkylakeHeader: function computePanels_radioGroup_intelSkylakeHeader(
      _key?: boolean
    ): string {
      return t("computePanels.radioGroup.intelSkylakeHeader", {}, _key);
    },
    intelSkylakeDescription:
      function computePanels_radioGroup_intelSkylakeDescription(
        _key?: boolean
      ): string {
        return t("computePanels.radioGroup.intelSkylakeDescription", {}, _key);
      },
    nvidiaGpuHeader: function computePanels_radioGroup_nvidiaGpuHeader(
      _key?: boolean
    ): string {
      return t("computePanels.radioGroup.nvidiaGpuHeader", {}, _key);
    },
    nvidiaGpuDescription:
      function computePanels_radioGroup_nvidiaGpuDescription(
        _key?: boolean
      ): string {
        return t("computePanels.radioGroup.nvidiaGpuDescription", {}, _key);
      },
    legacyHeader: function computePanels_radioGroup_legacyHeader(
      _key?: boolean
    ): string {
      return t("computePanels.radioGroup.legacyHeader", {}, _key);
    },
    legacyDescription: function computePanels_radioGroup_legacyDescription(
      _key?: boolean
    ): string {
      return t("computePanels.radioGroup.legacyDescription", {}, _key);
    },
    previousGenerationHeader:
      function computePanels_radioGroup_previousGenerationHeader(
        _key?: boolean
      ): string {
        return t("computePanels.radioGroup.previousGenerationHeader", {}, _key);
      },
    previousGenerationHeaderDescription:
      function computePanels_radioGroup_previousGenerationHeaderDescription(
        _key?: boolean
      ): string {
        return t(
          "computePanels.radioGroup.previousGenerationHeaderDescription",
          {},
          _key
        );
      },
  },
  wholeNumberErrorMessage: function computePanels_wholeNumberErrorMessage(
    _key?: boolean
  ): string {
    return t("computePanels.wholeNumberErrorMessage", {}, _key);
  },
};
export const shared = {
  networkingResources: {
    networkingResources:
      function shared_networkingResources_networkingResources(
        _key?: boolean
      ): string {
        return t("shared.networkingResources.networkingResources", {}, _key);
      },
    networkingTypeDescription:
      function shared_networkingResources_networkingTypeDescription(
        name: string,
        _key?: boolean
      ): string {
        return t(
          "shared.networkingResources.networkingTypeDescription",
          { name },
          _key
        );
      },
    networkingType: function shared_networkingResources_networkingType(
      _key?: boolean
    ): string {
      return t("shared.networkingResources.networkingType", {}, _key);
    },
    customNetworking: function shared_networkingResources_customNetworking(
      _key?: boolean
    ): string {
      return t("shared.networkingResources.customNetworking", {}, _key);
    },
    customNetworkingDescription:
      function shared_networkingResources_customNetworkingDescription(
        _key?: boolean
      ): string {
        return t(
          "shared.networkingResources.customNetworkingDescription",
          {},
          _key
        );
      },
    defaultNetworking: function shared_networkingResources_defaultNetworking(
      _key?: boolean
    ): string {
      return t("shared.networkingResources.defaultNetworking", {}, _key);
    },
    defaultNetworkingDescription:
      function shared_networkingResources_defaultNetworkingDescription(
        _key?: boolean
      ): string {
        return t(
          "shared.networkingResources.defaultNetworkingDescription",
          {},
          _key
        );
      },
  },
  shapes: {
    x9Processor: function shared_shapes_x9Processor(_key?: boolean): string {
      return t("shared.shapes.x9Processor", {}, _key);
    },
    e4Processor: function shared_shapes_e4Processor(_key?: boolean): string {
      return t("shared.shapes.e4Processor", {}, _key);
    },
    e3Processor: function shared_shapes_e3Processor(_key?: boolean): string {
      return t("shared.shapes.e3Processor", {}, _key);
    },
    a1Processor: function shared_shapes_a1Processor(_key?: boolean): string {
      return t("shared.shapes.a1Processor", {}, _key);
    },
    bmGpu4Processor: function shared_shapes_bmGpu4Processor(
      _key?: boolean
    ): string {
      return t("shared.shapes.bmGpu4Processor", {}, _key);
    },
    standard2Processor: function shared_shapes_standard2Processor(
      _key?: boolean
    ): string {
      return t("shared.shapes.standard2Processor", {}, _key);
    },
  },
};
