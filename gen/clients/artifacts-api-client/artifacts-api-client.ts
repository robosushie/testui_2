/* tslint:disable */

/**
 * Artifacts and Container Images API
 * API covering the Artifacts and [Registry](/iaas/Content/Registry/Concepts/registryoverview.htm) services. Use this API to manage resources such as generic artifacts and container images. 
 *
 * OpenAPI spec version: 20160918
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as base from "./lib/base-api";

/**
 * Change container repository compartment details.
 */
export interface ChangeContainerRepositoryCompartmentDetails {
    /**
     * The [OCID](/Content/General/Concepts/identifiers.htm) of the compartment into which to move the resource. 
     */
    "compartmentId": string;
}

/**
 * Details for changing a repository's compartment.
 */
export interface ChangeRepositoryCompartmentDetails {
    /**
     * The [OCID](/Content/General/Concepts/identifiers.htm) of the compartment into which the repository should be moved. 
     */
    "compartmentId": string;
}

/**
 * Container configuration.
 */
export interface ContainerConfiguration {
    /**
     * Whether to create a new container repository when a container is pushed to a new repository path. Repositories created in this way belong to the root compartment. 
     */
    "isRepositoryCreatedOnFirstPush": boolean;
    /**
     * The tenancy namespace used in the container repository path.
     */
    "namespace": string;
}

/**
 * Container image metadata.
 */
export interface ContainerImage {
    /**
     * The compartment OCID to which the container image belongs. Inferred from the container repository.
     */
    "compartmentId": string;
    /**
     * The [OCID](/Content/General/Concepts/identifiers.htm) of the user or principal that created the resource.
     */
    "createdBy": string;
    /**
     * The container image digest.
     */
    "digest": string;
    /**
     * The repository name and the most recent version associated with the image. If there are no versions associated with the image, then last known version and digest are used instead. If the last known version is unavailable, then 'unknown' is used instead of the version.  Example: `ubuntu:latest` or `ubuntu:latest@sha256:45b23dee08af5e43a7fea6c4cf9c25ccf269ee113168c19722f87876677c5cb2` 
     */
    "displayName": string;
    /**
     * The [OCID](/Content/General/Concepts/identifiers.htm) of the container image.  Example: `ocid1.containerimage.oc1..exampleuniqueID` 
     */
    "id": string;
    /**
     * Layers of which the image is composed, ordered by the layer digest.
     */
    "layers": Array<ContainerImageLayer>;
    /**
     * The total size of the container image layers in bytes.
     */
    "layersSizeInBytes": number;
    /**
     * The current state of the container image.
     */
    "lifecycleState": ContainerImageLifecycleStateEnum;
    /**
     * The size of the container image manifest in bytes.
     */
    "manifestSizeInBytes": number;
    /**
     * Total number of pulls.
     */
    "pullCount": number;
    /**
     * The [OCID](/Content/General/Concepts/identifiers.htm) of the container repository.
     */
    "repositoryId": string;
    /**
     * The container repository name.
     */
    "repositoryName": string;
    /**
     * An RFC 3339 timestamp indicating when the image was created.
     */
    "timeCreated": Date;
    /**
     * An RFC 3339 timestamp indicating when the image was last pulled.
     */
    "timeLastPulled"?: Date;
    /**
     * The most recent version associated with this image.
     */
    "version"?: string;
    /**
     * The versions associated with this image.
     */
    "versions": Array<ContainerVersion>;
}

export type ContainerImageLifecycleStateEnum = "AVAILABLE" | "DELETED" | "DELETING";
/**
 * List container image results.
 */
export interface ContainerImageCollection {
    /**
     * Page of matching container images.
     */
    "items": Array<ContainerImageSummary>;
    /**
     * Estimated number of remaining results.
     */
    "remainingItemsCount": number;
}

/**
 * The container image layer metadata.
 */
export interface ContainerImageLayer {
    /**
     * The sha256 digest of the image layer.
     */
    "digest": string;
    /**
     * The size of the layer in bytes.
     */
    "sizeInBytes": number;
    /**
     * An RFC 3339 timestamp indicating when the layer was created.
     */
    "timeCreated": Date;
}

/**
 * Container image signature metadata.
 */
export interface ContainerImageSignature {
    /**
     * The [OCID](/Content/General/Concepts/identifiers.htm) of the compartment in which the container repository exists.
     */
    "compartmentId": string;
    /**
     * The id of the user or principal that created the resource.
     */
    "createdBy": string;
    /**
     * The last 10 characters of the kmsKeyId, the last 10 characters of the kmsKeyVersionId, the signingAlgorithm, and the last 10 characters of the signatureId.  Example: `wrmz22sixa::qdwyc2ptun::SHA_256_RSA_PKCS_PSS::2vwmobasva` 
     */
    "displayName": string;
    /**
     * The [OCID](/Content/General/Concepts/identifiers.htm) of the container image signature.  Example: `ocid1.containerimagesignature.oc1..exampleuniqueID` 
     */
    "id": string;
    /**
     * The [OCID](/Content/General/Concepts/identifiers.htm) of the container image.  Example: `ocid1.containerimage.oc1..exampleuniqueID` 
     */
    "imageId": string;
    /**
     * The [OCID](/Content/General/Concepts/identifiers.htm) of the kmsKeyId used to sign the container image.  Example: `ocid1.key.oc1..exampleuniqueID` 
     */
    "kmsKeyId": string;
    /**
     * The [OCID](/Content/General/Concepts/identifiers.htm) of the kmsKeyVersionId used to sign the container image.  Example: `ocid1.keyversion.oc1..exampleuniqueID` 
     */
    "kmsKeyVersionId": string;
    /**
     * The base64 encoded signature payload that was signed.
     */
    "message": string;
    /**
     * The signature of the message field using the kmsKeyId, the kmsKeyVersionId, and the signingAlgorithm.
     */
    "signature": string;
    /**
     * The algorithm to be used for signing. These are the only supported signing algorithms for container images.
     */
    "signingAlgorithm": ContainerImageSignatureSigningAlgorithmEnum;
    /**
     * An RFC 3339 timestamp indicating when the image was created.
     */
    "timeCreated": Date;
}

export type ContainerImageSignatureSigningAlgorithmEnum = "SHA_224_RSA_PKCS_PSS" | "SHA_256_RSA_PKCS_PSS" | "SHA_384_RSA_PKCS_PSS" | "SHA_512_RSA_PKCS_PSS";
/**
 * List container image signature results.
 */
export interface ContainerImageSignatureCollection {
    /**
     * Page of matching container image signatures.
     */
    "items": Array<ContainerImageSignatureSummary>;
    /**
     * Estimated number of remaining results.
     */
    "remainingItemsCount": number;
}

/**
 * Container image signature summary.
 */
export interface ContainerImageSignatureSummary {
    /**
     * The OCID of the compartment in which the container repository exists.
     */
    "compartmentId": string;
    /**
     * The last 10 characters of the kmsKeyId, the last 10 characters of the kmsKeyVersionId, the signingAlgorithm, and the last 10 characters of the signatureId.  Example: `wrmz22sixa::qdwyc2ptun::SHA_256_RSA_PKCS_PSS::2vwmobasva` 
     */
    "displayName": string;
    /**
     * The [OCID](/Content/General/Concepts/identifiers.htm) of the container image signature.  Example: `ocid1.containerimagesignature.oc1..exampleuniqueID` 
     */
    "id": string;
    /**
     * The [OCID](/Content/General/Concepts/identifiers.htm) of the container image.  Example: `ocid1.containerimage.oc1..exampleuniqueID` 
     */
    "imageId": string;
    /**
     * The [OCID](/Content/General/Concepts/identifiers.htm) of the kmsKeyId used to sign the container image.  Example: `ocid1.key.oc1..exampleuniqueID` 
     */
    "kmsKeyId": string;
    /**
     * The [OCID](/Content/General/Concepts/identifiers.htm) of the kmsKeyVersionId used to sign the container image.  Example: `ocid1.keyversion.oc1..exampleuniqueID` 
     */
    "kmsKeyVersionId": string;
    /**
     * The base64 encoded signature payload that was signed.
     */
    "message": string;
    /**
     * The signature of the message field using the kmsKeyId, the kmsKeyVersionId, and the signingAlgorithm.
     */
    "signature": string;
    /**
     * The algorithm to be used for signing. These are the only supported signing algorithms for container images.
     */
    "signingAlgorithm": ContainerImageSignatureSummarySigningAlgorithmEnum;
    /**
     * An RFC 3339 timestamp indicating when the image was created.
     */
    "timeCreated": Date;
}

export type ContainerImageSignatureSummarySigningAlgorithmEnum = "SHA_224_RSA_PKCS_PSS" | "SHA_256_RSA_PKCS_PSS" | "SHA_384_RSA_PKCS_PSS" | "SHA_512_RSA_PKCS_PSS";
/**
 * Container image summary.
 */
export interface ContainerImageSummary {
    /**
     * The compartment OCID to which the container image belongs. Inferred from the container repository.
     */
    "compartmentId": string;
    /**
     * The container image digest.
     */
    "digest": string;
    /**
     * The repository name and the most recent version associated with the image. If there are no versions associated with the image, then last known version and digest are used instead. If the last known version is unavailable, then 'unknown' is used instead of the version.  Example: `ubuntu:latest` or `ubuntu:latest@sha256:45b23dee08af5e43a7fea6c4cf9c25ccf269ee113168c19722f87876677c5cb2` 
     */
    "displayName": string;
    /**
     * The [OCID](/Content/General/Concepts/identifiers.htm) of the container image.  Example: `ocid1.containerimage.oc1..exampleuniqueID` 
     */
    "id": string;
    /**
     * The current state of the container image.
     */
    "lifecycleState": string;
    /**
     * The OCID of the container repository.
     */
    "repositoryId": string;
    /**
     * The container repository name.
     */
    "repositoryName": string;
    /**
     * An RFC 3339 timestamp indicating when the image was created.
     */
    "timeCreated": Date;
    /**
     * The most recent version associated with this image.
     */
    "version"?: string;
}

/**
 * Container repository metadata.
 */
export interface ContainerRepository {
    /**
     * The OCID of the compartment in which the container repository exists.
     */
    "compartmentId": string;
    /**
     * The id of the user or principal that created the resource.
     */
    "createdBy": string;
    /**
     * The container repository name.
     */
    "displayName": string;
    /**
     * The [OCID](/iaas/Content/General/Concepts/identifiers.htm) of the container repository.  Example: `ocid1.containerrepo.oc1..exampleuniqueID` 
     */
    "id": string;
    /**
     * Total number of images.
     */
    "imageCount": number;
    /**
     * Whether the repository is immutable. Images cannot be overwritten in an immutable repository.
     */
    "isImmutable": boolean;
    /**
     * Whether the repository is public. A public repository allows unauthenticated access.
     */
    "isPublic": boolean;
    /**
     * Total number of layers.
     */
    "layerCount": number;
    /**
     * Total storage in bytes consumed by layers.
     */
    "layersSizeInBytes": number;
    /**
     * The current state of the container repository.
     */
    "lifecycleState": ContainerRepositoryLifecycleStateEnum;
    "readme"?: ContainerRepositoryReadme;
    /**
     * An RFC 3339 timestamp indicating when the repository was created.
     */
    "timeCreated": Date;
    /**
     * An RFC 3339 timestamp indicating when an image was last pushed to the repository.
     */
    "timeLastPushed"?: Date;
    /**
     * Total storage size in GBs that will be charged.
     */
    "billableSizeInGBs": number;
}

export type ContainerRepositoryLifecycleStateEnum = "AVAILABLE" | "DELETING" | "DELETED";
/**
 * List of container repository results.
 */
export interface ContainerRepositoryCollection {
    /**
     * Total number of layers.
     */
    "layerCount": number;
    /**
     * Total storage in bytes consumed by layers.
     */
    "layersSizeInBytes": number;
    /**
     * Total number of images.
     */
    "imageCount": number;
    /**
     * Collection of container repositories.
     */
    "items": Array<ContainerRepositorySummary>;
    /**
     * Estimated number of remaining results.
     */
    "remainingItemsCount": number;
    /**
     * Total number of repositories.
     */
    "repositoryCount": number;
}

/**
 * Container repository readme.
 */
export interface ContainerRepositoryReadme {
    /**
     * Readme content. Avoid entering confidential information.
     */
    "content": string;
    /**
     * Readme format. Supported formats are text/plain and text/markdown.
     */
    "format": ContainerRepositoryReadmeFormatEnum;
}

export type ContainerRepositoryReadmeFormatEnum = "TEXT_MARKDOWN" | "TEXT_PLAIN";
/**
 * Container repository summary.
 */
export interface ContainerRepositorySummary {
    /**
     * The OCID of the compartment in which the container repository exists.
     */
    "compartmentId": string;
    /**
     * The container repository name.
     */
    "displayName": string;
    /**
     * The [OCID](/iaas/Content/General/Concepts/identifiers.htm) of the container repository.  Example: `ocid1.containerrepo.oc1..exampleuniqueID` 
     */
    "id": string;
    /**
     * Total number of images.
     */
    "imageCount": number;
    /**
     * Whether the repository is public. A public repository allows unauthenticated access.
     */
    "isPublic": boolean;
    /**
     * Total number of layers.
     */
    "layerCount": number;
    /**
     * Total storage in bytes consumed by layers.
     */
    "layersSizeInBytes": number;
    /**
     * The current state of the container repository.
     */
    "lifecycleState": string;
    /**
     * An RFC 3339 timestamp indicating when the repository was created.
     */
    "timeCreated": Date;
    /**
     * Total storage size in GBs that will be charged.
     */
    "billableSizeInGBs": number;
}

/**
 * Container version metadata.
 */
export interface ContainerVersion {
    /**
     * The OCID of the user or principal that pushed the version.
     */
    "createdBy": string;
    /**
     * The creation time of the version.
     */
    "timeCreated": Date;
    /**
     * The version name.
     */
    "version": string;
}

/**
 * Upload container image signature request details.
 */
export interface CreateContainerImageSignatureDetails {
    /**
     * The [OCID](/Content/General/Concepts/identifiers.htm) of the compartment in which the container repository exists.
     */
    "compartmentId": string;
    /**
     * The [OCID](/Content/General/Concepts/identifiers.htm) of the container image.  Example: `ocid1.containerimage.oc1..exampleuniqueID` 
     */
    "imageId": string;
    /**
     * The [OCID](/Content/General/Concepts/identifiers.htm) of the kmsKeyId used to sign the container image.  Example: `ocid1.key.oc1..exampleuniqueID` 
     */
    "kmsKeyId": string;
    /**
     * The [OCID](/Content/General/Concepts/identifiers.htm) of the kmsKeyVersionId used to sign the container image.  Example: `ocid1.keyversion.oc1..exampleuniqueID` 
     */
    "kmsKeyVersionId": string;
    /**
     * The base64 encoded signature payload that was signed.
     */
    "message": string;
    /**
     * The signature of the message field using the kmsKeyId, the kmsKeyVersionId, and the signingAlgorithm.
     */
    "signature": string;
    /**
     * The algorithm to be used for signing. These are the only supported signing algorithms for container images.
     */
    "signingAlgorithm": CreateContainerImageSignatureDetailsSigningAlgorithmEnum;
}

export type CreateContainerImageSignatureDetailsSigningAlgorithmEnum = "SHA_224_RSA_PKCS_PSS" | "SHA_256_RSA_PKCS_PSS" | "SHA_384_RSA_PKCS_PSS" | "SHA_512_RSA_PKCS_PSS";
/**
 * Create container repository details.
 */
export interface CreateContainerRepositoryDetails {
    /**
     * The [OCID](/Content/General/Concepts/identifiers.htm) of the compartment in which to create the resource. 
     */
    "compartmentId": string;
    /**
     * The container repository name.
     */
    "displayName": string;
    /**
     * Whether the repository is immutable. Images cannot be overwritten in an immutable repository.
     */
    "isImmutable"?: boolean;
    /**
     * Whether the repository is public. A public repository allows unauthenticated access.
     */
    "isPublic"?: boolean;
    "readme"?: ContainerRepositoryReadme;
}

/**
 * Parameters needed to create an artifact repository.
 */
export interface CreateRepositoryDetails {
    /**
     * A user-friendly display name for the repository. If not present, will be auto-generated. It can be modified later. Avoid entering confidential information.
     */
    "displayName"?: string;
    /**
     * The [OCID](/Content/General/Concepts/identifiers.htm) of the repository's compartment. 
     */
    "compartmentId": string;
    /**
     * The repository's supported artifact type.
     */
    "repositoryType": string;
    /**
     * A short description of the repository. It can be updated later.
     */
    "description"?: string;
    /**
     * Whether to make the repository immutable. The artifacts of an immutable repository cannot be overwritten.
     */
    "isImmutable": boolean;
    /**
     * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{\"Department\": \"Finance\"}` 
     */
    "freeformTags"?: { [key: string]: string; };
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{\"Operations\": {\"CostCenter\": \"42\"}}` 
     */
    "definedTags"?: { [key: string]: { [key: string]: any; }; };
}

/**
 * The metadata of the artifact.
 */
export interface GenericArtifact {
    /**
     * The [OCID](/iaas/Content/General/Concepts/identifiers.htm) of the artifact.  Example: `ocid1.genericartifact.oc1..exampleuniqueID` 
     */
    "id": string;
    /**
     * The artifact name with the format of `<artifact-path>:<artifact-version>`. The artifact name is truncated to a maximum length of 255.  Example: `project01/my-web-app/artifact-abc:1.0.0` 
     */
    "displayName": string;
    /**
     * The [OCID](/iaas/Content/General/Concepts/identifiers.htm) of the repository's compartment.
     */
    "compartmentId": string;
    /**
     * The [OCID](/Content/General/Concepts/identifiers.htm) of the repository.
     */
    "repositoryId": string;
    /**
     * A user-defined path to describe the location of an artifact. Slashes do not create a directory structure, but you can use slashes to organize the repository. An artifact path does not include an artifact version.  Example: `project01/my-web-app/artifact-abc` 
     */
    "artifactPath": string;
    /**
     * A user-defined string to describe the artifact version.  Example: `1.1.0` or `1.2-beta-2` 
     */
    "version": string;
    /**
     * The SHA256 digest for the artifact. When you upload an artifact to the repository, a SHA256 digest is calculated and added to the artifact properties.
     */
    "sha256": string;
    /**
     * The size of the artifact in bytes.
     */
    "sizeInBytes": number;
    /**
     * The current state of the artifact.
     */
    "lifecycleState": GenericArtifactLifecycleStateEnum;
    /**
     * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{\"Department\": \"Finance\"}` 
     */
    "freeformTags": { [key: string]: string; };
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{\"Operations\": {\"CostCenter\": \"42\"}}` 
     */
    "definedTags": { [key: string]: { [key: string]: any; }; };
    /**
     * An RFC 3339 timestamp indicating when the repository was created.
     */
    "timeCreated": Date;
}

export type GenericArtifactLifecycleStateEnum = "AVAILABLE" | "DELETING" | "DELETED";
/**
 * A list of artifacts.
 */
export interface GenericArtifactCollection {
    /**
     * The listed artifacts.
     */
    "items": Array<GenericArtifactSummary>;
}

/**
 * Summary information for an artifact.
 */
export interface GenericArtifactSummary {
    /**
     * The [OCID](/iaas/Content/General/Concepts/identifiers.htm) of the artifact.  Example: `ocid1.genericartifact.oc1..exampleuniqueID` 
     */
    "id": string;
    /**
     * The artifact name with the format of `<artifact-path>:<artifact-version>`. The artifact name is truncated to a maximum length of 255.  Example: `project01/my-web-app/artifact-abc:1.0.0` 
     */
    "displayName": string;
    /**
     * The OCID of the artifact's compartment.
     */
    "compartmentId": string;
    /**
     * The [OCID](/Content/General/Concepts/identifiers.htm) of the repository.
     */
    "repositoryId": string;
    /**
     * A user-defined path to describe the location of an artifact. Slashes do not create a directory structure, but you can use slashes to organize the repository. An artifact path does not include an artifact version.  Example: `project01/my-web-app/artifact-abc`  
     */
    "artifactPath": string;
    /**
     * A user-defined string to describe the artifact version.  Example: `1.1.0` or `1.2-beta-2` 
     */
    "version": string;
    /**
     * The SHA256 digest for the artifact. When you upload an artifact to the repository, a SHA256 digest is calculated and added to the artifact properties.
     */
    "sha256": string;
    /**
     * The size of the artifact in bytes.
     */
    "sizeInBytes": number;
    /**
     * The current state of the generic artifact.
     */
    "lifecycleState": string;
    /**
     * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{\"Department\": \"Finance\"}` 
     */
    "freeformTags": { [key: string]: string; };
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{\"Operations\": {\"CostCenter\": \"42\"}}` 
     */
    "definedTags": { [key: string]: { [key: string]: any; }; };
    /**
     * An RFC 3339 timestamp indicating when the artifact was created.
     */
    "timeCreated": Date;
}

export interface ModelError {
    /**
     * A short error code that defines the error, meant for programmatic parsing. See [API Errors](/Content/API/References/apierrors.htm). 
     */
    "code": string;
    /**
     * A human-readable error string.
     */
    "message": string;
}

/**
 * Remove version details.
 */
export interface RemoveContainerVersionDetails {
    /**
     * The version to remove.
     */
    "version": string;
}

/**
 * The metadata for the artifact repository.
 */
export interface Repository {
    /**
     * The [OCID](/iaas/Content/General/Concepts/identifiers.htm) of the repository.  Example: `ocid1.artifactrepository.oc1..exampleuniqueID` 
     */
    "id": string;
    /**
     * The repository name.
     */
    "displayName": string;
    /**
     * The OCID of the repository's compartment.
     */
    "compartmentId": string;
    /**
     * The repository's supported artifact type.
     */
    "repositoryType": RepositoryRepositoryTypeEnum;
    /**
     * The repository description.
     */
    "description": string;
    /**
     * Whether the repository is immutable. The artifacts of an immutable repository cannot be overwritten.
     */
    "isImmutable": boolean;
    /**
     * The current state of the repository.
     */
    "lifecycleState": RepositoryLifecycleStateEnum;
    /**
     * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{\"Department\": \"Finance\"}` 
     */
    "freeformTags": { [key: string]: string; };
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{\"Operations\": {\"CostCenter\": \"42\"}}` 
     */
    "definedTags": { [key: string]: { [key: string]: any; }; };
    /**
     * An RFC 3339 timestamp indicating when the repository was created.
     */
    "timeCreated": Date;
}

export type RepositoryRepositoryTypeEnum = "GENERIC";
export type RepositoryLifecycleStateEnum = "AVAILABLE" | "DELETING" | "DELETED";
/**
 * A list of repositories.
 */
export interface RepositoryCollection {
    /**
     * The listed repositories.
     */
    "items": Array<RepositorySummary>;
}

/**
 * Summary information for a repository.
 */
export interface RepositorySummary {
    /**
     * The [OCID](/iaas/Content/General/Concepts/identifiers.htm) of the repository.  Example: `ocid1.artifactrepository.oc1..exampleuniqueID` 
     */
    "id": string;
    /**
     * The repository name.
     */
    "displayName": string;
    /**
     * The OCID of the repository's compartment.
     */
    "compartmentId": string;
    /**
     * The repository's supported artifact type.
     */
    "repositoryType": string;
    /**
     * The repository description.
     */
    "description"?: string;
    /**
     * Whether the repository is immutable. The artifacts of an immutable repository cannot be overwritten.
     */
    "isImmutable": boolean;
    /**
     * The current state of the artifact repository.
     */
    "lifecycleState": string;
    /**
     * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{\"Department\": \"Finance\"}` 
     */
    "freeformTags": { [key: string]: string; };
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{\"Operations\": {\"CostCenter\": \"42\"}}` 
     */
    "definedTags": { [key: string]: { [key: string]: any; }; };
    /**
     * An RFC 3339 timestamp indicating when the repository was created.
     */
    "timeCreated": Date;
}

/**
 * Undelete container image request details.
 */
export interface RestoreContainerImageDetails {
    /**
     * Optional version to associate with image.
     */
    "version"?: string;
}

/**
 * Update container configuration request details.
 */
export interface UpdateContainerConfigurationDetails {
    /**
     * Whether to create a new container repository when a container is pushed to a new repository path. Repositories created in this way belong to the root compartment. 
     */
    "isRepositoryCreatedOnFirstPush"?: boolean;
}

/**
 * Update container repository request details.
 */
export interface UpdateContainerRepositoryDetails {
    /**
     * Whether the repository is immutable. Images cannot be overwritten in an immutable repository.
     */
    "isImmutable"?: boolean;
    /**
     * Whether the repository is public. A public repository allows unauthenticated access.
     */
    "isPublic"?: boolean;
    "readme"?: ContainerRepositoryReadme;
}

/**
 * Details for updating an artifact by providing its `artifactPath` and `version`.
 */
export interface UpdateGenericArtifactByPathDetails {
    /**
     * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{\"Department\": \"Finance\"}` 
     */
    "freeformTags"?: { [key: string]: string; };
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{\"Operations\": {\"CostCenter\": \"42\"}}` 
     */
    "definedTags"?: { [key: string]: { [key: string]: any; }; };
}

/**
 * Details for updating an artifact by providing its [OCID](/iaas/Content/General/Concepts/identifiers.htm).
 */
export interface UpdateGenericArtifactDetails {
    /**
     * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{\"Department\": \"Finance\"}` 
     */
    "freeformTags"?: { [key: string]: string; };
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{\"Operations\": {\"CostCenter\": \"42\"}}` 
     */
    "definedTags"?: { [key: string]: { [key: string]: any; }; };
}

/**
 * Details for updating a repository.
 */
export interface UpdateRepositoryDetails {
    /**
     * The repository name.
     */
    "displayName"?: string;
    /**
     * The repository's supported artifact type.
     */
    "repositoryType": string;
    /**
     * The repository description.
     */
    "description"?: string;
    /**
     * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{\"Department\": \"Finance\"}` 
     */
    "freeformTags"?: { [key: string]: string; };
    /**
     * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{\"Operations\": {\"CostCenter\": \"42\"}}` 
     */
    "definedTags"?: { [key: string]: { [key: string]: any; }; };
}

/**
 * Parameters needed to create an artifact repository.
 */
export interface CreateGenericRepositoryDetails extends CreateRepositoryDetails {
}

/**
 * The metadata for the artifact repository.
 */
export interface GenericRepository extends Repository {
}

/**
 * Summary information for a repository.
 */
export interface GenericRepositorySummary extends RepositorySummary {
}

/**
 * Details for updating an artifact repository.
 */
export interface UpdateGenericRepositoryDetails extends UpdateRepositoryDetails {
}


export interface ChangeContainerRepositoryCompartmentArgs {
     "repositoryId": string;
     "changeContainerRepositoryCompartmentDetails": ChangeContainerRepositoryCompartmentDetails;
     "ifMatch"?: string;
     "opcRequestId"?: string;
     "opcRetryToken"?: string
}
export type ChangeContainerRepositoryCompartmentReturnType = Response;

export interface ChangeRepositoryCompartmentArgs {
     "repositoryId": string;
     "changeRepositoryCompartmentDetails": ChangeRepositoryCompartmentDetails;
     "ifMatch"?: string;
     "opcRequestId"?: string;
     "opcRetryToken"?: string
}
export type ChangeRepositoryCompartmentReturnType = Response;

export interface CreateContainerImageSignatureArgs {
     "createContainerImageSignatureDetails": CreateContainerImageSignatureDetails;
     "opcRequestId"?: string;
     "opcRetryToken"?: string;
     "ifMatch"?: string
}
export type CreateContainerImageSignatureReturnType = { response: Response, data: ContainerImageSignature };

export interface CreateContainerRepositoryArgs {
     "createContainerRepositoryDetails": CreateContainerRepositoryDetails;
     "opcRequestId"?: string;
     "opcRetryToken"?: string
}
export type CreateContainerRepositoryReturnType = { response: Response, data: ContainerRepository };

export interface CreateRepositoryArgs {
     "createRepositoryDetails": CreateRepositoryDetails;
     "opcRequestId"?: string;
     "opcRetryToken"?: string
}
export type CreateRepositoryReturnType = { response: Response, data: Repository };

export interface DeleteContainerImageArgs {
     "imageId": string;
     "ifMatch"?: string;
     "opcRequestId"?: string
}
export type DeleteContainerImageReturnType = Response;

export interface DeleteContainerImageSignatureArgs {
     "imageSignatureId": string;
     "opcRequestId"?: string;
     "ifMatch"?: string
}
export type DeleteContainerImageSignatureReturnType = Response;

export interface DeleteContainerRepositoryArgs {
     "repositoryId": string;
     "ifMatch"?: string;
     "opcRequestId"?: string
}
export type DeleteContainerRepositoryReturnType = Response;

export interface DeleteGenericArtifactArgs {
     "artifactId": string;
     "ifMatch"?: string;
     "opcRequestId"?: string
}
export type DeleteGenericArtifactReturnType = Response;

export interface DeleteGenericArtifactByPathArgs {
     "repositoryId": string;
     "artifactPath": string;
     "version": string;
     "ifMatch"?: string;
     "opcRequestId"?: string
}
export type DeleteGenericArtifactByPathReturnType = Response;

export interface DeleteRepositoryArgs {
     "repositoryId": string;
     "ifMatch"?: string;
     "opcRequestId"?: string
}
export type DeleteRepositoryReturnType = Response;

export interface GetContainerConfigurationArgs {
     "compartmentId": string;
     "opcRequestId"?: string
}
export type GetContainerConfigurationReturnType = { response: Response, data: ContainerConfiguration };

export interface GetContainerImageArgs {
     "imageId": string;
     "opcRequestId"?: string
}
export type GetContainerImageReturnType = { response: Response, data: ContainerImage };

export interface GetContainerImageSignatureArgs {
     "imageSignatureId": string;
     "opcRequestId"?: string
}
export type GetContainerImageSignatureReturnType = { response: Response, data: ContainerImageSignature };

export interface GetContainerRepositoryArgs {
     "repositoryId": string;
     "opcRequestId"?: string
}
export type GetContainerRepositoryReturnType = { response: Response, data: ContainerRepository };

export interface GetGenericArtifactArgs {
     "artifactId": string;
     "opcRequestId"?: string
}
export type GetGenericArtifactReturnType = { response: Response, data: GenericArtifact };

export interface GetGenericArtifactByPathArgs {
     "repositoryId": string;
     "artifactPath": string;
     "version": string;
     "opcRequestId"?: string
}
export type GetGenericArtifactByPathReturnType = { response: Response, data: GenericArtifact };

export interface GetRepositoryArgs {
     "repositoryId": string;
     "opcRequestId"?: string
}
export type GetRepositoryReturnType = { response: Response, data: Repository };

export interface ListContainerImageSignaturesArgs {
     "compartmentId": string;
     "compartmentIdInSubtree"?: boolean;
     "imageId"?: string;
     "repositoryId"?: string;
     "repositoryName"?: string;
     "imageDigest"?: string;
     "displayName"?: string;
     "kmsKeyId"?: string;
     "kmsKeyVersionId"?: string;
     "signingAlgorithm"?: string;
     "limit"?: number;
     "page"?: string;
     "opcRequestId"?: string;
     "sortBy"?: string;
     "sortOrder"?: string
}
export type ListContainerImageSignaturesReturnType = { response: Response, data: ContainerImageSignatureCollection };

export interface ListContainerImagesArgs {
     "compartmentId": string;
     "compartmentIdInSubtree"?: boolean;
     "displayName"?: string;
     "imageId"?: string;
     "isVersioned"?: boolean;
     "repositoryId"?: string;
     "repositoryName"?: string;
     "version"?: string;
     "lifecycleState"?: string;
     "limit"?: number;
     "page"?: string;
     "opcRequestId"?: string;
     "sortBy"?: string;
     "sortOrder"?: string
}
export type ListContainerImagesReturnType = { response: Response, data: ContainerImageCollection };

export interface ListContainerRepositoriesArgs {
     "compartmentId": string;
     "compartmentIdInSubtree"?: boolean;
     "repositoryId"?: string;
     "displayName"?: string;
     "isPublic"?: boolean;
     "lifecycleState"?: string;
     "limit"?: number;
     "page"?: string;
     "opcRequestId"?: string;
     "sortBy"?: string;
     "sortOrder"?: string
}
export type ListContainerRepositoriesReturnType = { response: Response, data: ContainerRepositoryCollection };

export interface ListGenericArtifactsArgs {
     "compartmentId": string;
     "repositoryId": string;
     "id"?: string;
     "displayName"?: string;
     "artifactPath"?: string;
     "version"?: string;
     "sha256"?: string;
     "lifecycleState"?: string;
     "limit"?: number;
     "page"?: string;
     "opcRequestId"?: string;
     "sortBy"?: string;
     "sortOrder"?: string
}
export type ListGenericArtifactsReturnType = { response: Response, data: GenericArtifactCollection };

export interface ListRepositoriesArgs {
     "compartmentId": string;
     "id"?: string;
     "displayName"?: string;
     "isImmutable"?: boolean;
     "lifecycleState"?: string;
     "limit"?: number;
     "page"?: string;
     "opcRequestId"?: string;
     "sortBy"?: string;
     "sortOrder"?: string
}
export type ListRepositoriesReturnType = { response: Response, data: RepositoryCollection };

export interface RemoveContainerVersionArgs {
     "imageId": string;
     "removeContainerVersionDetails": RemoveContainerVersionDetails;
     "ifMatch"?: string;
     "opcRequestId"?: string;
     "opcRetryToken"?: string
}
export type RemoveContainerVersionReturnType = { response: Response, data: ContainerImage };

export interface RestoreContainerImageArgs {
     "imageId": string;
     "restoreContainerImageDetails": RestoreContainerImageDetails;
     "ifMatch"?: string;
     "opcRequestId"?: string;
     "opcRetryToken"?: string
}
export type RestoreContainerImageReturnType = { response: Response, data: ContainerImage };

export interface UpdateContainerConfigurationArgs {
     "compartmentId": string;
     "updateContainerConfigurationDetails": UpdateContainerConfigurationDetails;
     "ifMatch"?: string;
     "opcRequestId"?: string
}
export type UpdateContainerConfigurationReturnType = { response: Response, data: ContainerConfiguration };

export interface UpdateContainerRepositoryArgs {
     "repositoryId": string;
     "updateContainerRepositoryDetails": UpdateContainerRepositoryDetails;
     "ifMatch"?: string;
     "opcRequestId"?: string
}
export type UpdateContainerRepositoryReturnType = { response: Response, data: ContainerRepository };

export interface UpdateGenericArtifactArgs {
     "artifactId": string;
     "updateGenericArtifactDetails": UpdateGenericArtifactDetails;
     "ifMatch"?: string;
     "opcRequestId"?: string
}
export type UpdateGenericArtifactReturnType = { response: Response, data: GenericArtifact };

export interface UpdateGenericArtifactByPathArgs {
     "repositoryId": string;
     "artifactPath": string;
     "version": string;
     "updateGenericArtifactByPathDetails": UpdateGenericArtifactByPathDetails;
     "ifMatch"?: string;
     "opcRequestId"?: string
}
export type UpdateGenericArtifactByPathReturnType = { response: Response, data: GenericArtifact };

export interface UpdateRepositoryArgs {
     "repositoryId": string;
     "updateRepositoryDetails": UpdateRepositoryDetails;
     "ifMatch"?: string;
     "opcRequestId"?: string
}
export type UpdateRepositoryReturnType = { response: Response, data: Repository };


/**
 * ArtifactsApi - object-oriented interface
 */
export class ArtifactsApi extends base.BaseAPI {
    public static createFromEndpointTemplate(fetch: base.Fetch, region: string, secondLevelDomain: string, config?: base.BaseApiConfig): ArtifactsApi {
        const endpoint = base.buildEndpointFromTemplate(
            "https://artifacts.{region}.oci.{secondLevelDomain}",
            "/20160918",
            region,
            secondLevelDomain
        );

        return new ArtifactsApi(fetch, endpoint, config);
    }

    /** 
     * ChangeContainerRepositoryCompartment
     * Moves a container repository into a different compartment within the same tenancy. For information about moving resources between compartments, see [Moving Resources to a Different Compartment](/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes). 
     * @param repositoryId The [OCID](/iaas/Content/General/Concepts/identifiers.htm) of the container repository.  Example: &#x60;ocid1.containerrepo.oc1..exampleuniqueID&#x60; 
     * @param changeContainerRepositoryCompartmentDetails Change container repository compartment details.
     * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value. 
     * @param opcRequestId Unique identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID. 
     * @param opcRetryToken A token that uniquely identifies a request so it can be retried in case of a timeout or server error without risk of executing that same action again. Retry tokens expire after 24 hours, but can be invalidated before then due to conflicting operations (for example, if a resource has been deleted and purged from the system, then a retry of the original creation request may be rejected). 
     */
    public changeContainerRepositoryCompartment(params: {  "repositoryId": string; "changeContainerRepositoryCompartmentDetails": ChangeContainerRepositoryCompartmentDetails; "ifMatch"?: string; "opcRequestId"?: string; "opcRetryToken"?: string; }, options?: any): Promise<Response> {
        base.validateRequiredParameters([
            "repositoryId",
            "changeContainerRepositoryCompartmentDetails",
        ], "changeContainerRepositoryCompartment", params);

        const path = `${this.basePath}/container/repositories/{repositoryId}/actions/changeCompartment`
            .replace(`{${"repositoryId"}}`, `${ params["repositoryId"] }`);

        return this.request({
            options,
            path,


            headerParameters: {
                "if-match":  params["ifMatch"],
                "opc-request-id":  params["opcRequestId"],
                "opc-retry-token":  params["opcRetryToken"]
            },

                    body: 
                    {
                        type: "content",
                        contentType: (params as any)["contentType"] ? (params as any)["contentType"] as string : "application/json",
                        content: params["changeContainerRepositoryCompartmentDetails"]
                    },


            operationName: "changeContainerRepositoryCompartment",
            httpMethod: "POST"
        });
    }
    /** 
     * ChangeRepositoryCompartment
     * Moves a repository into a different compartment within the same tenancy. For information about moving resources between compartments, see [Moving Resources to a Different Compartment](/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes). 
     * @param repositoryId The [OCID](/iaas/Content/General/Concepts/identifiers.htm) of the repository.  Example: &#x60;ocid1.artifactrepository.oc1..exampleuniqueID&#x60; 
     * @param changeRepositoryCompartmentDetails Moves a repository into a different compartment.
     * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value. 
     * @param opcRequestId Unique identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID. 
     * @param opcRetryToken A token that uniquely identifies a request so it can be retried in case of a timeout or server error without risk of executing that same action again. Retry tokens expire after 24 hours, but can be invalidated before then due to conflicting operations (for example, if a resource has been deleted and purged from the system, then a retry of the original creation request may be rejected). 
     */
    public changeRepositoryCompartment(params: {  "repositoryId": string; "changeRepositoryCompartmentDetails": ChangeRepositoryCompartmentDetails; "ifMatch"?: string; "opcRequestId"?: string; "opcRetryToken"?: string; }, options?: any): Promise<Response> {
        base.validateRequiredParameters([
            "repositoryId",
            "changeRepositoryCompartmentDetails",
        ], "changeRepositoryCompartment", params);

        const path = `${this.basePath}/repositories/{repositoryId}/actions/changeCompartment`
            .replace(`{${"repositoryId"}}`, `${ params["repositoryId"] }`);

        return this.request({
            options,
            path,


            headerParameters: {
                "if-match":  params["ifMatch"],
                "opc-request-id":  params["opcRequestId"],
                "opc-retry-token":  params["opcRetryToken"]
            },

                    body: 
                    {
                        type: "content",
                        contentType: (params as any)["contentType"] ? (params as any)["contentType"] as string : "application/json",
                        content: params["changeRepositoryCompartmentDetails"]
                    },


            operationName: "changeRepositoryCompartment",
            httpMethod: "POST"
        });
    }
    /** 
     * CreateContainerImageSignature
     * Upload a signature to an image.
     * @param createContainerImageSignatureDetails Upload container image signature details
     * @param opcRequestId Unique identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID. 
     * @param opcRetryToken A token that uniquely identifies a request so it can be retried in case of a timeout or server error without risk of executing that same action again. Retry tokens expire after 24 hours, but can be invalidated before then due to conflicting operations (for example, if a resource has been deleted and purged from the system, then a retry of the original creation request may be rejected). 
     * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value. 
     */
    public createContainerImageSignature(params: {  "createContainerImageSignatureDetails": CreateContainerImageSignatureDetails; "opcRequestId"?: string; "opcRetryToken"?: string; "ifMatch"?: string; }, options?: any): Promise<{ response: Response, data: ContainerImageSignature }> {
        base.validateRequiredParameters([
            "createContainerImageSignatureDetails",
        ], "createContainerImageSignature", params);

        const path = `${this.basePath}/container/imageSignatures`;

        return this.request<ContainerImageSignature>({
            options,
            path,


            headerParameters: {
                "opc-request-id":  params["opcRequestId"],
                "opc-retry-token":  params["opcRetryToken"],
                "if-match":  params["ifMatch"]
            },

                    body: 
                    {
                        type: "content",
                        contentType: (params as any)["contentType"] ? (params as any)["contentType"] as string : "application/json",
                        content: params["createContainerImageSignatureDetails"]
                    },

            parseResponseBody: true,

            operationName: "createContainerImageSignature",
            httpMethod: "POST"
        });
    }
    /** 
     * CreateContainerRepository
     * Create a new empty container repository. Avoid entering confidential information.
     * @param createContainerRepositoryDetails Create container repository details.
     * @param opcRequestId Unique identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID. 
     * @param opcRetryToken A token that uniquely identifies a request so it can be retried in case of a timeout or server error without risk of executing that same action again. Retry tokens expire after 24 hours, but can be invalidated before then due to conflicting operations (for example, if a resource has been deleted and purged from the system, then a retry of the original creation request may be rejected). 
     */
    public createContainerRepository(params: {  "createContainerRepositoryDetails": CreateContainerRepositoryDetails; "opcRequestId"?: string; "opcRetryToken"?: string; }, options?: any): Promise<{ response: Response, data: ContainerRepository }> {
        base.validateRequiredParameters([
            "createContainerRepositoryDetails",
        ], "createContainerRepository", params);

        const path = `${this.basePath}/container/repositories`;

        return this.request<ContainerRepository>({
            options,
            path,


            headerParameters: {
                "opc-request-id":  params["opcRequestId"],
                "opc-retry-token":  params["opcRetryToken"]
            },

                    body: 
                    {
                        type: "content",
                        contentType: (params as any)["contentType"] ? (params as any)["contentType"] as string : "application/json",
                        content: params["createContainerRepositoryDetails"]
                    },

            parseResponseBody: true,

            operationName: "createContainerRepository",
            httpMethod: "POST"
        });
    }
    /** 
     * CreateRepository
     * Creates a new repository for storing artifacts.
     * @param createRepositoryDetails Creates a new repository for storing artifacts.
     * @param opcRequestId Unique identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID. 
     * @param opcRetryToken A token that uniquely identifies a request so it can be retried in case of a timeout or server error without risk of executing that same action again. Retry tokens expire after 24 hours, but can be invalidated before then due to conflicting operations (for example, if a resource has been deleted and purged from the system, then a retry of the original creation request may be rejected). 
     */
    public createRepository(params: {  "createRepositoryDetails": CreateRepositoryDetails; "opcRequestId"?: string; "opcRetryToken"?: string; }, options?: any): Promise<{ response: Response, data: Repository }> {
        base.validateRequiredParameters([
            "createRepositoryDetails",
        ], "createRepository", params);

        const path = `${this.basePath}/repositories`;

        return this.request<Repository>({
            options,
            path,


            headerParameters: {
                "opc-request-id":  params["opcRequestId"],
                "opc-retry-token":  params["opcRetryToken"]
            },

                    body: 
                    {
                        type: "content",
                        contentType: (params as any)["contentType"] ? (params as any)["contentType"] as string : "application/json",
                        content: params["createRepositoryDetails"]
                    },

            parseResponseBody: true,

            operationName: "createRepository",
            httpMethod: "POST"
        });
    }
    /** 
     * DeleteContainerImage
     * Delete a container image.
     * @param imageId The [OCID](/iaas/Content/General/Concepts/identifiers.htm) of the container image.  Example: &#x60;ocid1.containerimage.oc1..exampleuniqueID&#x60; 
     * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value. 
     * @param opcRequestId Unique identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID. 
     */
    public deleteContainerImage(params: {  "imageId": string; "ifMatch"?: string; "opcRequestId"?: string; }, options?: any): Promise<Response> {
        base.validateRequiredParameters([
            "imageId",
        ], "deleteContainerImage", params);

        const path = `${this.basePath}/container/images/{imageId}`
            .replace(`{${"imageId"}}`, `${ params["imageId"] }`);

        return this.request({
            options,
            path,


            headerParameters: {
                "if-match":  params["ifMatch"],
                "opc-request-id":  params["opcRequestId"]
            },



            operationName: "deleteContainerImage",
            httpMethod: "DELETE"
        });
    }
    /** 
     * DeleteContainerImageSignature
     * Delete a container image signature.
     * @param imageSignatureId The [OCID](/iaas/Content/General/Concepts/identifiers.htm) of the container image signature.  Example: &#x60;ocid1.containersignature.oc1..exampleuniqueID&#x60; 
     * @param opcRequestId Unique identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID. 
     * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value. 
     */
    public deleteContainerImageSignature(params: {  "imageSignatureId": string; "opcRequestId"?: string; "ifMatch"?: string; }, options?: any): Promise<Response> {
        base.validateRequiredParameters([
            "imageSignatureId",
        ], "deleteContainerImageSignature", params);

        const path = `${this.basePath}/container/imageSignatures/{imageSignatureId}`
            .replace(`{${"imageSignatureId"}}`, `${ params["imageSignatureId"] }`);

        return this.request({
            options,
            path,


            headerParameters: {
                "opc-request-id":  params["opcRequestId"],
                "if-match":  params["ifMatch"]
            },



            operationName: "deleteContainerImageSignature",
            httpMethod: "DELETE"
        });
    }
    /** 
     * DeleteContainerRepository
     * Delete container repository.
     * @param repositoryId The [OCID](/iaas/Content/General/Concepts/identifiers.htm) of the container repository.  Example: &#x60;ocid1.containerrepo.oc1..exampleuniqueID&#x60; 
     * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value. 
     * @param opcRequestId Unique identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID. 
     */
    public deleteContainerRepository(params: {  "repositoryId": string; "ifMatch"?: string; "opcRequestId"?: string; }, options?: any): Promise<Response> {
        base.validateRequiredParameters([
            "repositoryId",
        ], "deleteContainerRepository", params);

        const path = `${this.basePath}/container/repositories/{repositoryId}`
            .replace(`{${"repositoryId"}}`, `${ params["repositoryId"] }`);

        return this.request({
            options,
            path,


            headerParameters: {
                "if-match":  params["ifMatch"],
                "opc-request-id":  params["opcRequestId"]
            },



            operationName: "deleteContainerRepository",
            httpMethod: "DELETE"
        });
    }
    /** 
     * DeleteGenericArtifact
     * Deletes an artifact with a specified [OCID](/iaas/Content/General/Concepts/identifiers.htm).
     * @param artifactId The [OCID](/iaas/Content/General/Concepts/identifiers.htm) of the artifact.  Example: &#x60;ocid1.genericartifact.oc1..exampleuniqueID&#x60; 
     * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value. 
     * @param opcRequestId Unique identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID. 
     */
    public deleteGenericArtifact(params: {  "artifactId": string; "ifMatch"?: string; "opcRequestId"?: string; }, options?: any): Promise<Response> {
        base.validateRequiredParameters([
            "artifactId",
        ], "deleteGenericArtifact", params);

        const path = `${this.basePath}/generic/artifacts/{artifactId}`
            .replace(`{${"artifactId"}}`, `${ params["artifactId"] }`);

        return this.request({
            options,
            path,


            headerParameters: {
                "if-match":  params["ifMatch"],
                "opc-request-id":  params["opcRequestId"]
            },



            operationName: "deleteGenericArtifact",
            httpMethod: "DELETE"
        });
    }
    /** 
     * DeleteGenericArtifactByPath
     * Deletes an artifact with a specified &#x60;artifactPath&#x60; and &#x60;version&#x60;.
     * @param repositoryId The [OCID](/iaas/Content/General/Concepts/identifiers.htm) of the repository.  Example: &#x60;ocid1.artifactrepository.oc1..exampleuniqueID&#x60; 
     * @param artifactPath A user-defined path to describe the location of an artifact. You can use slashes to organize the repository, but slashes do not create a directory structure. An artifact path does not include an artifact version.  Example: &#x60;project01/my-web-app/artifact-abc&#x60; 
     * @param version A user-defined string to describe the artifact version.  Example: &#x60;1.1.2&#x60; or &#x60;1.2-beta-2&#x60; 
     * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value. 
     * @param opcRequestId Unique identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID. 
     */
    public deleteGenericArtifactByPath(params: {  "repositoryId": string; "artifactPath": string; "version": string; "ifMatch"?: string; "opcRequestId"?: string; }, options?: any): Promise<Response> {
        base.validateRequiredParameters([
            "repositoryId",
            "artifactPath",
            "version",
        ], "deleteGenericArtifactByPath", params);

        const path = `${this.basePath}/generic/repositories/{repositoryId}/artifactPaths/{artifactPath}/versions/{version}`
            .replace(`{${"repositoryId"}}`, `${ params["repositoryId"] }`)
            .replace(`{${"artifactPath"}}`, `${ params["artifactPath"] }`)
            .replace(`{${"version"}}`, `${ params["version"] }`);

        return this.request({
            options,
            path,


            headerParameters: {
                "if-match":  params["ifMatch"],
                "opc-request-id":  params["opcRequestId"]
            },



            operationName: "deleteGenericArtifactByPath",
            httpMethod: "DELETE"
        });
    }
    /** 
     * DeleteRepository
     * Deletes the specified repository. This operation fails unless all associated artifacts are in a DELETED state. You must delete all associated artifacts before deleting a repository.
     * @param repositoryId The [OCID](/iaas/Content/General/Concepts/identifiers.htm) of the repository.  Example: &#x60;ocid1.artifactrepository.oc1..exampleuniqueID&#x60; 
     * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value. 
     * @param opcRequestId Unique identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID. 
     */
    public deleteRepository(params: {  "repositoryId": string; "ifMatch"?: string; "opcRequestId"?: string; }, options?: any): Promise<Response> {
        base.validateRequiredParameters([
            "repositoryId",
        ], "deleteRepository", params);

        const path = `${this.basePath}/repositories/{repositoryId}`
            .replace(`{${"repositoryId"}}`, `${ params["repositoryId"] }`);

        return this.request({
            options,
            path,


            headerParameters: {
                "if-match":  params["ifMatch"],
                "opc-request-id":  params["opcRequestId"]
            },



            operationName: "deleteRepository",
            httpMethod: "DELETE"
        });
    }
    /** 
     * GetContainerConfiguration
     * Get container configuration.
     * @param compartmentId The [OCID](/Content/General/Concepts/identifiers.htm) of the compartment.
     * @param opcRequestId Unique identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID. 
     */
    public getContainerConfiguration(params: {  "compartmentId": string; "opcRequestId"?: string; }, options?: any): Promise<{ response: Response, data: ContainerConfiguration }> {
        base.validateRequiredParameters([
            "compartmentId",
        ], "getContainerConfiguration", params);

        const path = `${this.basePath}/container/configuration`;

        return this.request<ContainerConfiguration>({
            options,
            path,

            queryParameters: {
                    "compartmentId": { values: params["compartmentId"] }
            },

            headerParameters: {
                "opc-request-id":  params["opcRequestId"]
            },


            parseResponseBody: true,

            operationName: "getContainerConfiguration",
            httpMethod: "GET"
        });
    }
    /** 
     * GetContainerImage
     * Get container image metadata.
     * @param imageId The [OCID](/iaas/Content/General/Concepts/identifiers.htm) of the container image.  Example: &#x60;ocid1.containerimage.oc1..exampleuniqueID&#x60; 
     * @param opcRequestId Unique identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID. 
     */
    public getContainerImage(params: {  "imageId": string; "opcRequestId"?: string; }, options?: any): Promise<{ response: Response, data: ContainerImage }> {
        base.validateRequiredParameters([
            "imageId",
        ], "getContainerImage", params);

        const path = `${this.basePath}/container/images/{imageId}`
            .replace(`{${"imageId"}}`, `${ params["imageId"] }`);

        return this.request<ContainerImage>({
            options,
            path,


            headerParameters: {
                "opc-request-id":  params["opcRequestId"]
            },


            parseResponseBody: true,

            operationName: "getContainerImage",
            httpMethod: "GET"
        });
    }
    /** 
     * GetContainerImageSignature
     * Get container image signature metadata.
     * @param imageSignatureId The [OCID](/iaas/Content/General/Concepts/identifiers.htm) of the container image signature.  Example: &#x60;ocid1.containersignature.oc1..exampleuniqueID&#x60; 
     * @param opcRequestId Unique identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID. 
     */
    public getContainerImageSignature(params: {  "imageSignatureId": string; "opcRequestId"?: string; }, options?: any): Promise<{ response: Response, data: ContainerImageSignature }> {
        base.validateRequiredParameters([
            "imageSignatureId",
        ], "getContainerImageSignature", params);

        const path = `${this.basePath}/container/imageSignatures/{imageSignatureId}`
            .replace(`{${"imageSignatureId"}}`, `${ params["imageSignatureId"] }`);

        return this.request<ContainerImageSignature>({
            options,
            path,


            headerParameters: {
                "opc-request-id":  params["opcRequestId"]
            },


            parseResponseBody: true,

            operationName: "getContainerImageSignature",
            httpMethod: "GET"
        });
    }
    /** 
     * GetContainerRepository
     * Get container repository.
     * @param repositoryId The [OCID](/iaas/Content/General/Concepts/identifiers.htm) of the container repository.  Example: &#x60;ocid1.containerrepo.oc1..exampleuniqueID&#x60; 
     * @param opcRequestId Unique identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID. 
     */
    public getContainerRepository(params: {  "repositoryId": string; "opcRequestId"?: string; }, options?: any): Promise<{ response: Response, data: ContainerRepository }> {
        base.validateRequiredParameters([
            "repositoryId",
        ], "getContainerRepository", params);

        const path = `${this.basePath}/container/repositories/{repositoryId}`
            .replace(`{${"repositoryId"}}`, `${ params["repositoryId"] }`);

        return this.request<ContainerRepository>({
            options,
            path,


            headerParameters: {
                "opc-request-id":  params["opcRequestId"]
            },


            parseResponseBody: true,

            operationName: "getContainerRepository",
            httpMethod: "GET"
        });
    }
    /** 
     * GetGenericArtifact
     * Gets information about an artifact with a specified [OCID](/iaas/Content/General/Concepts/identifiers.htm).
     * @param artifactId The [OCID](/iaas/Content/General/Concepts/identifiers.htm) of the artifact.  Example: &#x60;ocid1.genericartifact.oc1..exampleuniqueID&#x60; 
     * @param opcRequestId Unique identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID. 
     */
    public getGenericArtifact(params: {  "artifactId": string; "opcRequestId"?: string; }, options?: any): Promise<{ response: Response, data: GenericArtifact }> {
        base.validateRequiredParameters([
            "artifactId",
        ], "getGenericArtifact", params);

        const path = `${this.basePath}/generic/artifacts/{artifactId}`
            .replace(`{${"artifactId"}}`, `${ params["artifactId"] }`);

        return this.request<GenericArtifact>({
            options,
            path,


            headerParameters: {
                "opc-request-id":  params["opcRequestId"]
            },


            parseResponseBody: true,

            operationName: "getGenericArtifact",
            httpMethod: "GET"
        });
    }
    /** 
     * GetGenericArtifactByPath
     * Gets information about an artifact with a specified &#x60;artifactPath&#x60; and &#x60;version&#x60;.
     * @param repositoryId The [OCID](/iaas/Content/General/Concepts/identifiers.htm) of the repository.  Example: &#x60;ocid1.artifactrepository.oc1..exampleuniqueID&#x60; 
     * @param artifactPath A user-defined path to describe the location of an artifact. You can use slashes to organize the repository, but slashes do not create a directory structure. An artifact path does not include an artifact version.  Example: &#x60;project01/my-web-app/artifact-abc&#x60; 
     * @param version A user-defined string to describe the artifact version.  Example: &#x60;1.1.2&#x60; or &#x60;1.2-beta-2&#x60; 
     * @param opcRequestId Unique identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID. 
     */
    public getGenericArtifactByPath(params: {  "repositoryId": string; "artifactPath": string; "version": string; "opcRequestId"?: string; }, options?: any): Promise<{ response: Response, data: GenericArtifact }> {
        base.validateRequiredParameters([
            "repositoryId",
            "artifactPath",
            "version",
        ], "getGenericArtifactByPath", params);

        const path = `${this.basePath}/generic/repositories/{repositoryId}/artifactPaths/{artifactPath}/versions/{version}`
            .replace(`{${"repositoryId"}}`, `${ params["repositoryId"] }`)
            .replace(`{${"artifactPath"}}`, `${ params["artifactPath"] }`)
            .replace(`{${"version"}}`, `${ params["version"] }`);

        return this.request<GenericArtifact>({
            options,
            path,


            headerParameters: {
                "opc-request-id":  params["opcRequestId"]
            },


            parseResponseBody: true,

            operationName: "getGenericArtifactByPath",
            httpMethod: "GET"
        });
    }
    /** 
     * GetRepository
     * Gets the specified repository&#39;s information.
     * @param repositoryId The [OCID](/iaas/Content/General/Concepts/identifiers.htm) of the repository.  Example: &#x60;ocid1.artifactrepository.oc1..exampleuniqueID&#x60; 
     * @param opcRequestId Unique identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID. 
     */
    public getRepository(params: {  "repositoryId": string; "opcRequestId"?: string; }, options?: any): Promise<{ response: Response, data: Repository }> {
        base.validateRequiredParameters([
            "repositoryId",
        ], "getRepository", params);

        const path = `${this.basePath}/repositories/{repositoryId}`
            .replace(`{${"repositoryId"}}`, `${ params["repositoryId"] }`);

        return this.request<Repository>({
            options,
            path,


            headerParameters: {
                "opc-request-id":  params["opcRequestId"]
            },


            parseResponseBody: true,

            operationName: "getRepository",
            httpMethod: "GET"
        });
    }
    /** 
     * ListContainerImageSignatures
     * List container image signatures in an image.
     * @param compartmentId The [OCID](/Content/General/Concepts/identifiers.htm) of the compartment.
     * @param compartmentIdInSubtree When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are inspected depending on the the setting of &#x60;accessLevel&#x60;. Default is false. Can only be set to true when calling the API on the tenancy (root compartment). 
     * @param imageId A filter to return a container image summary only for the specified container image OCID. 
     * @param repositoryId A filter to return container images only for the specified container repository OCID. 
     * @param repositoryName A filter to return container images or container image signatures that match the repository name.  Example: &#x60;foo&#x60; or &#x60;foo*&#x60; 
     * @param imageDigest The digest of the container image.  Example: &#x60;sha256:e7d38b3517548a1c71e41bffe9c8ae6d6d29546ce46bf62159837aad072c90aa&#x60; 
     * @param displayName A filter to return only resources that match the given display name exactly. 
     * @param kmsKeyId The [OCID](/Content/General/Concepts/identifiers.htm) of the kmsKeyVersionId used to sign the container image.  Example: &#x60;ocid1.keyversion.oc1..exampleuniqueID&#x60; 
     * @param kmsKeyVersionId The [OCID](/Content/General/Concepts/identifiers.htm) of the kmsKeyVersionId used to sign the container image.  Example: &#x60;ocid1.keyversion.oc1..exampleuniqueID&#x60; 
     * @param signingAlgorithm The algorithm to be used for signing. These are the only supported signing algorithms for container images.
     * @param limit For list pagination. The maximum number of results per page, or items to return in a paginated \&quot;List\&quot; call. For important details about how pagination works, see [List Pagination](/iaas/Content/API/Concepts/usingapi.htm#nine).  Example: &#x60;50&#x60; 
     * @param page For list pagination. The value of the &#x60;opc-next-page&#x60; response header from the previous \&quot;List\&quot; call. For important details about how pagination works, see [List Pagination](/iaas/Content/API/Concepts/usingapi.htm#nine). 
     * @param opcRequestId Unique identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID. 
     * @param sortBy The field to sort by. You can provide one sort order (&#x60;sortOrder&#x60;). Default order for TIMECREATED is descending. Default order for DISPLAYNAME is ascending. The DISPLAYNAME sort order is case sensitive.  **Note:** In general, some \&quot;List\&quot; operations (for example, &#x60;ListInstances&#x60;) let you optionally filter by availability domain if the scope of the resource type is within a single availability domain. If you call one of these \&quot;List\&quot; operations without specifying an availability domain, the resources are grouped by availability domain, then sorted. 
     * @param sortOrder The sort order to use, either ascending (&#x60;ASC&#x60;) or descending (&#x60;DESC&#x60;). The DISPLAYNAME sort order is case sensitive. 
     */
    public listContainerImageSignatures(params: {  "compartmentId": string; "compartmentIdInSubtree"?: boolean; "imageId"?: string; "repositoryId"?: string; "repositoryName"?: string; "imageDigest"?: string; "displayName"?: string; "kmsKeyId"?: string; "kmsKeyVersionId"?: string; "signingAlgorithm"?: string; "limit"?: number; "page"?: string; "opcRequestId"?: string; "sortBy"?: string; "sortOrder"?: string; }, options?: any): Promise<{ response: Response, data: ContainerImageSignatureCollection }> {
        base.validateRequiredParameters([
            "compartmentId",
        ], "listContainerImageSignatures", params);

        const path = `${this.basePath}/container/imageSignatures`;

        return this.request<ContainerImageSignatureCollection>({
            options,
            path,

            queryParameters: {
                    "compartmentIdInSubtree": { values: params["compartmentIdInSubtree"] },
                    "compartmentId": { values: params["compartmentId"] },
                    "imageId": { values: params["imageId"] },
                    "repositoryId": { values: params["repositoryId"] },
                    "repositoryName": { values: params["repositoryName"] },
                    "imageDigest": { values: params["imageDigest"] },
                    "displayName": { values: params["displayName"] },
                    "kmsKeyId": { values: params["kmsKeyId"] },
                    "kmsKeyVersionId": { values: params["kmsKeyVersionId"] },
                    "signingAlgorithm": { values: params["signingAlgorithm"] },
                    "limit": { values: params["limit"] },
                    "page": { values: params["page"] },
                    "sortBy": { values: params["sortBy"] },
                    "sortOrder": { values: params["sortOrder"] }
            },

            headerParameters: {
                "opc-request-id":  params["opcRequestId"]
            },


            parseResponseBody: true,

            operationName: "listContainerImageSignatures",
            httpMethod: "GET"
        });
    }
    /** 
     * ListContainerImages
     * List container images in a compartment.
     * @param compartmentId The [OCID](/Content/General/Concepts/identifiers.htm) of the compartment.
     * @param compartmentIdInSubtree When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are inspected depending on the the setting of &#x60;accessLevel&#x60;. Default is false. Can only be set to true when calling the API on the tenancy (root compartment). 
     * @param displayName A filter to return only resources that match the given display name exactly. 
     * @param imageId A filter to return a container image summary only for the specified container image OCID. 
     * @param isVersioned A filter to return container images based on whether there are any associated versions. 
     * @param repositoryId A filter to return container images only for the specified container repository OCID. 
     * @param repositoryName A filter to return container images or container image signatures that match the repository name.  Example: &#x60;foo&#x60; or &#x60;foo*&#x60; 
     * @param version A filter to return container images that match the version.  Example: &#x60;foo&#x60; or &#x60;foo*&#x60; 
     * @param lifecycleState A filter to return only resources that match the given lifecycle state name exactly. 
     * @param limit For list pagination. The maximum number of results per page, or items to return in a paginated \&quot;List\&quot; call. For important details about how pagination works, see [List Pagination](/iaas/Content/API/Concepts/usingapi.htm#nine).  Example: &#x60;50&#x60; 
     * @param page For list pagination. The value of the &#x60;opc-next-page&#x60; response header from the previous \&quot;List\&quot; call. For important details about how pagination works, see [List Pagination](/iaas/Content/API/Concepts/usingapi.htm#nine). 
     * @param opcRequestId Unique identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID. 
     * @param sortBy The field to sort by. You can provide one sort order (&#x60;sortOrder&#x60;). Default order for TIMECREATED is descending. Default order for DISPLAYNAME is ascending. The DISPLAYNAME sort order is case sensitive.  **Note:** In general, some \&quot;List\&quot; operations (for example, &#x60;ListInstances&#x60;) let you optionally filter by availability domain if the scope of the resource type is within a single availability domain. If you call one of these \&quot;List\&quot; operations without specifying an availability domain, the resources are grouped by availability domain, then sorted. 
     * @param sortOrder The sort order to use, either ascending (&#x60;ASC&#x60;) or descending (&#x60;DESC&#x60;). The DISPLAYNAME sort order is case sensitive. 
     */
    public listContainerImages(params: {  "compartmentId": string; "compartmentIdInSubtree"?: boolean; "displayName"?: string; "imageId"?: string; "isVersioned"?: boolean; "repositoryId"?: string; "repositoryName"?: string; "version"?: string; "lifecycleState"?: string; "limit"?: number; "page"?: string; "opcRequestId"?: string; "sortBy"?: string; "sortOrder"?: string; }, options?: any): Promise<{ response: Response, data: ContainerImageCollection }> {
        base.validateRequiredParameters([
            "compartmentId",
        ], "listContainerImages", params);

        const path = `${this.basePath}/container/images`;

        return this.request<ContainerImageCollection>({
            options,
            path,

            queryParameters: {
                    "compartmentIdInSubtree": { values: params["compartmentIdInSubtree"] },
                    "compartmentId": { values: params["compartmentId"] },
                    "displayName": { values: params["displayName"] },
                    "imageId": { values: params["imageId"] },
                    "isVersioned": { values: params["isVersioned"] },
                    "repositoryId": { values: params["repositoryId"] },
                    "repositoryName": { values: params["repositoryName"] },
                    "version": { values: params["version"] },
                    "lifecycleState": { values: params["lifecycleState"] },
                    "limit": { values: params["limit"] },
                    "page": { values: params["page"] },
                    "sortBy": { values: params["sortBy"] },
                    "sortOrder": { values: params["sortOrder"] }
            },

            headerParameters: {
                "opc-request-id":  params["opcRequestId"]
            },


            parseResponseBody: true,

            operationName: "listContainerImages",
            httpMethod: "GET"
        });
    }
    /** 
     * ListContainerRepositories
     * List container repositories in a compartment.
     * @param compartmentId The [OCID](/Content/General/Concepts/identifiers.htm) of the compartment.
     * @param compartmentIdInSubtree When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are inspected depending on the the setting of &#x60;accessLevel&#x60;. Default is false. Can only be set to true when calling the API on the tenancy (root compartment). 
     * @param repositoryId A filter to return container images only for the specified container repository OCID. 
     * @param displayName A filter to return only resources that match the given display name exactly. 
     * @param isPublic A filter to return resources that match the isPublic value. 
     * @param lifecycleState A filter to return only resources that match the given lifecycle state name exactly. 
     * @param limit For list pagination. The maximum number of results per page, or items to return in a paginated \&quot;List\&quot; call. For important details about how pagination works, see [List Pagination](/iaas/Content/API/Concepts/usingapi.htm#nine).  Example: &#x60;50&#x60; 
     * @param page For list pagination. The value of the &#x60;opc-next-page&#x60; response header from the previous \&quot;List\&quot; call. For important details about how pagination works, see [List Pagination](/iaas/Content/API/Concepts/usingapi.htm#nine). 
     * @param opcRequestId Unique identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID. 
     * @param sortBy The field to sort by. You can provide one sort order (&#x60;sortOrder&#x60;). Default order for TIMECREATED is descending. Default order for DISPLAYNAME is ascending. The DISPLAYNAME sort order is case sensitive.  **Note:** In general, some \&quot;List\&quot; operations (for example, &#x60;ListInstances&#x60;) let you optionally filter by availability domain if the scope of the resource type is within a single availability domain. If you call one of these \&quot;List\&quot; operations without specifying an availability domain, the resources are grouped by availability domain, then sorted. 
     * @param sortOrder The sort order to use, either ascending (&#x60;ASC&#x60;) or descending (&#x60;DESC&#x60;). The DISPLAYNAME sort order is case sensitive. 
     */
    public listContainerRepositories(params: {  "compartmentId": string; "compartmentIdInSubtree"?: boolean; "repositoryId"?: string; "displayName"?: string; "isPublic"?: boolean; "lifecycleState"?: string; "limit"?: number; "page"?: string; "opcRequestId"?: string; "sortBy"?: string; "sortOrder"?: string; }, options?: any): Promise<{ response: Response, data: ContainerRepositoryCollection }> {
        base.validateRequiredParameters([
            "compartmentId",
        ], "listContainerRepositories", params);

        const path = `${this.basePath}/container/repositories`;

        return this.request<ContainerRepositoryCollection>({
            options,
            path,

            queryParameters: {
                    "compartmentIdInSubtree": { values: params["compartmentIdInSubtree"] },
                    "compartmentId": { values: params["compartmentId"] },
                    "repositoryId": { values: params["repositoryId"] },
                    "displayName": { values: params["displayName"] },
                    "isPublic": { values: params["isPublic"] },
                    "lifecycleState": { values: params["lifecycleState"] },
                    "limit": { values: params["limit"] },
                    "page": { values: params["page"] },
                    "sortBy": { values: params["sortBy"] },
                    "sortOrder": { values: params["sortOrder"] }
            },

            headerParameters: {
                "opc-request-id":  params["opcRequestId"]
            },


            parseResponseBody: true,

            operationName: "listContainerRepositories",
            httpMethod: "GET"
        });
    }
    /** 
     * ListGenericArtifacts
     * Lists artifacts in the specified repository.
     * @param compartmentId The [OCID](/Content/General/Concepts/identifiers.htm) of the compartment.
     * @param repositoryId A filter to return the artifacts only for the specified repository OCID. 
     * @param id A filter to return the resources for the specified OCID. 
     * @param displayName A filter to return only resources that match the given display name exactly. 
     * @param artifactPath Filter results by a prefix for the &#x60;artifactPath&#x60; and and return artifacts that begin with the specified prefix in their path. 
     * @param version Filter results by a prefix for &#x60;version&#x60; and return artifacts that that begin with the specified prefix in their version. 
     * @param sha256 Filter results by a specified SHA256 digest for the artifact. 
     * @param lifecycleState A filter to return only resources that match the given lifecycle state name exactly. 
     * @param limit For list pagination. The maximum number of results per page, or items to return in a paginated \&quot;List\&quot; call. For important details about how pagination works, see [List Pagination](/iaas/Content/API/Concepts/usingapi.htm#nine).  Example: &#x60;50&#x60; 
     * @param page For list pagination. The value of the &#x60;opc-next-page&#x60; response header from the previous \&quot;List\&quot; call. For important details about how pagination works, see [List Pagination](/iaas/Content/API/Concepts/usingapi.htm#nine). 
     * @param opcRequestId Unique identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID. 
     * @param sortBy The field to sort by. You can provide one sort order (&#x60;sortOrder&#x60;). Default order for TIMECREATED is descending. Default order for DISPLAYNAME is ascending. The DISPLAYNAME sort order is case sensitive.  **Note:** In general, some \&quot;List\&quot; operations (for example, &#x60;ListInstances&#x60;) let you optionally filter by availability domain if the scope of the resource type is within a single availability domain. If you call one of these \&quot;List\&quot; operations without specifying an availability domain, the resources are grouped by availability domain, then sorted. 
     * @param sortOrder The sort order to use, either ascending (&#x60;ASC&#x60;) or descending (&#x60;DESC&#x60;). The DISPLAYNAME sort order is case sensitive. 
     */
    public listGenericArtifacts(params: {  "compartmentId": string; "repositoryId": string; "id"?: string; "displayName"?: string; "artifactPath"?: string; "version"?: string; "sha256"?: string; "lifecycleState"?: string; "limit"?: number; "page"?: string; "opcRequestId"?: string; "sortBy"?: string; "sortOrder"?: string; }, options?: any): Promise<{ response: Response, data: GenericArtifactCollection }> {
        base.validateRequiredParameters([
            "compartmentId",
            "repositoryId",
        ], "listGenericArtifacts", params);

        const path = `${this.basePath}/generic/artifacts`;

        return this.request<GenericArtifactCollection>({
            options,
            path,

            queryParameters: {
                    "compartmentId": { values: params["compartmentId"] },
                    "repositoryId": { values: params["repositoryId"] },
                    "id": { values: params["id"] },
                    "displayName": { values: params["displayName"] },
                    "artifactPath": { values: params["artifactPath"] },
                    "version": { values: params["version"] },
                    "sha256": { values: params["sha256"] },
                    "lifecycleState": { values: params["lifecycleState"] },
                    "limit": { values: params["limit"] },
                    "page": { values: params["page"] },
                    "sortBy": { values: params["sortBy"] },
                    "sortOrder": { values: params["sortOrder"] }
            },

            headerParameters: {
                "opc-request-id":  params["opcRequestId"]
            },


            parseResponseBody: true,

            operationName: "listGenericArtifacts",
            httpMethod: "GET"
        });
    }
    /** 
     * ListRepositories
     * Lists repositories in the specified compartment.
     * @param compartmentId The [OCID](/Content/General/Concepts/identifiers.htm) of the compartment.
     * @param id A filter to return the resources for the specified OCID. 
     * @param displayName A filter to return only resources that match the given display name exactly. 
     * @param isImmutable A filter to return resources that match the isImmutable value. 
     * @param lifecycleState A filter to return only resources that match the given lifecycle state name exactly. 
     * @param limit For list pagination. The maximum number of results per page, or items to return in a paginated \&quot;List\&quot; call. For important details about how pagination works, see [List Pagination](/iaas/Content/API/Concepts/usingapi.htm#nine).  Example: &#x60;50&#x60; 
     * @param page For list pagination. The value of the &#x60;opc-next-page&#x60; response header from the previous \&quot;List\&quot; call. For important details about how pagination works, see [List Pagination](/iaas/Content/API/Concepts/usingapi.htm#nine). 
     * @param opcRequestId Unique identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID. 
     * @param sortBy The field to sort by. You can provide one sort order (&#x60;sortOrder&#x60;). Default order for TIMECREATED is descending. Default order for DISPLAYNAME is ascending. The DISPLAYNAME sort order is case sensitive.  **Note:** In general, some \&quot;List\&quot; operations (for example, &#x60;ListInstances&#x60;) let you optionally filter by availability domain if the scope of the resource type is within a single availability domain. If you call one of these \&quot;List\&quot; operations without specifying an availability domain, the resources are grouped by availability domain, then sorted. 
     * @param sortOrder The sort order to use, either ascending (&#x60;ASC&#x60;) or descending (&#x60;DESC&#x60;). The DISPLAYNAME sort order is case sensitive. 
     */
    public listRepositories(params: {  "compartmentId": string; "id"?: string; "displayName"?: string; "isImmutable"?: boolean; "lifecycleState"?: string; "limit"?: number; "page"?: string; "opcRequestId"?: string; "sortBy"?: string; "sortOrder"?: string; }, options?: any): Promise<{ response: Response, data: RepositoryCollection }> {
        base.validateRequiredParameters([
            "compartmentId",
        ], "listRepositories", params);

        const path = `${this.basePath}/repositories`;

        return this.request<RepositoryCollection>({
            options,
            path,

            queryParameters: {
                    "compartmentId": { values: params["compartmentId"] },
                    "id": { values: params["id"] },
                    "displayName": { values: params["displayName"] },
                    "isImmutable": { values: params["isImmutable"] },
                    "lifecycleState": { values: params["lifecycleState"] },
                    "limit": { values: params["limit"] },
                    "page": { values: params["page"] },
                    "sortBy": { values: params["sortBy"] },
                    "sortOrder": { values: params["sortOrder"] }
            },

            headerParameters: {
                "opc-request-id":  params["opcRequestId"]
            },


            parseResponseBody: true,

            operationName: "listRepositories",
            httpMethod: "GET"
        });
    }
    /** 
     * RemoveContainerVersion
     * Remove version from container image.
     * @param imageId The [OCID](/iaas/Content/General/Concepts/identifiers.htm) of the container image.  Example: &#x60;ocid1.containerimage.oc1..exampleuniqueID&#x60; 
     * @param removeContainerVersionDetails Remove version details.
     * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value. 
     * @param opcRequestId Unique identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID. 
     * @param opcRetryToken A token that uniquely identifies a request so it can be retried in case of a timeout or server error without risk of executing that same action again. Retry tokens expire after 24 hours, but can be invalidated before then due to conflicting operations (for example, if a resource has been deleted and purged from the system, then a retry of the original creation request may be rejected). 
     */
    public removeContainerVersion(params: {  "imageId": string; "removeContainerVersionDetails": RemoveContainerVersionDetails; "ifMatch"?: string; "opcRequestId"?: string; "opcRetryToken"?: string; }, options?: any): Promise<{ response: Response, data: ContainerImage }> {
        base.validateRequiredParameters([
            "imageId",
            "removeContainerVersionDetails",
        ], "removeContainerVersion", params);

        const path = `${this.basePath}/container/images/{imageId}/actions/removeVersion`
            .replace(`{${"imageId"}}`, `${ params["imageId"] }`);

        return this.request<ContainerImage>({
            options,
            path,


            headerParameters: {
                "if-match":  params["ifMatch"],
                "opc-request-id":  params["opcRequestId"],
                "opc-retry-token":  params["opcRetryToken"]
            },

                    body: 
                    {
                        type: "content",
                        contentType: (params as any)["contentType"] ? (params as any)["contentType"] as string : "application/json",
                        content: params["removeContainerVersionDetails"]
                    },

            parseResponseBody: true,

            operationName: "removeContainerVersion",
            httpMethod: "POST"
        });
    }
    /** 
     * RestoreContainerImage
     * Restore a container image.
     * @param imageId The [OCID](/iaas/Content/General/Concepts/identifiers.htm) of the container image.  Example: &#x60;ocid1.containerimage.oc1..exampleuniqueID&#x60; 
     * @param restoreContainerImageDetails Restore container image details.
     * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value. 
     * @param opcRequestId Unique identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID. 
     * @param opcRetryToken A token that uniquely identifies a request so it can be retried in case of a timeout or server error without risk of executing that same action again. Retry tokens expire after 24 hours, but can be invalidated before then due to conflicting operations (for example, if a resource has been deleted and purged from the system, then a retry of the original creation request may be rejected). 
     */
    public restoreContainerImage(params: {  "imageId": string; "restoreContainerImageDetails": RestoreContainerImageDetails; "ifMatch"?: string; "opcRequestId"?: string; "opcRetryToken"?: string; }, options?: any): Promise<{ response: Response, data: ContainerImage }> {
        base.validateRequiredParameters([
            "imageId",
            "restoreContainerImageDetails",
        ], "restoreContainerImage", params);

        const path = `${this.basePath}/container/images/{imageId}/actions/restore`
            .replace(`{${"imageId"}}`, `${ params["imageId"] }`);

        return this.request<ContainerImage>({
            options,
            path,


            headerParameters: {
                "if-match":  params["ifMatch"],
                "opc-request-id":  params["opcRequestId"],
                "opc-retry-token":  params["opcRetryToken"]
            },

                    body: 
                    {
                        type: "content",
                        contentType: (params as any)["contentType"] ? (params as any)["contentType"] as string : "application/json",
                        content: params["restoreContainerImageDetails"]
                    },

            parseResponseBody: true,

            operationName: "restoreContainerImage",
            httpMethod: "POST"
        });
    }
    /** 
     * UpdateContainerConfiguration
     * Update container configuration.
     * @param compartmentId The [OCID](/Content/General/Concepts/identifiers.htm) of the compartment.
     * @param updateContainerConfigurationDetails Update container configuration details.
     * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value. 
     * @param opcRequestId Unique identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID. 
     */
    public updateContainerConfiguration(params: {  "compartmentId": string; "updateContainerConfigurationDetails": UpdateContainerConfigurationDetails; "ifMatch"?: string; "opcRequestId"?: string; }, options?: any): Promise<{ response: Response, data: ContainerConfiguration }> {
        base.validateRequiredParameters([
            "compartmentId",
            "updateContainerConfigurationDetails",
        ], "updateContainerConfiguration", params);

        const path = `${this.basePath}/container/configuration`;

        return this.request<ContainerConfiguration>({
            options,
            path,

            queryParameters: {
                    "compartmentId": { values: params["compartmentId"] }
            },

            headerParameters: {
                "if-match":  params["ifMatch"],
                "opc-request-id":  params["opcRequestId"]
            },

                    body: 
                    {
                        type: "content",
                        contentType: (params as any)["contentType"] ? (params as any)["contentType"] as string : "application/json",
                        content: params["updateContainerConfigurationDetails"]
                    },

            parseResponseBody: true,

            operationName: "updateContainerConfiguration",
            httpMethod: "PUT"
        });
    }
    /** 
     * UpdateContainerRepository
     * Modify the properties of a container repository. Avoid entering confidential information.
     * @param repositoryId The [OCID](/iaas/Content/General/Concepts/identifiers.htm) of the container repository.  Example: &#x60;ocid1.containerrepo.oc1..exampleuniqueID&#x60; 
     * @param updateContainerRepositoryDetails Update container repository details.
     * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value. 
     * @param opcRequestId Unique identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID. 
     */
    public updateContainerRepository(params: {  "repositoryId": string; "updateContainerRepositoryDetails": UpdateContainerRepositoryDetails; "ifMatch"?: string; "opcRequestId"?: string; }, options?: any): Promise<{ response: Response, data: ContainerRepository }> {
        base.validateRequiredParameters([
            "repositoryId",
            "updateContainerRepositoryDetails",
        ], "updateContainerRepository", params);

        const path = `${this.basePath}/container/repositories/{repositoryId}`
            .replace(`{${"repositoryId"}}`, `${ params["repositoryId"] }`);

        return this.request<ContainerRepository>({
            options,
            path,


            headerParameters: {
                "if-match":  params["ifMatch"],
                "opc-request-id":  params["opcRequestId"]
            },

                    body: 
                    {
                        type: "content",
                        contentType: (params as any)["contentType"] ? (params as any)["contentType"] as string : "application/json",
                        content: params["updateContainerRepositoryDetails"]
                    },

            parseResponseBody: true,

            operationName: "updateContainerRepository",
            httpMethod: "PUT"
        });
    }
    /** 
     * UpdateGenericArtifact
     * Updates the artifact with the specified [OCID](/iaas/Content/General/Concepts/identifiers.htm). You can only update the tags of an artifact.
     * @param artifactId The [OCID](/iaas/Content/General/Concepts/identifiers.htm) of the artifact.  Example: &#x60;ocid1.genericartifact.oc1..exampleuniqueID&#x60; 
     * @param updateGenericArtifactDetails Updates the artifact with the specified [OCID](/iaas/Content/General/Concepts/identifiers.htm). You can only update the tags of an artifact.
     * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value. 
     * @param opcRequestId Unique identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID. 
     */
    public updateGenericArtifact(params: {  "artifactId": string; "updateGenericArtifactDetails": UpdateGenericArtifactDetails; "ifMatch"?: string; "opcRequestId"?: string; }, options?: any): Promise<{ response: Response, data: GenericArtifact }> {
        base.validateRequiredParameters([
            "artifactId",
            "updateGenericArtifactDetails",
        ], "updateGenericArtifact", params);

        const path = `${this.basePath}/generic/artifacts/{artifactId}`
            .replace(`{${"artifactId"}}`, `${ params["artifactId"] }`);

        return this.request<GenericArtifact>({
            options,
            path,


            headerParameters: {
                "if-match":  params["ifMatch"],
                "opc-request-id":  params["opcRequestId"]
            },

                    body: 
                    {
                        type: "content",
                        contentType: (params as any)["contentType"] ? (params as any)["contentType"] as string : "application/json",
                        content: params["updateGenericArtifactDetails"]
                    },

            parseResponseBody: true,

            operationName: "updateGenericArtifact",
            httpMethod: "PUT"
        });
    }
    /** 
     * UpdateGenericArtifactByPath
     * Updates an artifact with a specified &#x60;artifactPath&#x60; and &#x60;version&#x60;. You can only update the tags of an artifact.
     * @param repositoryId The [OCID](/iaas/Content/General/Concepts/identifiers.htm) of the repository.  Example: &#x60;ocid1.artifactrepository.oc1..exampleuniqueID&#x60; 
     * @param artifactPath A user-defined path to describe the location of an artifact. You can use slashes to organize the repository, but slashes do not create a directory structure. An artifact path does not include an artifact version.  Example: &#x60;project01/my-web-app/artifact-abc&#x60; 
     * @param version A user-defined string to describe the artifact version.  Example: &#x60;1.1.2&#x60; or &#x60;1.2-beta-2&#x60; 
     * @param updateGenericArtifactByPathDetails Updates an artifact with a specified &#x60;artifactPath&#x60; and &#x60;version&#x60;. You can only update the tags of an artifact.
     * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value. 
     * @param opcRequestId Unique identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID. 
     */
    public updateGenericArtifactByPath(params: {  "repositoryId": string; "artifactPath": string; "version": string; "updateGenericArtifactByPathDetails": UpdateGenericArtifactByPathDetails; "ifMatch"?: string; "opcRequestId"?: string; }, options?: any): Promise<{ response: Response, data: GenericArtifact }> {
        base.validateRequiredParameters([
            "repositoryId",
            "artifactPath",
            "version",
            "updateGenericArtifactByPathDetails",
        ], "updateGenericArtifactByPath", params);

        const path = `${this.basePath}/generic/repositories/{repositoryId}/artifactPaths/{artifactPath}/versions/{version}`
            .replace(`{${"repositoryId"}}`, `${ params["repositoryId"] }`)
            .replace(`{${"artifactPath"}}`, `${ params["artifactPath"] }`)
            .replace(`{${"version"}}`, `${ params["version"] }`);

        return this.request<GenericArtifact>({
            options,
            path,


            headerParameters: {
                "if-match":  params["ifMatch"],
                "opc-request-id":  params["opcRequestId"]
            },

                    body: 
                    {
                        type: "content",
                        contentType: (params as any)["contentType"] ? (params as any)["contentType"] as string : "application/json",
                        content: params["updateGenericArtifactByPathDetails"]
                    },

            parseResponseBody: true,

            operationName: "updateGenericArtifactByPath",
            httpMethod: "PUT"
        });
    }
    /** 
     * UpdateRepository
     * Updates the properties of a repository. You can update the &#x60;displayName&#x60; and  &#x60;description&#x60; properties.
     * @param repositoryId The [OCID](/iaas/Content/General/Concepts/identifiers.htm) of the repository.  Example: &#x60;ocid1.artifactrepository.oc1..exampleuniqueID&#x60; 
     * @param updateRepositoryDetails Updates the properties of a repository.
     * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value. 
     * @param opcRequestId Unique identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID. 
     */
    public updateRepository(params: {  "repositoryId": string; "updateRepositoryDetails": UpdateRepositoryDetails; "ifMatch"?: string; "opcRequestId"?: string; }, options?: any): Promise<{ response: Response, data: Repository }> {
        base.validateRequiredParameters([
            "repositoryId",
            "updateRepositoryDetails",
        ], "updateRepository", params);

        const path = `${this.basePath}/repositories/{repositoryId}`
            .replace(`{${"repositoryId"}}`, `${ params["repositoryId"] }`);

        return this.request<Repository>({
            options,
            path,


            headerParameters: {
                "if-match":  params["ifMatch"],
                "opc-request-id":  params["opcRequestId"]
            },

                    body: 
                    {
                        type: "content",
                        contentType: (params as any)["contentType"] ? (params as any)["contentType"] as string : "application/json",
                        content: params["updateRepositoryDetails"]
                    },

            parseResponseBody: true,

            operationName: "updateRepository",
            httpMethod: "PUT"
        });
    }
};

