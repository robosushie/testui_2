/* tslint:disable */

/**
 * Logging Management API
 * Use the Logging Management API to create, read, list, update, and delete log groups, log objects, and agent configurations.
 *
 * OpenAPI spec version: 20200531
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as base from "./lib/base-api";

/**
 * Possible types of actions.
 */
export type ActionTypes =
  | "CREATED"
  | "UPDATED"
  | "DELETED"
  | "IN_PROGRESS"
  | "RELATED";
export enum ActionTypesValues {
  CREATED = "CREATED",
  UPDATED = "UPDATED",
  DELETED = "DELETED",
  IN_PROGRESS = "IN_PROGRESS",
  RELATED = "RELATED",
}

/**
 * Agent fluentd configuration.
 */
export interface AgentFluentConfiguration {
  configuration?: string;
  configMetadata?: { [key: string]: any };
}

/**
 * The details to create a log group.
 */
export interface AgentHostMetadataDetails {
  /**
   * The OCID of the compartment that the resource belongs to.
   */
  compartmentId: string;
  configResourceName: string;
  hostName: string;
  hostDisplayName?: string;
  freeFormTags?: { [key: string]: string };
}

/**
 * Log archiving configuration.
 */
export interface Archiving {
  /**
   * True if archiving enabled. This field is now decrecated, you should use cloud flow to enable archiving.
   */
  isEnabled?: boolean;
}

/**
 * Categories for resources.
 */
export interface Category {
  /**
   * Category name.
   */
  name?: string;
  /**
   * Category display name.
   */
  displayName?: string;
  /**
   * Parameters the category supports.
   */
  parameters?: Array<Parameter>;
}

/**
 * Contains details indicating which compartment the resource should move to.
 */
export interface ChangeLogGroupCompartmentDetails {
  /**
   * The compartment into which the resource should be moved.
   */
  compartmentId?: string;
}

/**
 * Contains details indicating which log group the log should move to.
 */
export interface ChangeLogLogGroupDetails {
  /**
   * Log group OCID.
   */
  targetLogGroupId?: string;
}

/**
 * Contains details indicating which compartment the resource should move to.
 */
export interface ChangeLogSavedSearchCompartmentDetails {
  /**
   * The [OCID](/Content/General/Concepts/identifiers.htm) of the compartment into which the resource should be moved.
   */
  compartmentId: string;
}

/**
 * Contains details indicating which compartment the resource should move to.
 */
export interface ChangeUAConfigRegistrationCompartmentDetails {
  /**
   * The OCID the compartment into which the resource should be moved.
   */
  compartmentId?: string;
}

/**
 * Contains details indicating which compartment the resource should move to.
 */
export interface ChangeUnifiedAgentConfigurationCompartmentDetails {
  /**
   * The OCID the compartment into which the resource should be moved.
   */
  compartmentId?: string;
}

/**
 * Log object configuration.
 */
export interface Configuration {
  /**
   * The OCID of the compartment that the resource belongs to.
   */
  compartmentId?: string;
  source: Source;
  archiving?: Archiving;
}

/**
 * A ContinuousQuery that can be used to save and share a given search result.
 */
export interface ContinuousQuery {
  /**
   * The OCID of the resource.
   */
  queryId: string;
  /**
   * The continuous query that is saved.
   */
  query: string;
  /**
   * The OCID of the compartment that the resource belongs to.
   */
  compartmentId: string;
  /**
   * Time the resource was created.
   */
  timeCreated: Date;
  /**
   * Time the resource was last modified.
   */
  timeLastModified: Date;
  /**
   * IntervalInMinutes Integer types fot continuous query.
   */
  intervalInMinutes: number;
  /**
   * The severity of the ContinuousQuery
   */
  severity: ContinuousQuerySeverityEnum;
  /**
   * The operator for the ContinuousQuery
   */
  operator: ContinuousQueryOperatorEnum;
  /**
   * Threshold Integer types fot continuous query.
   */
  threshold: number;
  /**
   * The user-friendly query name. This must be unique within the enclosing resource, and it's changeable. Avoid entering confidential information.
   */
  displayName: string;
  /**
   * The OCID of the custom log for continouous query.
   */
  customLogId: string;
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).  Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
   */
  definedTags?: { [key: string]: { [key: string]: any } };
  /**
   * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm). Example: `{\"Department\": \"Finance\"}`
   */
  freeformTags?: { [key: string]: string };
  /**
   * The state of the ContinuousQuery
   */
  lifecycleState?: ContinuousQueryLifecycleStateEnum;
}

export type ContinuousQuerySeverityEnum =
  | "CRITICAL"
  | "HIGH"
  | "MEDIUM"
  | "LOW"
  | "INFORMATIONAL";
export type ContinuousQueryOperatorEnum =
  | "EQUAL"
  | "GREATER"
  | "GREATERTHANEQUALTO"
  | "LESS"
  | "LESSTHANEQUALTO";
export type ContinuousQueryLifecycleStateEnum =
  | "CREATING"
  | "ACTIVE"
  | "UPDATING"
  | "INACTIVE"
  | "DELETING"
  | "FAILED";
/**
 * Unified Agent configuration creation object.
 */
export interface ContinuousQueryDetails {
  /**
   * The continuous query that is saved.
   */
  query: string;
  /**
   * The OCID of the compartment that the resource belongs to.
   */
  compartmentId: string;
  /**
   * Time the resource was created.
   */
  timeCreated?: Date;
  /**
   * IntervalInMinutes Integer types fot continuous query.
   */
  intervalInMinutes: number;
  /**
   * The severity of the ContinuousQuery
   */
  severity: ContinuousQueryDetailsSeverityEnum;
  /**
   * The operator for the ContinuousQuery
   */
  operator: ContinuousQueryDetailsOperatorEnum;
  /**
   * Threshold Integer types fot continuous query.
   */
  threshold: number;
  /**
   * The user-friendly query name. This must be unique within the enclosing resource, and it's changeable. Avoid entering confidential information.
   */
  displayName: string;
  /**
   * The OCID of the custom log for continouous query.
   */
  customLogId: string;
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).  Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
   */
  definedTags?: { [key: string]: { [key: string]: any } };
  /**
   * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm). Example: `{\"Department\": \"Finance\"}`
   */
  freeformTags?: { [key: string]: string };
}

export type ContinuousQueryDetailsSeverityEnum =
  | "CRITICAL"
  | "HIGH"
  | "MEDIUM"
  | "LOW"
  | "INFORMATIONAL";
export type ContinuousQueryDetailsOperatorEnum =
  | "EQUAL"
  | "GREATER"
  | "GREATERTHANEQUALTO"
  | "LESS"
  | "LESSTHANEQUALTO";
/**
 * The state of the ContinuousQueryLifecycleState   1. CREATING   2. ACTIVE   ContinuousQuery is active and can be used by other users   3. UPDATING   4. INACTIVE   5. DELETING   6. FAILED
 */
export type ContinuousQueryLifecycleState =
  | "CREATING"
  | "ACTIVE"
  | "UPDATING"
  | "INACTIVE"
  | "DELETING"
  | "FAILED";
export enum ContinuousQueryLifecycleStateValues {
  CREATING = "CREATING",
  ACTIVE = "ACTIVE",
  UPDATING = "UPDATING",
  INACTIVE = "INACTIVE",
  DELETING = "DELETING",
  FAILED = "FAILED",
}

/**
 * The state of the ContinuousQueryOperator   1. EQUAL   2. GREATER   3. GREATERTHANEQUALTO   4. LESS   5. LESSTHANEQUALTO
 */
export type ContinuousQueryOperator =
  | "EQUAL"
  | "GREATER"
  | "GREATERTHANEQUALTO"
  | "LESS"
  | "LESSTHANEQUALTO";
export enum ContinuousQueryOperatorValues {
  EQUAL = "EQUAL",
  GREATER = "GREATER",
  GREATERTHANEQUALTO = "GREATERTHANEQUALTO",
  LESS = "LESS",
  LESSTHANEQUALTO = "LESSTHANEQUALTO",
}

/**
 * The state of the ContinuousQuerySeverity   1. CRITICAL   2. HIGH   3. MEDIUM   4. LOW   5. INFORMATIONAL
 */
export type ContinuousQuerySeverity =
  | "CRITICAL"
  | "HIGH"
  | "MEDIUM"
  | "LOW"
  | "INFORMATIONAL";
export enum ContinuousQuerySeverityValues {
  CRITICAL = "CRITICAL",
  HIGH = "HIGH",
  MEDIUM = "MEDIUM",
  LOW = "LOW",
  INFORMATIONAL = "INFORMATIONAL",
}

/**
 * A ContinuousQuery that can be used to save and share a given search result.
 */
export interface ContinuousQuerySummary {
  /**
   * The OCID of the resource.
   */
  queryId: string;
  /**
   * The continuous query that is saved.
   */
  query: string;
  /**
   * The OCID of the compartment that the resource belongs to.
   */
  compartmentId: string;
  /**
   * Time the resource was created.
   */
  timeCreated: Date;
  /**
   * Time the resource was last modified.
   */
  timeLastModified: Date;
  /**
   * IntervalInMinutes Integer types fot continuous query.
   */
  intervalInMinutes: number;
  /**
   * The state of the ContinuousQuery
   */
  severity: ContinuousQuerySummarySeverityEnum;
  /**
   * The operator for the ContinuousQuery
   */
  operator: ContinuousQuerySummaryOperatorEnum;
  /**
   * Threshold Integer types fot continuous query.
   */
  threshold: number;
  /**
   * The user-friendly query name. This must be unique within the enclosing resource, and it's changeable. Avoid entering confidential information.
   */
  displayName: string;
  /**
   * The OCID of the custom log for continouous query.
   */
  customLogId: string;
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).  Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
   */
  definedTags?: { [key: string]: { [key: string]: any } };
  /**
   * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm). Example: `{\"Department\": \"Finance\"}`
   */
  freeformTags?: { [key: string]: string };
  /**
   * The state of the ContinuousQuery
   */
  lifecycleState?: ContinuousQuerySummaryLifecycleStateEnum;
}

export type ContinuousQuerySummarySeverityEnum =
  | "CRITICAL"
  | "HIGH"
  | "MEDIUM"
  | "LOW"
  | "INFORMATIONAL";
export type ContinuousQuerySummaryOperatorEnum =
  | "EQUAL"
  | "GREATER"
  | "GREATERTHANEQUALTO"
  | "LESS"
  | "LESSTHANEQUALTO";
export type ContinuousQuerySummaryLifecycleStateEnum =
  | "CREATING"
  | "ACTIVE"
  | "UPDATING"
  | "INACTIVE"
  | "DELETING"
  | "FAILED";
/**
 * A collection of ContinuousQuery items.
 */
export interface ContinuousQuerySummaryCollection {
  /**
   * The ContinuousQuery lists
   */
  items: Array<ContinuousQuerySummary>;
}

/**
 * The details to create a log object.
 */
export interface CreateLogDetails {
  /**
   * The user-friendly display name. This must be unique within the enclosing resource, and it's changeable. Avoid entering confidential information.
   */
  displayName: string;
  /**
   * The logType that the log object is for, whether custom or service.
   */
  logType: CreateLogDetailsLogTypeEnum;
  /**
   * Whether or not this resource is currently enabled.
   */
  isEnabled?: boolean;
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).  Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
   */
  definedTags?: { [key: string]: { [key: string]: any } };
  /**
   * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm). Example: `{\"Department\": \"Finance\"}`
   */
  freeformTags?: { [key: string]: string };
  configuration?: Configuration;
  /**
   * Log retention duration in 30-day increments (30, 60, 90 and so on).
   */
  retentionDuration?: number;
}

export type CreateLogDetailsLogTypeEnum = "CUSTOM" | "SERVICE" | "SIEM";
/**
 * The details to create a log group.
 */
export interface CreateLogGroupDetails {
  /**
   * The OCID of the compartment that the resource belongs to.
   */
  compartmentId: string;
  /**
   * The user-friendly display name. This must be unique within the enclosing resource, and it's changeable. Avoid entering confidential information.
   */
  displayName: string;
  /**
   * Description for this resource.
   */
  description?: string;
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).  Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
   */
  definedTags?: { [key: string]: { [key: string]: any } };
  /**
   * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm). Example: `{\"Department\": \"Finance\"}`
   */
  freeformTags?: { [key: string]: string };
}

/**
 * A LogSavedSearch that can be used to save and share a given search result.
 */
export interface CreateLogSavedSearchDetails {
  /**
   * The OCID of the compartment that the resource belongs to.
   */
  compartmentId: string;
  /**
   * The user-friendly display name. This must be unique within the enclosing resource, and it's changeable. Avoid entering confidential information.
   */
  name: string;
  /**
   * Description for this resource.
   */
  description?: string;
  /**
   * The search query that is saved.
   */
  query: string;
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).  Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
   */
  definedTags?: { [key: string]: { [key: string]: any } };
  /**
   * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm). Example: `{\"Department\": \"Finance\"}`
   */
  freeformTags?: { [key: string]: string };
}

/**
 * Unified Agent configuration creation object.
 */
export interface CreateUnifiedAgentConfigurationDetails {
  /**
   * The user-friendly display name. This must be unique within the enclosing resource, and it's changeable. Avoid entering confidential information.
   */
  displayName?: string;
  /**
   * Whether or not this resource is currently enabled.
   */
  isEnabled: boolean;
  serviceConfiguration: UnifiedAgentServiceConfigurationDetails;
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).  Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
   */
  definedTags?: { [key: string]: { [key: string]: any } };
  /**
   * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm). Example: `{\"Department\": \"Finance\"}`
   */
  freeformTags?: { [key: string]: string };
  /**
   * The OCID of the compartment that the resource belongs to.
   */
  compartmentId: string;
  /**
   * Description for this resource.
   */
  description?: string;
  groupAssociation?: GroupAssociationDetails;
}

/**
 * grok pattern object.
 */
export interface GrokPattern {
  /**
   * The grok pattern.
   */
  pattern: string;
  /**
   * The name key to tag this grok pattern.
   */
  name?: string;
  /**
   * Specify the time field for the event time. If the event doesn't have this field, the current time is used.
   */
  fieldTimeKey?: string;
  /**
   * Process value using the specified format. This is available only when time_type is a string.
   */
  fieldTimeFormat?: string;
  /**
   * Use the specified time zone. The time value can be parsed or formatted in the specified time zone.
   */
  fieldTimeZone?: string;
}

/**
 * Groups using the configuration.
 */
export interface GroupAssociationDetails {
  /**
   * list of group/dynamic group ids associated with this configuration.
   */
  groupList?: Array<string>;
}

/**
 * Represents a log object.
 */
export interface Log {
  /**
   * The OCID of the resource.
   */
  id: string;
  /**
   * The OCID of the tenancy.
   */
  tenancyId?: string;
  /**
   * Log group OCID.
   */
  logGroupId: string;
  /**
   * The user-friendly display name. This must be unique within the enclosing resource, and it's changeable. Avoid entering confidential information.
   */
  displayName: string;
  /**
   * The logType that the log object is for, whether custom or service.
   */
  logType: LogLogTypeEnum;
  /**
   * Whether or not this resource is currently enabled.
   */
  isEnabled?: boolean;
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).  Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
   */
  definedTags?: { [key: string]: { [key: string]: any } };
  /**
   * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm). Example: `{\"Department\": \"Finance\"}`
   */
  freeformTags?: { [key: string]: string };
  configuration?: Configuration;
  /**
   * The pipeline state.
   */
  lifecycleState: LogLifecycleStateEnum;
  /**
   * Time the resource was created.
   */
  timeCreated?: Date;
  /**
   * Time the resource was last modified.
   */
  timeLastModified?: Date;
  /**
   * Log retention duration in 30-day increments (30, 60, 90 and so on).
   */
  retentionDuration?: number;
  /**
   * The OCID of the compartment that the resource belongs to.
   */
  compartmentId?: string;
}

export type LogLogTypeEnum = "CUSTOM" | "SERVICE" | "SIEM";
export type LogLifecycleStateEnum =
  | "CREATING"
  | "ACTIVE"
  | "UPDATING"
  | "INACTIVE"
  | "DELETING"
  | "FAILED";
/**
 * Represents a LogGroup object.
 */
export interface LogGroup {
  /**
   * The OCID of the resource.
   */
  id: string;
  /**
   * The OCID of the compartment that the resource belongs to.
   */
  compartmentId: string;
  /**
   * The user-friendly display name. This must be unique within the enclosing resource, and it's changeable. Avoid entering confidential information.
   */
  displayName: string;
  /**
   * Description for this resource.
   */
  description?: string;
  /**
   * The log group object state.
   */
  lifecycleState?: LogGroupLifecycleStateEnum;
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).  Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
   */
  definedTags?: { [key: string]: { [key: string]: any } };
  /**
   * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm). Example: `{\"Department\": \"Finance\"}`
   */
  freeformTags?: { [key: string]: string };
  /**
   * Time the resource was created.
   */
  timeCreated?: Date;
  /**
   * Time the resource was last modified.
   */
  timeLastModified?: Date;
}

export type LogGroupLifecycleStateEnum =
  | "CREATING"
  | "ACTIVE"
  | "UPDATING"
  | "INACTIVE"
  | "DELETING"
  | "FAILED";
/**
 * The log group object state. The states workflow is:    1. *CREATING* Log group is being created, backend service contacted.    2. *ACTIVE* Log group is active.    3. *UPDATING* Object configuration change requested, but the backend service has not confirmed the update.    4. *INACTIVE* Log group is disabled.    5. *DELETING* Log group is being deleted.
 */
export type LogGroupLifecycleState =
  | "CREATING"
  | "ACTIVE"
  | "UPDATING"
  | "INACTIVE"
  | "DELETING"
  | "FAILED";
export enum LogGroupLifecycleStateValues {
  CREATING = "CREATING",
  ACTIVE = "ACTIVE",
  UPDATING = "UPDATING",
  INACTIVE = "INACTIVE",
  DELETING = "DELETING",
  FAILED = "FAILED",
}

/**
 * Log group configuration summary.
 */
export interface LogGroupSummary {
  /**
   * The OCID of the resource.
   */
  id: string;
  /**
   * The OCID of the compartment that the resource belongs to.
   */
  compartmentId: string;
  /**
   * The user-friendly display name. This must be unique within the enclosing resource, and it's changeable. Avoid entering confidential information.
   */
  displayName: string;
  /**
   * Description for this resource.
   */
  description?: string;
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).  Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
   */
  definedTags?: { [key: string]: { [key: string]: any } };
  /**
   * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm). Example: `{\"Department\": \"Finance\"}`
   */
  freeformTags?: { [key: string]: string };
  /**
   * Time the resource was created.
   */
  timeCreated?: Date;
  /**
   * Time the resource was last modified.
   */
  timeLastModified?: Date;
  /**
   * The log group object state.
   */
  lifecycleState?: LogGroupSummaryLifecycleStateEnum;
}

export type LogGroupSummaryLifecycleStateEnum =
  | "CREATING"
  | "ACTIVE"
  | "UPDATING"
  | "INACTIVE"
  | "DELETING"
  | "FAILED";
/**
 * The log object state. The states workflow is:    1. *CREATING* Object is being created, backend service contacted.    2. *ACTIVE* Logging is active.    3. *UPDATING* Object configuration change requested, but the backend service has not confirmed the update.    4. *INACTIVE* Logging is disabled.    5. *DELETING* Log object is being deleted.
 */
export type LogLifecycleState =
  | "CREATING"
  | "ACTIVE"
  | "UPDATING"
  | "INACTIVE"
  | "DELETING"
  | "FAILED";
export enum LogLifecycleStateValues {
  CREATING = "CREATING",
  ACTIVE = "ACTIVE",
  UPDATING = "UPDATING",
  INACTIVE = "INACTIVE",
  DELETING = "DELETING",
  FAILED = "FAILED",
}

/**
 * A LogSavedSearch that can be used to save and share a given search result.
 */
export interface LogSavedSearch {
  /**
   * The OCID of the resource.
   */
  id: string;
  /**
   * The OCID of the compartment that the resource belongs to.
   */
  compartmentId: string;
  /**
   * The user-friendly display name. This must be unique within the enclosing resource, and it's changeable. Avoid entering confidential information.
   */
  name: string;
  /**
   * Time the resource was created.
   */
  timeCreated?: Date;
  /**
   * Time the resource was last modified.
   */
  timeLastModified?: Date;
  /**
   * Description for this resource.
   */
  description?: string;
  /**
   * The search query that is saved.
   */
  query: string;
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).  Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
   */
  definedTags?: { [key: string]: { [key: string]: any } };
  /**
   * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm). Example: `{\"Department\": \"Finance\"}`
   */
  freeformTags?: { [key: string]: string };
  /**
   * The state of the LogSavedSearch
   */
  lifecycleState?: LogSavedSearchLifecycleStateEnum;
}

export type LogSavedSearchLifecycleStateEnum =
  | "CREATING"
  | "ACTIVE"
  | "UPDATING"
  | "INACTIVE"
  | "DELETING"
  | "FAILED";
/**
 * The state of the LogSavedSearch   1. CREATING   2. ACTIVE   LogSavedSearch is active and can be used by other users   3. UPDATING   4. INACTIVE   5. DELETING   6. FAILED
 */
export type LogSavedSearchLifecycleState =
  | "CREATING"
  | "ACTIVE"
  | "UPDATING"
  | "INACTIVE"
  | "DELETING"
  | "FAILED";
export enum LogSavedSearchLifecycleStateValues {
  CREATING = "CREATING",
  ACTIVE = "ACTIVE",
  UPDATING = "UPDATING",
  INACTIVE = "INACTIVE",
  DELETING = "DELETING",
  FAILED = "FAILED",
}

/**
 * A summary of a LogSavedSearch that can be used to save and share a given search result.
 */
export interface LogSavedSearchSummary {
  /**
   * The OCID of the resource.
   */
  id: string;
  /**
   * The OCID of the compartment that the resource belongs to.
   */
  compartmentId: string;
  /**
   * The user-friendly display name. This must be unique within the enclosing resource, and it's changeable. Avoid entering confidential information.
   */
  name: string;
  /**
   * Time the resource was created.
   */
  timeCreated?: Date;
  /**
   * Time the resource was last modified.
   */
  timeLastModified?: Date;
  /**
   * Description for this resource.
   */
  description?: string;
  /**
   * The search query that is saved.
   */
  query?: string;
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).  Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
   */
  definedTags?: { [key: string]: { [key: string]: any } };
  /**
   * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm). Example: `{\"Department\": \"Finance\"}`
   */
  freeformTags?: { [key: string]: string };
  /**
   * The state of the LogSavedSearch
   */
  lifecycleState?: LogSavedSearchSummaryLifecycleStateEnum;
}

export type LogSavedSearchSummaryLifecycleStateEnum =
  | "CREATING"
  | "ACTIVE"
  | "UPDATING"
  | "INACTIVE"
  | "DELETING"
  | "FAILED";
/**
 * A collection of LogSavedSearchSummary items.
 */
export interface LogSavedSearchSummaryCollection {
  /**
   * The Saved Seach Summaries
   */
  items: Array<LogSavedSearchSummary>;
}

/**
 * Log object configuration summary.
 */
export interface LogSummary {
  /**
   * The OCID of the resource.
   */
  id: string;
  /**
   * Log group OCID.
   */
  logGroupId: string;
  /**
   * The user-friendly display name. This must be unique within the enclosing resource, and it's changeable. Avoid entering confidential information.
   */
  displayName: string;
  /**
   * Whether or not this resource is currently enabled.
   */
  isEnabled?: boolean;
  /**
   * The pipeline state.
   */
  lifecycleState: LogSummaryLifecycleStateEnum;
  /**
   * The logType that the log object is for, whether custom or service.
   */
  logType: LogSummaryLogTypeEnum;
  configuration?: Configuration;
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).  Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
   */
  definedTags?: { [key: string]: { [key: string]: any } };
  /**
   * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm). Example: `{\"Department\": \"Finance\"}`
   */
  freeformTags?: { [key: string]: string };
  /**
   * Time the resource was created.
   */
  timeCreated?: Date;
  /**
   * Time the resource was last modified.
   */
  timeLastModified?: Date;
  /**
   * Log retention duration in 30-day increments (30, 60, 90 and so on).
   */
  retentionDuration?: number;
  /**
   * The OCID of the compartment that the resource belongs to.
   */
  compartmentId?: string;
}

export type LogSummaryLifecycleStateEnum =
  | "CREATING"
  | "ACTIVE"
  | "UPDATING"
  | "INACTIVE"
  | "DELETING"
  | "FAILED";
export type LogSummaryLogTypeEnum = "CUSTOM" | "SERVICE" | "SIEM";
/**
 * An error has occurred.
 */
export interface ModelError {
  /**
   * A short error code that defines the error, meant for programmatic parsing.
   */
  code: string;
  /**
   * A human-readable error string.
   */
  message: string;
}

/**
 * The status of a work request.
 */
export type OperationStatus =
  | "ACCEPTED"
  | "IN_PROGRESS"
  | "FAILED"
  | "SUCCEEDED"
  | "CANCELLING"
  | "CANCELED";
export enum OperationStatusValues {
  ACCEPTED = "ACCEPTED",
  IN_PROGRESS = "IN_PROGRESS",
  FAILED = "FAILED",
  SUCCEEDED = "SUCCEEDED",
  CANCELLING = "CANCELLING",
  CANCELED = "CANCELED",
}

/**
 * The types of work request operations.
 */
export type OperationTypes =
  | "CREATE_LOG"
  | "UPDATE_LOG"
  | "DELETE_LOG"
  | "MOVE_LOG"
  | "CREATE_LOG_GROUP"
  | "UPDATE_LOG_GROUP"
  | "DELETE_LOG_GROUP"
  | "MOVE_LOG_GROUP"
  | "CREATE_CONFIGURATION"
  | "UPDATE_CONFIGURATION"
  | "DELETE_CONFIGURATION"
  | "MOVE_CONFIGURATION";
export enum OperationTypesValues {
  CREATE_LOG = "CREATE_LOG",
  UPDATE_LOG = "UPDATE_LOG",
  DELETE_LOG = "DELETE_LOG",
  MOVE_LOG = "MOVE_LOG",
  CREATE_LOG_GROUP = "CREATE_LOG_GROUP",
  UPDATE_LOG_GROUP = "UPDATE_LOG_GROUP",
  DELETE_LOG_GROUP = "DELETE_LOG_GROUP",
  MOVE_LOG_GROUP = "MOVE_LOG_GROUP",
  CREATE_CONFIGURATION = "CREATE_CONFIGURATION",
  UPDATE_CONFIGURATION = "UPDATE_CONFIGURATION",
  DELETE_CONFIGURATION = "DELETE_CONFIGURATION",
  MOVE_CONFIGURATION = "MOVE_CONFIGURATION",
}

/**
 * Parameters that a resource category supports.
 */
export interface Parameter {
  /**
   * Parameter name.
   */
  name: string;
  /**
   * Parameter type. One of integer, string, boolean.
   */
  type: ParameterTypeEnum;
  /**
   * Java regex pattern to validate a parameter value.
   */
  pattern?: string;
}

export type ParameterTypeEnum = "integer" | "string" | "boolean";
/**
 * Type of resource that a service provides.
 */
export interface ResourceType {
  /**
   * Resource type name.
   */
  name?: string;
  /**
   * Categories for resources.
   */
  categories?: Array<Category>;
}

/**
 * Summary of services that are integrated with public logging.
 */
export interface ServiceSummary {
  /**
   * Tenant OCID.
   */
  tenantId: string;
  /**
   * Apollo project namespace, if any.
   */
  namespace?: string;
  /**
   * Service ID as set in Service Principal.
   */
  servicePrincipalName: string;
  /**
   * Service endpoint.
   */
  endpoint: string;
  /**
   * User-friendly service name.
   */
  name: string;
  /**
   * Service ID.
   */
  id?: string;
  /**
   * Type of resource that a service provides.
   */
  resourceTypes: Array<ResourceType>;
}

/**
 * The source the log object comes from.
 */
export interface Source {
  /**
   * Log object category.
   */
  category: string;
  /**
   * The unique identifier of the resource emitting the log.
   */
  resource: string;
  /**
   * Service generating log.
   */
  service: string;
  /**
   * The log source. * **OCISERVICE:** Oracle Service.
   */
  sourceType: SourceSourceTypeEnum;
  /**
   * Log category parameters are stored here.
   */
  parameters?: { [key: string]: string };
}

export type SourceSourceTypeEnum = "OCISERVICE" | "SIEM";
/**
 * Source updated configuration.
 */
export interface SourceUpdateDetails {
  /**
   * Log category parameters are stored here.
   */
  parameters?: { [key: string]: string };
}

export interface UAAuthObject {
  type: string;
  params?: { [key: string]: any };
}

/**
 * Represents a UA ConfigRegistration object.
 */
export interface UAConfigRegistration {
  /**
   * The OCID of the resource.
   */
  id: string;
  /**
   * The OCID of the compartment that the resource belongs to.
   */
  compartmentId: string;
  /**
   * The unique name of the resource and is not changeable. Avoid entering confidential information.
   */
  name: string;
  /**
   * Description for this resource.
   */
  description?: string;
  registrationObjectList: Array<UARegistrationObject>;
  /**
   * Time the resource was created.
   */
  timeCreated?: Date;
  /**
   * Time the resource was last modified.
   */
  timeLastModified?: Date;
}

/**
 * Configuration registration object details.
 */
export interface UAConfigRegistrationDetails {
  /**
   * The OCID of the compartment that the resource belongs to.
   */
  compartmentId: string;
  /**
   * The unique name of the resource and is not changeable. Avoid entering confidential information.
   */
  name: string;
  /**
   * Description for this resource.
   */
  description?: string;
  registrationObjectList: Array<UARegistrationObject>;
}

/**
 * Log destination object.
 */
export interface UADestinationObject {
  type: string;
  auth?: UAAuthObject;
  properties?: { [key: string]: any };
}

/**
 * A log ingestion configuration registration.
 */
export interface UALogSourceRegistration {
  name: string;
  source: UASourceObject;
  parser: UAParserObject;
  destination: UADestinationObject;
  tagList: Array<string>;
  properties?: { [key: string]: any };
}

/**
 * Log parser object.
 */
export interface UAParserObject {
  type: string;
  properties?: { [key: string]: any };
}

/**
 * A versioned configuration registration.
 */
export interface UARegistrationObject {
  version: string;
  logRegistrationObject: UALogSourceRegistration;
}

/**
 * Log source object.
 */
export interface UASourceObject {
  type: string;
  properties: { [key: string]: any };
}

/**
 * Top Unified Agent configuration object.
 */
export interface UnifiedAgentConfiguration {
  /**
   * The OCID of the resource.
   */
  id: string;
  /**
   * The OCID of the compartment that the resource belongs to.
   */
  compartmentId: string;
  /**
   * The user-friendly display name. This must be unique within the enclosing resource, and it's changeable. Avoid entering confidential information.
   */
  displayName: string;
  /**
   * Description for this resource.
   */
  description?: string;
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).  Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
   */
  definedTags?: { [key: string]: { [key: string]: any } };
  /**
   * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm). Example: `{\"Department\": \"Finance\"}`
   */
  freeformTags?: { [key: string]: string };
  /**
   * Time the resource was created.
   */
  timeCreated?: Date;
  /**
   * Time the resource was last modified.
   */
  timeLastModified?: Date;
  /**
   * The pipeline state.
   */
  lifecycleState: UnifiedAgentConfigurationLifecycleStateEnum;
  /**
   * Whether or not this resource is currently enabled.
   */
  isEnabled: boolean;
  /**
   * State of unified agent service configuration.
   */
  configurationState: UnifiedAgentConfigurationConfigurationStateEnum;
  serviceConfiguration: UnifiedAgentServiceConfigurationDetails;
  groupAssociation: GroupAssociationDetails;
}

export type UnifiedAgentConfigurationLifecycleStateEnum =
  | "CREATING"
  | "ACTIVE"
  | "UPDATING"
  | "INACTIVE"
  | "DELETING"
  | "FAILED";
export type UnifiedAgentConfigurationConfigurationStateEnum =
  | "VALID"
  | "INVALID";
/**
 * Results of a UnifiedAgentConfiguration search. Contains UnifiedAgentConfigurationSummary items.
 */
export interface UnifiedAgentConfigurationCollection {
  /**
   * List of UnifiedAgentConfigurationSummary.
   */
  items: Array<UnifiedAgentConfigurationSummary>;
}

/**
 * Unified Agent configuration summary object returned by the list API.
 */
export interface UnifiedAgentConfigurationSummary {
  /**
   * The OCID of the resource.
   */
  id: string;
  /**
   * The OCID of the compartment that the resource belongs to.
   */
  compartmentId: string;
  /**
   * The user-friendly display name. This must be unique within the enclosing resource, and it's changeable. Avoid entering confidential information.
   */
  displayName: string;
  /**
   * Description for this resource.
   */
  description?: string;
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).  Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
   */
  definedTags?: { [key: string]: { [key: string]: any } };
  /**
   * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm). Example: `{\"Department\": \"Finance\"}`
   */
  freeformTags?: { [key: string]: string };
  /**
   * Time the resource was created.
   */
  timeCreated?: Date;
  /**
   * Time the resource was last modified.
   */
  timeLastModified?: Date;
  /**
   * The pipeline state.
   */
  lifecycleState: UnifiedAgentConfigurationSummaryLifecycleStateEnum;
  /**
   * Whether or not this resource is currently enabled.
   */
  isEnabled: boolean;
  /**
   * Type of Unified Agent service configuration.
   */
  configurationType: UnifiedAgentConfigurationSummaryConfigurationTypeEnum;
  /**
   * State of unified agent service configuration.
   */
  configurationState: UnifiedAgentConfigurationSummaryConfigurationStateEnum;
}

export type UnifiedAgentConfigurationSummaryLifecycleStateEnum =
  | "CREATING"
  | "ACTIVE"
  | "UPDATING"
  | "INACTIVE"
  | "DELETING"
  | "FAILED";
export type UnifiedAgentConfigurationSummaryConfigurationTypeEnum = "LOGGING";
export type UnifiedAgentConfigurationSummaryConfigurationStateEnum =
  | "VALID"
  | "INVALID";
/**
 * Object containing the generated fluent agent configuration.
 */
export interface UnifiedAgentGeneratedConfiguration {
  /**
   * Generated fluent configuration.
   */
  configuration: string;
  /**
   * Additional Unified Agent metadata.
   */
  metadata?: { [key: string]: any };
}

/**
 * Logging destination object.
 */
export interface UnifiedAgentLoggingDestination {
  /**
   * The OCID of the resource.
   */
  logObjectId: string;
}

/**
 * Logging source object.
 */
export interface RawUnifiedAgentLoggingSource {
  /**
   * unique name for the source
   */
  name: string;
  /**
   * Unified schema logging source type.
   */
  sourceType: UnifiedAgentLoggingSourceSourceTypeEnum;
}

export type UnifiedAgentLoggingSourceSourceTypeEnum =
  | "LOG_TAIL"
  | "WINDOWS_EVENT_LOG";
export type UnifiedAgentLoggingSource =
  | UnifiedAgentTailLogSource
  | UnifiedAgentWindowsEventSource;
/**
 * source parser object.
 */
export interface RawUnifiedAgentParser {
  /**
   * Type of fluent parser.
   */
  parserType: UnifiedAgentParserParserTypeEnum;
  /**
   * Specify time field for the event time. If the event doesn't have this field, the current time is used.
   */
  fieldTimeKey?: string;
  /**
   * Specify types for converting a field into another type.
   */
  types?: { [key: string]: string };
  /**
   * Specify the null value pattern.
   */
  nullValuePattern?: string;
  /**
   * If true, an empty string field is replaced with nil.
   */
  isNullEmptyString?: boolean;
  /**
   * If true, use Fluent::EventTime.now(current time) as a timestamp when time_key is specified.
   */
  isEstimateCurrentEvent?: boolean;
  /**
   * If true, keep time field in the record.
   */
  isKeepTimeKey?: boolean;
  /**
   * Specify the timeout for parse processing. This is mainly for detecting an incorrect regexp pattern.
   */
  timeoutInMilliseconds?: number;
}

export type UnifiedAgentParserParserTypeEnum =
  | "AUDITD"
  | "JSON"
  | "TSV"
  | "CSV"
  | "NONE"
  | "SYSLOG"
  | "APACHE2"
  | "APACHE_ERROR"
  | "MSGPACK"
  | "REGEXP"
  | "MULTILINE"
  | "GROK"
  | "MULTILINE_GROK";
export type UnifiedAgentParser =
  | UnifiedAgentApache2Parser
  | UnifiedAgentApacheErrorParser
  | UnifiedAgentAuditdParser
  | UnifiedAgentCsvParser
  | UnifiedAgentGrokParser
  | UnifiedAgentMsgpackParser
  | UnifiedAgentMultilineGrokParser
  | UnifiedAgentMultilineParser
  | UnifiedAgentNoneParser
  | UnifiedAgentRegexParser
  | UnifiedAgentSyslogParser
  | UnifiedAgentTsvParser
  | UnifiedJSONParser;
/**
 * Top level Unified Agent service configuration object.
 */
export interface RawUnifiedAgentServiceConfigurationDetails {
  /**
   * Type of Unified Agent service configuration.
   */
  configurationType: UnifiedAgentServiceConfigurationDetailsConfigurationTypeEnum;
}

export type UnifiedAgentServiceConfigurationDetailsConfigurationTypeEnum = "LOGGING";
export type UnifiedAgentServiceConfigurationDetails = UnifiedAgentLoggingConfiguration;
/**
 * The state of the configuration:    1. *VALID* configuration is valid and usable    2. *INVALID* configuration has compilation errors and is not usable
 */
export type UnifiedAgentServiceConfigurationStates = "VALID" | "INVALID";
export enum UnifiedAgentServiceConfigurationStatesValues {
  VALID = "VALID",
  INVALID = "INVALID",
}

/**
 * Type of Unified Agent service configuration.
 */
export type UnifiedAgentServiceConfigurationTypes = "LOGGING";
export enum UnifiedAgentServiceConfigurationTypesValues {
  LOGGING = "LOGGING",
}

/**
 * The updatable configuration properties.
 */
export interface UpdateConfigurationDetails {
  source: SourceUpdateDetails;
  archiving?: Archiving;
}

/**
 * Update log object properties.
 */
export interface UpdateLogDetails {
  /**
   * The user-friendly display name. This must be unique within the enclosing resource, and it's changeable. Avoid entering confidential information.
   */
  displayName?: string;
  /**
   * Whether or not this resource is currently enabled.
   */
  isEnabled?: boolean;
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).  Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
   */
  definedTags?: { [key: string]: { [key: string]: any } };
  /**
   * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm). Example: `{\"Department\": \"Finance\"}`
   */
  freeformTags?: { [key: string]: string };
  /**
   * Log retention duration in 30-day increments (30, 60, 90 and so on).
   */
  retentionDuration?: number;
  configuration?: UpdateConfigurationDetails;
}

/**
 * The details to update a log group.
 */
export interface UpdateLogGroupDetails {
  /**
   * The user-friendly display name. This must be unique within the enclosing resource, and it's changeable. Avoid entering confidential information.
   */
  displayName?: string;
  /**
   * Description for this resource.
   */
  description?: string;
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).  Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
   */
  definedTags?: { [key: string]: { [key: string]: any } };
  /**
   * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm). Example: `{\"Department\": \"Finance\"}`
   */
  freeformTags?: { [key: string]: string };
}

/**
 * The update details to update a LogSavedSearch.
 */
export interface UpdateLogSavedSearchDetails {
  /**
   * The user-friendly display name. This must be unique within the enclosing resource, and it's changeable. Avoid entering confidential information.
   */
  name?: string;
  /**
   * Description for this resource.
   */
  description?: string;
  /**
   * The search query that is saved.
   */
  query?: string;
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).  Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
   */
  definedTags?: { [key: string]: { [key: string]: any } };
  /**
   * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm). Example: `{\"Department\": \"Finance\"}`
   */
  freeformTags?: { [key: string]: string };
}

/**
 * Update Object for the Unified Agent configuration.
 */
export interface UpdateUnifiedAgentConfigurationDetails {
  /**
   * The user-friendly display name. This must be unique within the enclosing resource, and it's changeable. Avoid entering confidential information.
   */
  displayName: string;
  /**
   * Whether or not this resource is currently enabled.
   */
  isEnabled: boolean;
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).  Example: `{\"Operations\": {\"CostCenter\": \"42\"}}`
   */
  definedTags?: { [key: string]: { [key: string]: any } };
  /**
   * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm). Example: `{\"Department\": \"Finance\"}`
   */
  freeformTags?: { [key: string]: string };
  /**
   * Description for this resource.
   */
  description?: string;
  serviceConfiguration: UnifiedAgentServiceConfigurationDetails;
  groupAssociation?: GroupAssociationDetails;
}

/**
 * A work request.
 */
export interface WorkRequest {
  /**
   * The work request OCID.
   */
  id: string;
  /**
   * The type of work the work request is doing.
   */
  operationType: WorkRequestOperationTypeEnum;
  /**
   * The current status of the work request.
   */
  status: WorkRequestStatusEnum;
  /**
   * The work request’s compartment OCID.
   */
  compartmentId: string;
  /**
   * The resources this work request affects.
   */
  resources: Array<WorkRequestResource>;
  /**
   * Percentage of the request completed.
   */
  percentComplete: number;
  /**
   * The time the work request was accepted.
   */
  timeAccepted: Date;
  /**
   * The time the work request was started.
   */
  timeStarted?: Date;
  /**
   * The time the work request was finished.
   */
  timeFinished?: Date;
}

export type WorkRequestOperationTypeEnum =
  | "CREATE_LOG"
  | "UPDATE_LOG"
  | "DELETE_LOG"
  | "MOVE_LOG"
  | "CREATE_LOG_GROUP"
  | "UPDATE_LOG_GROUP"
  | "DELETE_LOG_GROUP"
  | "MOVE_LOG_GROUP"
  | "CREATE_CONFIGURATION"
  | "UPDATE_CONFIGURATION"
  | "DELETE_CONFIGURATION"
  | "MOVE_CONFIGURATION";
export type WorkRequestStatusEnum =
  | "ACCEPTED"
  | "IN_PROGRESS"
  | "FAILED"
  | "SUCCEEDED"
  | "CANCELLING"
  | "CANCELED";
/**
 * An error encountered while executing a work request.
 */
export interface WorkRequestError {
  /**
   * A machine-usable code for the error that occured. Error codes are listed at https://docs.us-phoenix-1.oraclecloud.com/Content/API/References/apierrors.htm.
   */
  code: string;
  /**
   * A human readable description of the issue encountered.
   */
  message: string;
  /**
   * The time the error occured. An RFC3339-formatted date and time string.
   */
  timestamp: Date;
}

/**
 * A log message from the execution of a work request.
 */
export interface WorkRequestLog {
  /**
   * Human-readable log message.
   */
  message: string;
  /**
   * The time the log message was written. An RFC3339-formatted date and time string.
   */
  timestamp: Date;
}

/**
 * A resource created or operated on by a work request.
 */
export interface WorkRequestResource {
  /**
   * The resource type the work request affects.
   */
  entityType: string;
  /**
   * The way in which this resource is affected by the work tracked in the work request. A resource being created, updated, or deleted will remain in the IN_PROGRESS state until work is complete for that resource, at which point it will transition to CREATED, UPDATED, or DELETED, respectively.
   */
  actionType: WorkRequestResourceActionTypeEnum;
  /**
   * The resource identifier the work request affects.
   */
  identifier: string;
  /**
   * The URI path that the user can do a GET on to access the resource metadata.
   */
  entityUri?: string;
}

export type WorkRequestResourceActionTypeEnum =
  | "CREATED"
  | "UPDATED"
  | "DELETED"
  | "IN_PROGRESS"
  | "RELATED";
/**
 * Compartment ID of the resource inside a work request.
 */
export interface WorkRequestResourceCompartment {
  /**
   * Compartment ID of the resource log/log group/log rule.
   */
  compartmentId: string;
}

/**
 * A summary of a work request.
 */
export interface WorkRequestSummary {
  /**
   * The OCID of the work request.
   */
  id?: string;
  /**
   * The type of work the work request is doing.
   */
  operationType?: WorkRequestSummaryOperationTypeEnum;
  /**
   * The current status of the work request.
   */
  status?: WorkRequestSummaryStatusEnum;
  /**
   * The OCID of the work request’s compartment.
   */
  compartmentId?: string;
  /**
   * The resources this work request affects.
   */
  resources?: Array<WorkRequestResource>;
  /**
   * Percentage of the request completed.
   */
  percentComplete?: number;
  /**
   * The time the work request was accepted.
   */
  timeAccepted?: Date;
  /**
   * The time the work request was started.
   */
  timeStarted?: Date;
  /**
   * The time the work request was finished.
   */
  timeFinished?: Date;
}

export type WorkRequestSummaryOperationTypeEnum =
  | "CREATE_LOG"
  | "UPDATE_LOG"
  | "DELETE_LOG"
  | "MOVE_LOG"
  | "CREATE_LOG_GROUP"
  | "UPDATE_LOG_GROUP"
  | "DELETE_LOG_GROUP"
  | "MOVE_LOG_GROUP"
  | "CREATE_CONFIGURATION"
  | "UPDATE_CONFIGURATION"
  | "DELETE_CONFIGURATION"
  | "MOVE_CONFIGURATION";
export type WorkRequestSummaryStatusEnum =
  | "ACCEPTED"
  | "IN_PROGRESS"
  | "FAILED"
  | "SUCCEEDED"
  | "CANCELLING"
  | "CANCELED";
/**
 * OCI service logging configuration.
 */
export interface OciService extends Source {
  /**
   * Service generating log.
   */
  service: string;
  /**
   * The unique identifier of the resource emitting the log.
   */
  resource: string;
  /**
   * Log object category.
   */
  category: string;
  /**
   * Log category parameters are stored here.
   */
  parameters?: { [key: string]: string };
}

/**
 * SIEM service logging configuration.
 */
export interface SiemService extends Source {
  /**
   * Log category.
   */
  category: string;
}

/**
 * Apache 2 log parser.
 */
export interface UnifiedAgentApache2Parser extends RawUnifiedAgentParser {}

/**
 * Apache error log parser.
 */
export interface UnifiedAgentApacheErrorParser extends RawUnifiedAgentParser {}

/**
 * auditd parser.
 */
export interface UnifiedAgentAuditdParser extends RawUnifiedAgentParser {}

/**
 * CSV Parser.
 */
export interface UnifiedAgentCsvParser extends RawUnifiedAgentParser {
  delimiter?: string;
  keys?: Array<string>;
}

/**
 * grok parser.
 */
export interface UnifiedAgentGrokParser extends RawUnifiedAgentParser {
  grokNameKey?: string;
  grokFailureKey?: string;
  patterns?: Array<GrokPattern>;
}

/**
 * Unified Agent logging service configuration object.
 */
export interface UnifiedAgentLoggingConfiguration
  extends RawUnifiedAgentServiceConfigurationDetails {
  sources?: Array<UnifiedAgentLoggingSource>;
  destination?: UnifiedAgentLoggingDestination;
}

/**
 * msgpack parser.
 */
export interface UnifiedAgentMsgpackParser extends RawUnifiedAgentParser {}

/**
 * Multiline grok parser.
 */
export interface UnifiedAgentMultilineGrokParser extends RawUnifiedAgentParser {
  grokNameKey?: string;
  grokFailureKey?: string;
  multiLineStartRegexp?: string;
  patterns?: Array<GrokPattern>;
}

/**
 * Multiline parser.
 */
export interface UnifiedAgentMultilineParser extends RawUnifiedAgentParser {
  formatFirstline?: string;
  format?: Array<string>;
}

/**
 * This parser signifies a non-parser, and puts the entire log line in a message_key.
 */
export interface UnifiedAgentNoneParser extends RawUnifiedAgentParser {
  messageKey?: string;
}

/**
 * regexp parser.
 */
export interface UnifiedAgentRegexParser extends RawUnifiedAgentParser {
  expression?: string;
  timeFormat?: string;
}

/**
 * Syslog Parser.
 */
export interface UnifiedAgentSyslogParser extends RawUnifiedAgentParser {
  timeFormat?: string;
  rfc5424TimeFormat?: string;
  messageFormat?: UnifiedAgentSyslogParserMessageFormatEnum;
  isWithPriority?: boolean;
  isSupportColonlessIdent?: boolean;
  syslogParserType?: UnifiedAgentSyslogParserSyslogParserTypeEnum;
}

export type UnifiedAgentSyslogParserMessageFormatEnum =
  | "RFC3164"
  | "RFC5424"
  | "AUTO";
export type UnifiedAgentSyslogParserSyslogParserTypeEnum = "STRING" | "REGEXP";
/**
 * Tail log source object.
 */
export interface UnifiedAgentTailLogSource
  extends RawUnifiedAgentLoggingSource {
  paths?: Array<string>;
  parser?: UnifiedAgentParser;
}

/**
 * TSV Parser.
 */
export interface UnifiedAgentTsvParser extends RawUnifiedAgentParser {
  delimiter?: string;
  keys?: Array<string>;
}

/**
 * Windows events log source object.
 */
export interface UnifiedAgentWindowsEventSource
  extends RawUnifiedAgentLoggingSource {
  channels?: Array<string>;
}

/**
 * JSON parser.
 */
export interface UnifiedJSONParser extends RawUnifiedAgentParser {
  timeType?: UnifiedJSONParserTimeTypeEnum;
  timeFormat?: string;
  parseNested?: boolean;
  separator?: string;
}

export type UnifiedJSONParserTimeTypeEnum = "FLOAT" | "UNIXTIME" | "STRING";

export interface AddContinuousQueryArgs {
  continuousQueryDetails: ContinuousQueryDetails;
  opcRequestId?: string;
  opcRetryToken?: string;
}
export type AddContinuousQueryReturnType = {
  response: Response;
  data: ContinuousQuery;
};

export interface ChangeLogGroupCompartmentArgs {
  logGroupId: string;
  changeLogGroupCompartmentDetails: ChangeLogGroupCompartmentDetails;
  ifMatch?: string;
  opcRequestId?: string;
}
export type ChangeLogGroupCompartmentReturnType = Response;

export interface ChangeLogLogGroupArgs {
  logGroupId: string;
  logId: string;
  changeLogLogGroupDetails: ChangeLogLogGroupDetails;
  ifMatch?: string;
  opcRequestId?: string;
}
export type ChangeLogLogGroupReturnType = Response;

export interface ChangeLogSavedSearchCompartmentArgs {
  logSavedSearchId: string;
  changeLogSavedSearchCompartmentDetails: ChangeLogSavedSearchCompartmentDetails;
  opcRetryToken?: string;
  ifMatch?: string;
  opcRequestId?: string;
}
export type ChangeLogSavedSearchCompartmentReturnType = Response;

export interface ChangeUAConfigRegistrationCompartmentArgs {
  registrationId: string;
  changeUAConfigRegistrationCompartmentDetails: ChangeUAConfigRegistrationCompartmentDetails;
  ifMatch?: string;
  opcRequestId?: string;
}
export type ChangeUAConfigRegistrationCompartmentReturnType = Response;

export interface ChangeUnifiedAgentConfigurationCompartmentArgs {
  unifiedAgentConfigurationId: string;
  changeUnifiedAgentConfigurationCompartmentDetails: ChangeUnifiedAgentConfigurationCompartmentDetails;
  opcRetryToken?: string;
  ifMatch?: string;
  opcRequestId?: string;
}
export type ChangeUnifiedAgentConfigurationCompartmentReturnType = Response;

export interface CreateLogArgs {
  logGroupId: string;
  createLogDetails: CreateLogDetails;
  opcRetryToken?: string;
  opcRequestId?: string;
}
export type CreateLogReturnType = Response;

export interface CreateLogGroupArgs {
  createLogGroupDetails: CreateLogGroupDetails;
  opcRetryToken?: string;
  opcRequestId?: string;
}
export type CreateLogGroupReturnType = Response;

export interface CreateLogSavedSearchArgs {
  createLogSavedSearchDetails: CreateLogSavedSearchDetails;
  opcRetryToken?: string;
  opcRequestId?: string;
}
export type CreateLogSavedSearchReturnType = {
  response: Response;
  data: LogSavedSearch;
};

export interface CreateUnifiedAgentConfigurationArgs {
  createUnifiedAgentConfigurationDetails: CreateUnifiedAgentConfigurationDetails;
  opcRequestId?: string;
  opcRetryToken?: string;
}
export type CreateUnifiedAgentConfigurationReturnType = Response;

export interface CreateUnifiedAgentRegistrationArgs {
  configRegistrationDetails: UAConfigRegistrationDetails;
  opcRequestId?: string;
  opcRetryToken?: string;
}
export type CreateUnifiedAgentRegistrationReturnType = Response;

export interface DeleteContinuousQueryArgs {
  queryId: string;
  ifMatch?: string;
  opcRequestId?: string;
}
export type DeleteContinuousQueryReturnType = Response;

export interface DeleteLogArgs {
  logGroupId: string;
  logId: string;
  ifMatch?: string;
  opcRequestId?: string;
}
export type DeleteLogReturnType = Response;

export interface DeleteLogGroupArgs {
  logGroupId: string;
  ifMatch?: string;
  opcRequestId?: string;
}
export type DeleteLogGroupReturnType = Response;

export interface DeleteLogSavedSearchArgs {
  logSavedSearchId: string;
  ifMatch?: string;
  opcRequestId?: string;
}
export type DeleteLogSavedSearchReturnType = Response;

export interface DeleteUnifiedAgentConfigurationArgs {
  unifiedAgentConfigurationId: string;
  opcRequestId?: string;
  ifMatch?: string;
}
export type DeleteUnifiedAgentConfigurationReturnType = Response;

export interface DeleteUnifiedAgentRegistrationArgs {
  registrationId: string;
  opcRequestId?: string;
  ifMatch?: string;
}
export type DeleteUnifiedAgentRegistrationReturnType = Response;

export interface DeleteWorkRequestArgs {
  workRequestId: string;
  ifMatch?: string;
  opcRequestId?: string;
}
export type DeleteWorkRequestReturnType = Response;

export interface GenerateAgentFluentConfigArgs {
  agentHostMetadataDetails: AgentHostMetadataDetails;
  opcRequestId?: string;
}
export type GenerateAgentFluentConfigReturnType = {
  response: Response;
  data: AgentFluentConfiguration;
};

export interface GenerateAgentFluentConfigMtlsArgs {
  agentHostMetadataDetails: AgentHostMetadataDetails;
  opcRequestId?: string;
}
export type GenerateAgentFluentConfigMtlsReturnType = {
  response: Response;
  data: AgentFluentConfiguration;
};

export interface GetContinuousQueryArgs {
  queryId: string;
  ifMatch?: string;
  opcRequestId?: string;
  opcRetryToken?: string;
}
export type GetContinuousQueryReturnType = {
  response: Response;
  data: ContinuousQuery;
};

export interface GetGeneratedUnifiedAgentConfigurationArgs {
  fluentType: string;
  fluentVersion: string;
  opcRequestId?: string;
}
export type GetGeneratedUnifiedAgentConfigurationReturnType = {
  response: Response;
  data: UnifiedAgentGeneratedConfiguration;
};

export interface GetLogArgs {
  logGroupId: string;
  logId: string;
  opcRequestId?: string;
}
export type GetLogReturnType = { response: Response; data: Log };

export interface GetLogGroupArgs {
  logGroupId: string;
  opcRequestId?: string;
}
export type GetLogGroupReturnType = { response: Response; data: LogGroup };

export interface GetLogSavedSearchArgs {
  logSavedSearchId: string;
  opcRequestId?: string;
}
export type GetLogSavedSearchReturnType = {
  response: Response;
  data: LogSavedSearch;
};

export interface GetTargetCompartmentForWRArgs {
  workRequestId: string;
  opcRequestId?: string;
}
export type GetTargetCompartmentForWRReturnType = {
  response: Response;
  data: WorkRequestResourceCompartment;
};

export interface GetUnifiedAgentConfigRegistrationArgs {
  registrationId: string;
  opcRequestId?: string;
}
export type GetUnifiedAgentConfigRegistrationReturnType = {
  response: Response;
  data: UAConfigRegistration;
};

export interface GetUnifiedAgentConfigurationArgs {
  unifiedAgentConfigurationId: string;
  opcRequestId?: string;
}
export type GetUnifiedAgentConfigurationReturnType = {
  response: Response;
  data: UnifiedAgentConfiguration;
};

export interface GetWorkRequestArgs {
  workRequestId: string;
  opcRequestId?: string;
}
export type GetWorkRequestReturnType = {
  response: Response;
  data: WorkRequest;
};

export interface ListAllLogGroupsArgs {
  page?: string;
  limit?: number;
  opcRequestId?: string;
}
export type ListAllLogGroupsReturnType = {
  response: Response;
  data: Array<LogGroup>;
};

export interface ListAllLogsArgs {
  logId?: string;
  sourceService?: string;
  page?: string;
  limit?: number;
  opcRequestId?: string;
}
export type ListAllLogsReturnType = { response: Response; data: Array<Log> };

export interface ListContinuousQueryArgs {
  compartmentId: string;
  severity?: string;
  page?: string;
  limit?: number;
  sortBy?: string;
  sortOrder?: string;
  opcRequestId?: string;
}
export type ListContinuousQueryReturnType = {
  response: Response;
  data: ContinuousQuerySummaryCollection;
};

export interface ListLogGroupsArgs {
  compartmentId: string;
  isCompartmentIdInSubtree?: boolean;
  displayName?: string;
  page?: string;
  limit?: number;
  sortBy?: string;
  sortOrder?: string;
  opcRequestId?: string;
}
export type ListLogGroupsReturnType = {
  response: Response;
  data: Array<LogGroupSummary>;
};

export interface ListLogSavedSearchesArgs {
  compartmentId: string;
  logSavedSearchId?: string;
  name?: string;
  page?: string;
  limit?: number;
  sortBy?: string;
  sortOrder?: string;
  opcRequestId?: string;
}
export type ListLogSavedSearchesReturnType = {
  response: Response;
  data: LogSavedSearchSummaryCollection;
};

export interface ListLogsArgs {
  logGroupId: string;
  logType?: string;
  sourceService?: string;
  sourceResource?: string;
  displayName?: string;
  lifecycleState?: string;
  page?: string;
  limit?: number;
  sortBy?: string;
  sortOrder?: string;
  opcRequestId?: string;
}
export type ListLogsReturnType = {
  response: Response;
  data: Array<LogSummary>;
};

export interface ListServicesArgs {
  opcRequestId?: string;
}
export type ListServicesReturnType = {
  response: Response;
  data: Array<ServiceSummary>;
};

export interface ListUnifiedAgentConfigurationsArgs {
  compartmentId: string;
  logId?: string;
  isCompartmentIdInSubtree?: boolean;
  groupId?: string;
  displayName?: string;
  lifecycleState?: string;
  limit?: number;
  page?: string;
  sortBy?: string;
  sortOrder?: string;
  opcRequestId?: string;
}
export type ListUnifiedAgentConfigurationsReturnType = {
  response: Response;
  data: UnifiedAgentConfigurationCollection;
};

export interface ListWorkRequestErrorsArgs {
  workRequestId: string;
  opcRequestId?: string;
  page?: string;
  limit?: number;
}
export type ListWorkRequestErrorsReturnType = {
  response: Response;
  data: Array<WorkRequestError>;
};

export interface ListWorkRequestLogsArgs {
  workRequestId: string;
  opcRequestId?: string;
  page?: string;
  limit?: number;
}
export type ListWorkRequestLogsReturnType = {
  response: Response;
  data: Array<WorkRequestLog>;
};

export interface ListWorkRequestsArgs {
  compartmentId: string;
  status?: string;
  id?: string;
  opcRequestId?: string;
  page?: string;
  limit?: number;
  sortOrder?: string;
  sortBy?: string;
}
export type ListWorkRequestsReturnType = {
  response: Response;
  data: Array<WorkRequestSummary>;
};

export interface SearchLogsArgs {
  compartmentId?: string;
  logId?: string;
  logType?: string;
  sourceService?: string;
  sourceResource?: string;
  page?: string;
  limit?: number;
  sortBy?: string;
  sortOrder?: string;
  opcRequestId?: string;
}
export type SearchLogsReturnType = {
  response: Response;
  data: Array<LogSummary>;
};

export interface UpdateContinuousQueryArgs {
  queryId: string;
  continuousQueryDetails: ContinuousQueryDetails;
  ifMatch?: string;
  opcRequestId?: string;
}
export type UpdateContinuousQueryReturnType = {
  response: Response;
  data: ContinuousQuery;
};

export interface UpdateLogArgs {
  logGroupId: string;
  logId: string;
  updateLogDetails: UpdateLogDetails;
  ifMatch?: string;
  opcRequestId?: string;
}
export type UpdateLogReturnType = Response;

export interface UpdateLogGroupArgs {
  logGroupId: string;
  updateLogGroupDetails: UpdateLogGroupDetails;
  ifMatch?: string;
  opcRequestId?: string;
}
export type UpdateLogGroupReturnType = Response;

export interface UpdateLogSavedSearchArgs {
  logSavedSearchId: string;
  updateLogSavedSearchDetails: UpdateLogSavedSearchDetails;
  ifMatch?: string;
  opcRequestId?: string;
}
export type UpdateLogSavedSearchReturnType = {
  response: Response;
  data: LogSavedSearch;
};

export interface UpdateUnifiedAgentConfigurationArgs {
  unifiedAgentConfigurationId: string;
  updateUnifiedAgentConfigurationDetails: UpdateUnifiedAgentConfigurationDetails;
  ifMatch?: string;
  opcRequestId?: string;
}
export type UpdateUnifiedAgentConfigurationReturnType = Response;

/**
 * LoggingManagementApi - object-oriented interface
 */
export class LoggingManagementApi extends base.BaseAPI {
  public static createFromEndpointTemplate(
    fetch: base.Fetch,
    region: string,
    secondLevelDomain: string,
    config?: base.BaseApiConfig
  ): LoggingManagementApi {
    const endpoint = base.buildEndpointFromTemplate(
      "https://logging.{region}.oci.{secondLevelDomain}",
      "/20200531",
      region,
      secondLevelDomain
    );

    return new LoggingManagementApi(fetch, endpoint, config);
  }

  /**
   * Post Continuous Query.
   * Create query engine service.
   * @param continuousQueryDetails Continous Query creation object.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   * @param opcRetryToken A token that uniquely identifies a request so it can be retried in case of a timeout or server error, without risk of executing that same action again. Retry tokens expire after 24 hours, but can be invalidated before then due to conflicting operations (e.g., if a resource has been deleted and purged from the system, then a retry of the original creation request may be rejected).
   */
  public addContinuousQuery(
    params: {
      continuousQueryDetails: ContinuousQueryDetails;
      opcRequestId?: string;
      opcRetryToken?: string;
    },
    options?: any
  ): Promise<{ response: Response; data: ContinuousQuery }> {
    base.validateRequiredParameters(
      ["continuousQueryDetails"],
      "addContinuousQuery",
      params
    );

    const path = `${this.basePath}/continuousquery`;

    return this.request<ContinuousQuery>({
      options,
      path,

      headerParameters: {
        "opc-request-id": params["opcRequestId"],
        "opc-retry-token": params["opcRetryToken"],
      },

      body: {
        type: "content",
        contentType: (params as any)["contentType"]
          ? ((params as any)["contentType"] as string)
          : "application/json",
        content: params["continuousQueryDetails"],
      },

      parseResponseBody: true,

      operationName: "addContinuousQuery",
      httpMethod: "POST",
    });
  }
  /**
   * Change the compartment to which this LogGroup belongs.
   * Moves a log group into a different compartment within the same tenancy.  When provided, the If-Match is checked against the resource ETag values. For information about moving resources between compartments, see [Moving Resources Between Compartments](/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   * @param logGroupId OCID of a log group to work with.
   * @param changeLogGroupCompartmentDetails Request to change the compartment of a given resource.
   * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public changeLogGroupCompartment(
    params: {
      logGroupId: string;
      changeLogGroupCompartmentDetails: ChangeLogGroupCompartmentDetails;
      ifMatch?: string;
      opcRequestId?: string;
    },
    options?: any
  ): Promise<Response> {
    base.validateRequiredParameters(
      ["logGroupId", "changeLogGroupCompartmentDetails"],
      "changeLogGroupCompartment",
      params
    );

    const path = `${this.basePath}/logGroups/{logGroupId}/actions/changeCompartment`.replace(
      `{${"logGroupId"}}`,
      `${params["logGroupId"]}`
    );

    return this.request({
      options,
      path,

      headerParameters: {
        "if-match": params["ifMatch"],
        "opc-request-id": params["opcRequestId"],
      },

      body: {
        type: "content",
        contentType: (params as any)["contentType"]
          ? ((params as any)["contentType"] as string)
          : "application/json",
        content: params["changeLogGroupCompartmentDetails"],
      },

      operationName: "changeLogGroupCompartment",
      httpMethod: "POST",
    });
  }
  /**
   * Change the LogGroup to which this log belongs to.
   * Moves a log into a different log group within the same tenancy.  When provided, the If-Match is checked against the ETag values of the resource.
   * @param logGroupId OCID of a log group to work with.
   * @param logId OCID of a log to work with.
   * @param changeLogLogGroupDetails Request to change the log group of a given log.
   * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public changeLogLogGroup(
    params: {
      logGroupId: string;
      logId: string;
      changeLogLogGroupDetails: ChangeLogLogGroupDetails;
      ifMatch?: string;
      opcRequestId?: string;
    },
    options?: any
  ): Promise<Response> {
    base.validateRequiredParameters(
      ["logGroupId", "logId", "changeLogLogGroupDetails"],
      "changeLogLogGroup",
      params
    );

    const path = `${this.basePath}/logGroups/{logGroupId}/logs/{logId}/actions/changeLogGroup`
      .replace(`{${"logGroupId"}}`, `${params["logGroupId"]}`)
      .replace(`{${"logId"}}`, `${params["logId"]}`);

    return this.request({
      options,
      path,

      headerParameters: {
        "if-match": params["ifMatch"],
        "opc-request-id": params["opcRequestId"],
      },

      body: {
        type: "content",
        contentType: (params as any)["contentType"]
          ? ((params as any)["contentType"] as string)
          : "application/json",
        content: params["changeLogLogGroupDetails"],
      },

      operationName: "changeLogLogGroup",
      httpMethod: "POST",
    });
  }
  /**
   * Moves a LogSavedSearch into a different compartment. When provided, the If-Match is checked against the ETag values of the resource.
   * Moves a saved search into a different compartment within the same tenancy. For information about moving resources between compartments, see [Moving Resources to a Different Compartment](/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   * @param logSavedSearchId OCID of the logSavedSearch.
   * @param changeLogSavedSearchCompartmentDetails Contains details indicating which compartment the resource should move to.
   * @param opcRetryToken A token that uniquely identifies a request so it can be retried in case of a timeout or server error, without risk of executing that same action again. Retry tokens expire after 24 hours, but can be invalidated before then due to conflicting operations (e.g., if a resource has been deleted and purged from the system, then a retry of the original creation request may be rejected).
   * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public changeLogSavedSearchCompartment(
    params: {
      logSavedSearchId: string;
      changeLogSavedSearchCompartmentDetails: ChangeLogSavedSearchCompartmentDetails;
      opcRetryToken?: string;
      ifMatch?: string;
      opcRequestId?: string;
    },
    options?: any
  ): Promise<Response> {
    base.validateRequiredParameters(
      ["logSavedSearchId", "changeLogSavedSearchCompartmentDetails"],
      "changeLogSavedSearchCompartment",
      params
    );

    const path = `${this.basePath}/logSavedSearches/{logSavedSearchId}/actions/changeCompartment`.replace(
      `{${"logSavedSearchId"}}`,
      `${params["logSavedSearchId"]}`
    );

    return this.request({
      options,
      path,

      headerParameters: {
        "opc-retry-token": params["opcRetryToken"],
        "if-match": params["ifMatch"],
        "opc-request-id": params["opcRequestId"],
      },

      body: {
        type: "content",
        contentType: (params as any)["contentType"]
          ? ((params as any)["contentType"] as string)
          : "application/json",
        content: params["changeLogSavedSearchCompartmentDetails"],
      },

      operationName: "changeLogSavedSearchCompartment",
      httpMethod: "POST",
    });
  }
  /**
   * Change the unified agent configuration compartment.
   * Moves the unified agent configuration into a different compartment within the same tenancy. When provided, the If-Match is checked against the ETag values of the resource. For information about moving resources between compartments, see [Moving Resources Between Compartments](/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   * @param registrationId
   * @param changeUAConfigRegistrationCompartmentDetails Request to change the compartment of a given resource.
   * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public changeUAConfigRegistrationCompartment(
    params: {
      registrationId: string;
      changeUAConfigRegistrationCompartmentDetails: ChangeUAConfigRegistrationCompartmentDetails;
      ifMatch?: string;
      opcRequestId?: string;
    },
    options?: any
  ): Promise<Response> {
    base.validateRequiredParameters(
      ["registrationId", "changeUAConfigRegistrationCompartmentDetails"],
      "changeUAConfigRegistrationCompartment",
      params
    );

    const path = `${this.basePath}/unifiedAgent/configRegistration/{registrationId}/actions/changeCompartment`.replace(
      `{${"registrationId"}}`,
      `${params["registrationId"]}`
    );

    return this.request({
      options,
      path,

      headerParameters: {
        "if-match": params["ifMatch"],
        "opc-request-id": params["opcRequestId"],
      },

      body: {
        type: "content",
        contentType: (params as any)["contentType"]
          ? ((params as any)["contentType"] as string)
          : "application/json",
        content: params["changeUAConfigRegistrationCompartmentDetails"],
      },

      operationName: "changeUAConfigRegistrationCompartment",
      httpMethod: "POST",
    });
  }
  /**
   * Change the unified agent configuration compartment.
   * Moves the unified agent configuration into a different compartment within the same tenancy.  When provided, the If-Match is checked against the ETag values of the resource. For information about moving resources between compartments, see [Moving Resources Between Compartments](/iaas/Content/Identity/Tasks/managingcompartments.htm#moveRes).
   * @param unifiedAgentConfigurationId The OCID of the Unified Agent configuration.
   * @param changeUnifiedAgentConfigurationCompartmentDetails Request to change the compartment of a given resource.
   * @param opcRetryToken A token that uniquely identifies a request so it can be retried in case of a timeout or server error, without risk of executing that same action again. Retry tokens expire after 24 hours, but can be invalidated before then due to conflicting operations (e.g., if a resource has been deleted and purged from the system, then a retry of the original creation request may be rejected).
   * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public changeUnifiedAgentConfigurationCompartment(
    params: {
      unifiedAgentConfigurationId: string;
      changeUnifiedAgentConfigurationCompartmentDetails: ChangeUnifiedAgentConfigurationCompartmentDetails;
      opcRetryToken?: string;
      ifMatch?: string;
      opcRequestId?: string;
    },
    options?: any
  ): Promise<Response> {
    base.validateRequiredParameters(
      [
        "unifiedAgentConfigurationId",
        "changeUnifiedAgentConfigurationCompartmentDetails",
      ],
      "changeUnifiedAgentConfigurationCompartment",
      params
    );

    const path = `${this.basePath}/unifiedAgentConfigurations/{unifiedAgentConfigurationId}/actions/changeCompartment`.replace(
      `{${"unifiedAgentConfigurationId"}}`,
      `${params["unifiedAgentConfigurationId"]}`
    );

    return this.request({
      options,
      path,

      headerParameters: {
        "opc-retry-token": params["opcRetryToken"],
        "if-match": params["ifMatch"],
        "opc-request-id": params["opcRequestId"],
      },

      body: {
        type: "content",
        contentType: (params as any)["contentType"]
          ? ((params as any)["contentType"] as string)
          : "application/json",
        content: params["changeUnifiedAgentConfigurationCompartmentDetails"],
      },

      operationName: "changeUnifiedAgentConfigurationCompartment",
      httpMethod: "POST",
    });
  }
  /**
   * Creates a new log object.
   * Creates a log within the specified log group. This call fails if a log group has already been created with the same displayName or (service, resource, category) triplet.
   * @param logGroupId OCID of a log group to work with.
   * @param createLogDetails Log object configuration details.
   * @param opcRetryToken A token that uniquely identifies a request so it can be retried in case of a timeout or server error, without risk of executing that same action again. Retry tokens expire after 24 hours, but can be invalidated before then due to conflicting operations (e.g., if a resource has been deleted and purged from the system, then a retry of the original creation request may be rejected).
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public createLog(
    params: {
      logGroupId: string;
      createLogDetails: CreateLogDetails;
      opcRetryToken?: string;
      opcRequestId?: string;
    },
    options?: any
  ): Promise<Response> {
    base.validateRequiredParameters(
      ["logGroupId", "createLogDetails"],
      "createLog",
      params
    );

    const path = `${this.basePath}/logGroups/{logGroupId}/logs`.replace(
      `{${"logGroupId"}}`,
      `${params["logGroupId"]}`
    );

    return this.request({
      options,
      path,

      headerParameters: {
        "opc-retry-token": params["opcRetryToken"],
        "opc-request-id": params["opcRequestId"],
      },

      body: {
        type: "content",
        contentType: (params as any)["contentType"]
          ? ((params as any)["contentType"] as string)
          : "application/json",
        content: params["createLogDetails"],
      },

      operationName: "createLog",
      httpMethod: "POST",
    });
  }
  /**
   * Creates new log group.
   * Create a new log group with a unique display name. This call fails if the log group is already created with the same displayName in the compartment.
   * @param createLogGroupDetails Details to create log group.
   * @param opcRetryToken A token that uniquely identifies a request so it can be retried in case of a timeout or server error, without risk of executing that same action again. Retry tokens expire after 24 hours, but can be invalidated before then due to conflicting operations (e.g., if a resource has been deleted and purged from the system, then a retry of the original creation request may be rejected).
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public createLogGroup(
    params: {
      createLogGroupDetails: CreateLogGroupDetails;
      opcRetryToken?: string;
      opcRequestId?: string;
    },
    options?: any
  ): Promise<Response> {
    base.validateRequiredParameters(
      ["createLogGroupDetails"],
      "createLogGroup",
      params
    );

    const path = `${this.basePath}/logGroups`;

    return this.request({
      options,
      path,

      headerParameters: {
        "opc-retry-token": params["opcRetryToken"],
        "opc-request-id": params["opcRequestId"],
      },

      body: {
        type: "content",
        contentType: (params as any)["contentType"]
          ? ((params as any)["contentType"] as string)
          : "application/json",
        content: params["createLogGroupDetails"],
      },

      operationName: "createLogGroup",
      httpMethod: "POST",
    });
  }
  /**
   * Creates a new LogSavedSearch.
   * Creates a new LogSavedSearch.
   * @param createLogSavedSearchDetails Specification of the saved search to create.
   * @param opcRetryToken A token that uniquely identifies a request so it can be retried in case of a timeout or server error, without risk of executing that same action again. Retry tokens expire after 24 hours, but can be invalidated before then due to conflicting operations (e.g., if a resource has been deleted and purged from the system, then a retry of the original creation request may be rejected).
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public createLogSavedSearch(
    params: {
      createLogSavedSearchDetails: CreateLogSavedSearchDetails;
      opcRetryToken?: string;
      opcRequestId?: string;
    },
    options?: any
  ): Promise<{ response: Response; data: LogSavedSearch }> {
    base.validateRequiredParameters(
      ["createLogSavedSearchDetails"],
      "createLogSavedSearch",
      params
    );

    const path = `${this.basePath}/logSavedSearches`;

    return this.request<LogSavedSearch>({
      options,
      path,

      headerParameters: {
        "opc-retry-token": params["opcRetryToken"],
        "opc-request-id": params["opcRequestId"],
      },

      body: {
        type: "content",
        contentType: (params as any)["contentType"]
          ? ((params as any)["contentType"] as string)
          : "application/json",
        content: params["createLogSavedSearchDetails"],
      },

      parseResponseBody: true,

      operationName: "createLogSavedSearch",
      httpMethod: "POST",
    });
  }
  /**
   * Post unified agent configuration.
   * Create unified agent configuration registration.
   * @param createUnifiedAgentConfigurationDetails Unified agent configuration creation object.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   * @param opcRetryToken A token that uniquely identifies a request so it can be retried in case of a timeout or server error, without risk of executing that same action again. Retry tokens expire after 24 hours, but can be invalidated before then due to conflicting operations (e.g., if a resource has been deleted and purged from the system, then a retry of the original creation request may be rejected).
   */
  public createUnifiedAgentConfiguration(
    params: {
      createUnifiedAgentConfigurationDetails: CreateUnifiedAgentConfigurationDetails;
      opcRequestId?: string;
      opcRetryToken?: string;
    },
    options?: any
  ): Promise<Response> {
    base.validateRequiredParameters(
      ["createUnifiedAgentConfigurationDetails"],
      "createUnifiedAgentConfiguration",
      params
    );

    const path = `${this.basePath}/unifiedAgentConfigurations`;

    return this.request({
      options,
      path,

      headerParameters: {
        "opc-request-id": params["opcRequestId"],
        "opc-retry-token": params["opcRetryToken"],
      },

      body: {
        type: "content",
        contentType: (params as any)["contentType"]
          ? ((params as any)["contentType"] as string)
          : "application/json",
        content: params["createUnifiedAgentConfigurationDetails"],
      },

      operationName: "createUnifiedAgentConfiguration",
      httpMethod: "POST",
    });
  }
  /**
   * Post unified agent configuration registration for a namespace.
   * Create the unified agent configuration registration.
   * @param configRegistrationDetails
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   * @param opcRetryToken A token that uniquely identifies a request so it can be retried in case of a timeout or server error, without risk of executing that same action again. Retry tokens expire after 24 hours, but can be invalidated before then due to conflicting operations (e.g., if a resource has been deleted and purged from the system, then a retry of the original creation request may be rejected).
   */
  public createUnifiedAgentRegistration(
    params: {
      configRegistrationDetails: UAConfigRegistrationDetails;
      opcRequestId?: string;
      opcRetryToken?: string;
    },
    options?: any
  ): Promise<Response> {
    base.validateRequiredParameters(
      ["configRegistrationDetails"],
      "createUnifiedAgentRegistration",
      params
    );

    const path = `${this.basePath}/unifiedAgent/configRegistration`;

    return this.request({
      options,
      path,

      headerParameters: {
        "opc-request-id": params["opcRequestId"],
        "opc-retry-token": params["opcRetryToken"],
      },

      body: {
        type: "content",
        contentType: (params as any)["contentType"]
          ? ((params as any)["contentType"] as string)
          : "application/json",
        content: params["configRegistrationDetails"],
      },

      operationName: "createUnifiedAgentRegistration",
      httpMethod: "POST",
    });
  }
  /**
   * Post Continuos Query.
   * Create query engine service.
   * @param queryId
   * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public deleteContinuousQuery(
    params: { queryId: string; ifMatch?: string; opcRequestId?: string },
    options?: any
  ): Promise<Response> {
    base.validateRequiredParameters(
      ["queryId"],
      "deleteContinuousQuery",
      params
    );

    const path = `${this.basePath}/continuousquery/{queryId}`.replace(
      `{${"queryId"}}`,
      `${params["queryId"]}`
    );

    return this.request({
      options,
      path,

      headerParameters: {
        "if-match": params["ifMatch"],
        "opc-request-id": params["opcRequestId"],
      },

      operationName: "deleteContinuousQuery",
      httpMethod: "DELETE",
    });
  }
  /**
   * Deletes the log object in a log group.
   * Deletes the log object in a log group.
   * @param logGroupId OCID of a log group to work with.
   * @param logId OCID of a log to work with.
   * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public deleteLog(
    params: {
      logGroupId: string;
      logId: string;
      ifMatch?: string;
      opcRequestId?: string;
    },
    options?: any
  ): Promise<Response> {
    base.validateRequiredParameters(
      ["logGroupId", "logId"],
      "deleteLog",
      params
    );

    const path = `${this.basePath}/logGroups/{logGroupId}/logs/{logId}`
      .replace(`{${"logGroupId"}}`, `${params["logGroupId"]}`)
      .replace(`{${"logId"}}`, `${params["logId"]}`);

    return this.request({
      options,
      path,

      headerParameters: {
        "if-match": params["ifMatch"],
        "opc-request-id": params["opcRequestId"],
      },

      operationName: "deleteLog",
      httpMethod: "DELETE",
    });
  }
  /**
   * Deletes the log group configuration with the log group OCID.
   * Deletes the specified log group.
   * @param logGroupId OCID of a log group to work with.
   * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public deleteLogGroup(
    params: { logGroupId: string; ifMatch?: string; opcRequestId?: string },
    options?: any
  ): Promise<Response> {
    base.validateRequiredParameters(["logGroupId"], "deleteLogGroup", params);

    const path = `${this.basePath}/logGroups/{logGroupId}`.replace(
      `{${"logGroupId"}}`,
      `${params["logGroupId"]}`
    );

    return this.request({
      options,
      path,

      headerParameters: {
        "if-match": params["ifMatch"],
        "opc-request-id": params["opcRequestId"],
      },

      operationName: "deleteLogGroup",
      httpMethod: "DELETE",
    });
  }
  /**
   * Deletes a LogSavedSearch.
   * Deletes the specified LogSavedSearch.
   * @param logSavedSearchId OCID of the logSavedSearch.
   * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public deleteLogSavedSearch(
    params: {
      logSavedSearchId: string;
      ifMatch?: string;
      opcRequestId?: string;
    },
    options?: any
  ): Promise<Response> {
    base.validateRequiredParameters(
      ["logSavedSearchId"],
      "deleteLogSavedSearch",
      params
    );

    const path = `${this.basePath}/logSavedSearches/{logSavedSearchId}`.replace(
      `{${"logSavedSearchId"}}`,
      `${params["logSavedSearchId"]}`
    );

    return this.request({
      options,
      path,

      headerParameters: {
        "if-match": params["ifMatch"],
        "opc-request-id": params["opcRequestId"],
      },

      operationName: "deleteLogSavedSearch",
      httpMethod: "DELETE",
    });
  }
  /**
   * Delete unified agent configuration.
   * Delete unified agent configuration.
   * @param unifiedAgentConfigurationId The OCID of the Unified Agent configuration.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value.
   */
  public deleteUnifiedAgentConfiguration(
    params: {
      unifiedAgentConfigurationId: string;
      opcRequestId?: string;
      ifMatch?: string;
    },
    options?: any
  ): Promise<Response> {
    base.validateRequiredParameters(
      ["unifiedAgentConfigurationId"],
      "deleteUnifiedAgentConfiguration",
      params
    );

    const path = `${this.basePath}/unifiedAgentConfigurations/{unifiedAgentConfigurationId}`.replace(
      `{${"unifiedAgentConfigurationId"}}`,
      `${params["unifiedAgentConfigurationId"]}`
    );

    return this.request({
      options,
      path,

      headerParameters: {
        "opc-request-id": params["opcRequestId"],
        "if-match": params["ifMatch"],
      },

      operationName: "deleteUnifiedAgentConfiguration",
      httpMethod: "DELETE",
    });
  }
  /**
   * Delete the unified agent configuration registration for a namespace with ID (registrationId).
   * Delete the unified agent configuration registration.
   * @param registrationId
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value.
   */
  public deleteUnifiedAgentRegistration(
    params: { registrationId: string; opcRequestId?: string; ifMatch?: string },
    options?: any
  ): Promise<Response> {
    base.validateRequiredParameters(
      ["registrationId"],
      "deleteUnifiedAgentRegistration",
      params
    );

    const path = `${this.basePath}/unifiedAgent/configRegistration/{registrationId}`.replace(
      `{${"registrationId"}}`,
      `${params["registrationId"]}`
    );

    return this.request({
      options,
      path,

      headerParameters: {
        "opc-request-id": params["opcRequestId"],
        "if-match": params["ifMatch"],
      },

      operationName: "deleteUnifiedAgentRegistration",
      httpMethod: "DELETE",
    });
  }
  /**
   * Cancel a work request.
   * Cancel a work request that has not started yet.
   * @param workRequestId The asynchronous request ID.
   * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public deleteWorkRequest(
    params: { workRequestId: string; ifMatch?: string; opcRequestId?: string },
    options?: any
  ): Promise<Response> {
    base.validateRequiredParameters(
      ["workRequestId"],
      "deleteWorkRequest",
      params
    );

    const path = `${this.basePath}/workRequests/{workRequestId}`.replace(
      `{${"workRequestId"}}`,
      `${params["workRequestId"]}`
    );

    return this.request({
      options,
      path,

      headerParameters: {
        "if-match": params["ifMatch"],
        "opc-request-id": params["opcRequestId"],
      },

      operationName: "deleteWorkRequest",
      httpMethod: "DELETE",
    });
  }
  /**
   * Generate an agent configuration for an instance.
   * Returns a generated agent fluent configuration for a host instance.
   * @param agentHostMetadataDetails
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public generateAgentFluentConfig(
    params: {
      agentHostMetadataDetails: AgentHostMetadataDetails;
      opcRequestId?: string;
    },
    options?: any
  ): Promise<{ response: Response; data: AgentFluentConfiguration }> {
    base.validateRequiredParameters(
      ["agentHostMetadataDetails"],
      "generateAgentFluentConfig",
      params
    );

    const path = `${this.basePath}/unifiedAgent/configRegistration/actions/generateAgentConfig`;

    return this.request<AgentFluentConfiguration>({
      options,
      path,

      headerParameters: {
        "opc-request-id": params["opcRequestId"],
      },

      body: {
        type: "content",
        contentType: (params as any)["contentType"]
          ? ((params as any)["contentType"] as string)
          : "application/json",
        content: params["agentHostMetadataDetails"],
      },

      parseResponseBody: true,

      operationName: "generateAgentFluentConfig",
      httpMethod: "POST",
    });
  }
  /**
   * Generate an agent configuration for an instance.
   * API that only accepts mtls requests. Returns the generated agent fluent configuration for a host instance.
   * @param agentHostMetadataDetails
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public generateAgentFluentConfigMtls(
    params: {
      agentHostMetadataDetails: AgentHostMetadataDetails;
      opcRequestId?: string;
    },
    options?: any
  ): Promise<{ response: Response; data: AgentFluentConfiguration }> {
    base.validateRequiredParameters(
      ["agentHostMetadataDetails"],
      "generateAgentFluentConfigMtls",
      params
    );

    const path = `${this.basePath}/unifiedAgent/configRegistration/actions/generateSubstrateAgentConfig`;

    return this.request<AgentFluentConfiguration>({
      options,
      path,

      headerParameters: {
        "opc-request-id": params["opcRequestId"],
      },

      body: {
        type: "content",
        contentType: (params as any)["contentType"]
          ? ((params as any)["contentType"] as string)
          : "application/json",
        content: params["agentHostMetadataDetails"],
      },

      parseResponseBody: true,

      operationName: "generateAgentFluentConfigMtls",
      httpMethod: "POST",
    });
  }
  /**
   * Get Continuos Queries.
   * Get continuous query.
   * @param queryId
   * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   * @param opcRetryToken A token that uniquely identifies a request so it can be retried in case of a timeout or server error, without risk of executing that same action again. Retry tokens expire after 24 hours, but can be invalidated before then due to conflicting operations (e.g., if a resource has been deleted and purged from the system, then a retry of the original creation request may be rejected).
   */
  public getContinuousQuery(
    params: {
      queryId: string;
      ifMatch?: string;
      opcRequestId?: string;
      opcRetryToken?: string;
    },
    options?: any
  ): Promise<{ response: Response; data: ContinuousQuery }> {
    base.validateRequiredParameters(["queryId"], "getContinuousQuery", params);

    const path = `${this.basePath}/continuousquery/{queryId}`.replace(
      `{${"queryId"}}`,
      `${params["queryId"]}`
    );

    return this.request<ContinuousQuery>({
      options,
      path,

      headerParameters: {
        "if-match": params["ifMatch"],
        "opc-request-id": params["opcRequestId"],
        "opc-retry-token": params["opcRetryToken"],
      },

      parseResponseBody: true,

      operationName: "getContinuousQuery",
      httpMethod: "GET",
    });
  }
  /**
   * Get the generated configuration for a unified agent instance.
   * Get the generated agent configuration for a unified agent.
   * @param fluentType Type of fluent d/bit.
   * @param fluentVersion Version of fluent d/bit.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   * @param hostIdentifier Unique Identifier for the host running the agent that calls the CP. It can either be hostname or user id
   */
  public getGeneratedUnifiedAgentConfiguration(
    params: {
      fluentType: string;
      fluentVersion: string;
      opcRequestId?: string;
      hostIdentifier?: string;
    },
    options?: any
  ): Promise<{ response: Response; data: UnifiedAgentGeneratedConfiguration }> {
    base.validateRequiredParameters(
      ["fluentType", "fluentVersion"],
      "getGeneratedUnifiedAgentConfiguration",
      params
    );

    const path = `${this.basePath}/generatedUnifiedAgentConfiguration`;

    return this.request<UnifiedAgentGeneratedConfiguration>({
      options,
      path,

      queryParameters: {
        fluentType: { values: params["fluentType"] },
        fluentVersion: { values: params["fluentVersion"] },
      },

      headerParameters: {
        "opc-request-id": params["opcRequestId"],
        "host-identifier": params["hostIdentifier"],
      },

      parseResponseBody: true,

      operationName: "getGeneratedUnifiedAgentConfiguration",
      httpMethod: "GET",
    });
  }
  /**
   * Gets the log object configuration for the log object OCID.
   * Gets the log object configuration for the log object OCID.
   * @param logGroupId OCID of a log group to work with.
   * @param logId OCID of a log to work with.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public getLog(
    params: { logGroupId: string; logId: string; opcRequestId?: string },
    options?: any
  ): Promise<{ response: Response; data: Log }> {
    base.validateRequiredParameters(["logGroupId", "logId"], "getLog", params);

    const path = `${this.basePath}/logGroups/{logGroupId}/logs/{logId}`
      .replace(`{${"logGroupId"}}`, `${params["logGroupId"]}`)
      .replace(`{${"logId"}}`, `${params["logId"]}`);

    return this.request<Log>({
      options,
      path,

      headerParameters: {
        "opc-request-id": params["opcRequestId"],
      },

      parseResponseBody: true,

      operationName: "getLog",
      httpMethod: "GET",
    });
  }
  /**
   * Gets the log group&#39;s configuration for the log group OCID.
   * Get the specified log group&#39;s information.
   * @param logGroupId OCID of a log group to work with.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public getLogGroup(
    params: { logGroupId: string; opcRequestId?: string },
    options?: any
  ): Promise<{ response: Response; data: LogGroup }> {
    base.validateRequiredParameters(["logGroupId"], "getLogGroup", params);

    const path = `${this.basePath}/logGroups/{logGroupId}`.replace(
      `{${"logGroupId"}}`,
      `${params["logGroupId"]}`
    );

    return this.request<LogGroup>({
      options,
      path,

      headerParameters: {
        "opc-request-id": params["opcRequestId"],
      },

      parseResponseBody: true,

      operationName: "getLogGroup",
      httpMethod: "GET",
    });
  }
  /**
   * Retrieves a LogSavedSearch.
   * Retrieves a LogSavedSearch.
   * @param logSavedSearchId OCID of the logSavedSearch.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public getLogSavedSearch(
    params: { logSavedSearchId: string; opcRequestId?: string },
    options?: any
  ): Promise<{ response: Response; data: LogSavedSearch }> {
    base.validateRequiredParameters(
      ["logSavedSearchId"],
      "getLogSavedSearch",
      params
    );

    const path = `${this.basePath}/logSavedSearches/{logSavedSearchId}`.replace(
      `{${"logSavedSearchId"}}`,
      `${params["logSavedSearchId"]}`
    );

    return this.request<LogSavedSearch>({
      options,
      path,

      headerParameters: {
        "opc-request-id": params["opcRequestId"],
      },

      parseResponseBody: true,

      operationName: "getLogSavedSearch",
      httpMethod: "GET",
    });
  }
  /**
   * Get the resource compartment ID in a work request.
   * Get the resource compartment ID for a given work request.
   * @param workRequestId The asynchronous request ID.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public getTargetCompartmentForWR(
    params: { workRequestId: string; opcRequestId?: string },
    options?: any
  ): Promise<{ response: Response; data: WorkRequestResourceCompartment }> {
    base.validateRequiredParameters(
      ["workRequestId"],
      "getTargetCompartmentForWR",
      params
    );

    const path = `${this.basePath}/workRequests/{workRequestId}/resourceCompartment`.replace(
      `{${"workRequestId"}}`,
      `${params["workRequestId"]}`
    );

    return this.request<WorkRequestResourceCompartment>({
      options,
      path,

      headerParameters: {
        "opc-request-id": params["opcRequestId"],
      },

      parseResponseBody: true,

      operationName: "getTargetCompartmentForWR",
      httpMethod: "GET",
    });
  }
  /**
   * Get the unified agent configuration registration.
   * Get the unified agent configuration registration.
   * @param registrationId
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public getUnifiedAgentConfigRegistration(
    params: { registrationId: string; opcRequestId?: string },
    options?: any
  ): Promise<{ response: Response; data: UAConfigRegistration }> {
    base.validateRequiredParameters(
      ["registrationId"],
      "getUnifiedAgentConfigRegistration",
      params
    );

    const path = `${this.basePath}/unifiedAgent/configRegistration/{registrationId}`.replace(
      `{${"registrationId"}}`,
      `${params["registrationId"]}`
    );

    return this.request<UAConfigRegistration>({
      options,
      path,

      headerParameters: {
        "opc-request-id": params["opcRequestId"],
      },

      parseResponseBody: true,

      operationName: "getUnifiedAgentConfigRegistration",
      httpMethod: "GET",
    });
  }
  /**
   * Get the unified agent configuration.
   * Get the unified agent configuration for an ID.
   * @param unifiedAgentConfigurationId The OCID of the Unified Agent configuration.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public getUnifiedAgentConfiguration(
    params: { unifiedAgentConfigurationId: string; opcRequestId?: string },
    options?: any
  ): Promise<{ response: Response; data: UnifiedAgentConfiguration }> {
    base.validateRequiredParameters(
      ["unifiedAgentConfigurationId"],
      "getUnifiedAgentConfiguration",
      params
    );

    const path = `${this.basePath}/unifiedAgentConfigurations/{unifiedAgentConfigurationId}`.replace(
      `{${"unifiedAgentConfigurationId"}}`,
      `${params["unifiedAgentConfigurationId"]}`
    );

    return this.request<UnifiedAgentConfiguration>({
      options,
      path,

      headerParameters: {
        "opc-request-id": params["opcRequestId"],
      },

      parseResponseBody: true,

      operationName: "getUnifiedAgentConfiguration",
      httpMethod: "GET",
    });
  }
  /**
   * Get the Work Request Details.
   * Gets the details of the work request with the given ID.
   * @param workRequestId The asynchronous request ID.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public getWorkRequest(
    params: { workRequestId: string; opcRequestId?: string },
    options?: any
  ): Promise<{ response: Response; data: WorkRequest }> {
    base.validateRequiredParameters(
      ["workRequestId"],
      "getWorkRequest",
      params
    );

    const path = `${this.basePath}/workRequests/{workRequestId}`.replace(
      `{${"workRequestId"}}`,
      `${params["workRequestId"]}`
    );

    return this.request<WorkRequest>({
      options,
      path,

      headerParameters: {
        "opc-request-id": params["opcRequestId"],
      },

      parseResponseBody: true,

      operationName: "getWorkRequest",
      httpMethod: "GET",
    });
  }
  /**
   * Lists all non-default log groups.
   * Lists all non-default log groups.
   * @param page For list pagination. The value of the &#x60;opc-next-page&#x60; or &#x60;opc-previous-page&#x60; response header from the previous \&quot;List\&quot; call. For important details about how pagination works, see [List Pagination](/iaas/Content/API/Concepts/usingapi.htm#nine).
   * @param limit The maximum number of items to return in a paginated \&quot;List\&quot; call.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public listAllLogGroups(
    params: { page?: string; limit?: number; opcRequestId?: string },
    options?: any
  ): Promise<{ response: Response; data: Array<LogGroup> }> {
    base.validateRequiredParameters([], "listAllLogGroups", params);

    const path = `${this.basePath}/bulkLogGroups`;

    return this.request<Array<LogGroup>>({
      options,
      path,

      queryParameters: {
        page: { values: params["page"] },
        limit: { values: params["limit"] },
      },

      headerParameters: {
        "opc-request-id": params["opcRequestId"],
      },

      parseResponseBody: true,

      operationName: "listAllLogGroups",
      httpMethod: "GET",
    });
  }
  /**
   * Lists all known log objects.
   * Lists all known log objects.
   * @param logId OCID of a log object to work with.
   * @param sourceService Service that created the log object.
   * @param page For list pagination. The value of the &#x60;opc-next-page&#x60; or &#x60;opc-previous-page&#x60; response header from the previous \&quot;List\&quot; call. For important details about how pagination works, see [List Pagination](/iaas/Content/API/Concepts/usingapi.htm#nine).
   * @param limit The maximum number of items to return in a paginated \&quot;List\&quot; call.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public listAllLogs(
    params: {
      logId?: string;
      sourceService?: string;
      page?: string;
      limit?: number;
      opcRequestId?: string;
    },
    options?: any
  ): Promise<{ response: Response; data: Array<Log> }> {
    base.validateRequiredParameters([], "listAllLogs", params);

    const path = `${this.basePath}/bulkLogs`;

    return this.request<Array<Log>>({
      options,
      path,

      queryParameters: {
        logId: { values: params["logId"] },
        sourceService: { values: params["sourceService"] },
        page: { values: params["page"] },
        limit: { values: params["limit"] },
      },

      headerParameters: {
        "opc-request-id": params["opcRequestId"],
      },

      parseResponseBody: true,

      operationName: "listAllLogs",
      httpMethod: "GET",
    });
  }
  /**
   * List Continuos Queries.
   * List continuous queries.
   * @param compartmentId Compartment OCID to list resources in. See compartmentIdInSubtree      for nested compartments traversal.
   * @param severity
   * @param page For list pagination. The value of the &#x60;opc-next-page&#x60; or &#x60;opc-previous-page&#x60; response header from the previous \&quot;List\&quot; call. For important details about how pagination works, see [List Pagination](/iaas/Content/API/Concepts/usingapi.htm#nine).
   * @param limit The maximum number of items to return in a paginated \&quot;List\&quot; call.
   * @param sortBy The field to sort by (one column only). Default sort order is ascending exception of &#x60;timeCreated&#x60; and &#x60;timeLastModified&#x60; columns (descending).
   * @param sortOrder The sort order to use, whether &#39;asc&#39; or &#39;desc&#39;.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public listContinuousQuery(
    params: {
      compartmentId: string;
      severity?: string;
      page?: string;
      limit?: number;
      sortBy?: string;
      sortOrder?: string;
      opcRequestId?: string;
    },
    options?: any
  ): Promise<{ response: Response; data: ContinuousQuerySummaryCollection }> {
    base.validateRequiredParameters(
      ["compartmentId"],
      "listContinuousQuery",
      params
    );

    const path = `${this.basePath}/continuousquery`;

    return this.request<ContinuousQuerySummaryCollection>({
      options,
      path,

      queryParameters: {
        compartmentId: { values: params["compartmentId"] },
        severity: { values: params["severity"] },
        page: { values: params["page"] },
        limit: { values: params["limit"] },
        sortBy: { values: params["sortBy"] },
        sortOrder: { values: params["sortOrder"] },
      },

      headerParameters: {
        "opc-request-id": params["opcRequestId"],
      },

      parseResponseBody: true,

      operationName: "listContinuousQuery",
      httpMethod: "GET",
    });
  }
  /**
   * Lists all log groups in the specified compartment.
   * Lists all log groups for the specified compartment or tenancy.
   * @param compartmentId Compartment OCID to list resources in. See compartmentIdInSubtree      for nested compartments traversal.
   * @param isCompartmentIdInSubtree Specifies whether or not nested compartments should be traversed. Defaults to false.
   * @param displayName Resource name.
   * @param page For list pagination. The value of the &#x60;opc-next-page&#x60; or &#x60;opc-previous-page&#x60; response header from the previous \&quot;List\&quot; call. For important details about how pagination works, see [List Pagination](/iaas/Content/API/Concepts/usingapi.htm#nine).
   * @param limit The maximum number of items to return in a paginated \&quot;List\&quot; call.
   * @param sortBy The field to sort by (one column only). Default sort order is ascending exception of &#x60;timeCreated&#x60; and &#x60;timeLastModified&#x60; columns (descending).
   * @param sortOrder The sort order to use, whether &#39;asc&#39; or &#39;desc&#39;.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public listLogGroups(
    params: {
      compartmentId: string;
      isCompartmentIdInSubtree?: boolean;
      displayName?: string;
      page?: string;
      limit?: number;
      sortBy?: string;
      sortOrder?: string;
      opcRequestId?: string;
    },
    options?: any
  ): Promise<{ response: Response; data: Array<LogGroupSummary> }> {
    base.validateRequiredParameters(["compartmentId"], "listLogGroups", params);

    const path = `${this.basePath}/logGroups`;

    return this.request<Array<LogGroupSummary>>({
      options,
      path,

      queryParameters: {
        compartmentId: { values: params["compartmentId"] },
        isCompartmentIdInSubtree: {
          values: params["isCompartmentIdInSubtree"],
        },
        displayName: { values: params["displayName"] },
        page: { values: params["page"] },
        limit: { values: params["limit"] },
        sortBy: { values: params["sortBy"] },
        sortOrder: { values: params["sortOrder"] },
      },

      headerParameters: {
        "opc-request-id": params["opcRequestId"],
      },

      parseResponseBody: true,

      operationName: "listLogGroups",
      httpMethod: "GET",
    });
  }
  /**
   * Lists LogSavedSearches for this compartment.
   * Lists LogSavedSearches for this compartment.
   * @param compartmentId Compartment OCID to list resources in. See compartmentIdInSubtree      for nested compartments traversal.
   * @param logSavedSearchId OCID of the LogSavedSearch.
   * @param name Resource name.
   * @param page For list pagination. The value of the &#x60;opc-next-page&#x60; or &#x60;opc-previous-page&#x60; response header from the previous \&quot;List\&quot; call. For important details about how pagination works, see [List Pagination](/iaas/Content/API/Concepts/usingapi.htm#nine).
   * @param limit The maximum number of items to return in a paginated \&quot;List\&quot; call.
   * @param sortBy The field to sort by (one column only). Default sort order is ascending exception of &#x60;timeCreated&#x60; and &#x60;timeLastModified&#x60; columns (descending).
   * @param sortOrder The sort order to use, whether &#39;asc&#39; or &#39;desc&#39;.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public listLogSavedSearches(
    params: {
      compartmentId: string;
      logSavedSearchId?: string;
      name?: string;
      page?: string;
      limit?: number;
      sortBy?: string;
      sortOrder?: string;
      opcRequestId?: string;
    },
    options?: any
  ): Promise<{ response: Response; data: LogSavedSearchSummaryCollection }> {
    base.validateRequiredParameters(
      ["compartmentId"],
      "listLogSavedSearches",
      params
    );

    const path = `${this.basePath}/logSavedSearches`;

    return this.request<LogSavedSearchSummaryCollection>({
      options,
      path,

      queryParameters: {
        compartmentId: { values: params["compartmentId"] },
        logSavedSearchId: { values: params["logSavedSearchId"] },
        name: { values: params["name"] },
        page: { values: params["page"] },
        limit: { values: params["limit"] },
        sortBy: { values: params["sortBy"] },
        sortOrder: { values: params["sortOrder"] },
      },

      headerParameters: {
        "opc-request-id": params["opcRequestId"],
      },

      parseResponseBody: true,

      operationName: "listLogSavedSearches",
      httpMethod: "GET",
    });
  }
  /**
   * Lists all log objects for the specified log group OCID belonging to a compartment or tenancy.
   * Lists the specified log group&#39;s log objects.
   * @param logGroupId OCID of a log group to work with.
   * @param logType The logType that the log object is for, whether custom or service.
   * @param sourceService Service that created the log object.
   * @param sourceResource Log object resource.
   * @param displayName Resource name.
   * @param lifecycleState Lifecycle state of the log object
   * @param page For list pagination. The value of the &#x60;opc-next-page&#x60; or &#x60;opc-previous-page&#x60; response header from the previous \&quot;List\&quot; call. For important details about how pagination works, see [List Pagination](/iaas/Content/API/Concepts/usingapi.htm#nine).
   * @param limit The maximum number of items to return in a paginated \&quot;List\&quot; call.
   * @param sortBy The field to sort by (one column only). Default sort order is ascending exception of &#x60;timeCreated&#x60; and &#x60;timeLastModified&#x60; columns (descending).
   * @param sortOrder The sort order to use, whether &#39;asc&#39; or &#39;desc&#39;.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public listLogs(
    params: {
      logGroupId: string;
      logType?: string;
      sourceService?: string;
      sourceResource?: string;
      displayName?: string;
      lifecycleState?: string;
      page?: string;
      limit?: number;
      sortBy?: string;
      sortOrder?: string;
      opcRequestId?: string;
    },
    options?: any
  ): Promise<{ response: Response; data: Array<LogSummary> }> {
    base.validateRequiredParameters(["logGroupId"], "listLogs", params);

    const path = `${this.basePath}/logGroups/{logGroupId}/logs`.replace(
      `{${"logGroupId"}}`,
      `${params["logGroupId"]}`
    );

    return this.request<Array<LogSummary>>({
      options,
      path,

      queryParameters: {
        logType: { values: params["logType"] },
        sourceService: { values: params["sourceService"] },
        sourceResource: { values: params["sourceResource"] },
        displayName: { values: params["displayName"] },
        lifecycleState: { values: params["lifecycleState"] },
        page: { values: params["page"] },
        limit: { values: params["limit"] },
        sortBy: { values: params["sortBy"] },
        sortOrder: { values: params["sortOrder"] },
      },

      headerParameters: {
        "opc-request-id": params["opcRequestId"],
      },

      parseResponseBody: true,

      operationName: "listLogs",
      httpMethod: "GET",
    });
  }
  /**
   * Lists all services that support logging.
   * Lists all services that support logging.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public listServices(
    params: { opcRequestId?: string },
    options?: any
  ): Promise<{ response: Response; data: Array<ServiceSummary> }> {
    base.validateRequiredParameters([], "listServices", params);

    const path = `${this.basePath}/v2/registry/services`;

    return this.request<Array<ServiceSummary>>({
      options,
      path,

      headerParameters: {
        "opc-request-id": params["opcRequestId"],
      },

      parseResponseBody: true,

      operationName: "listServices",
      httpMethod: "GET",
    });
  }
  /**
   * Lists all unified agent configurations in the specified compartment.
   * Lists all unified agent configurations in the specified compartment.
   * @param compartmentId Compartment OCID to list resources in. See compartmentIdInSubtree      for nested compartments traversal.
   * @param logId Custom log OCID to list resources with the log as destination.
   * @param isCompartmentIdInSubtree Specifies whether or not nested compartments should be traversed. Defaults to false.
   * @param groupId The OCID of a group or a dynamic group.
   * @param displayName Resource name.
   * @param lifecycleState Lifecycle state of the log object
   * @param limit The maximum number of items to return in a paginated \&quot;List\&quot; call.
   * @param page For list pagination. The value of the &#x60;opc-next-page&#x60; or &#x60;opc-previous-page&#x60; response header from the previous \&quot;List\&quot; call. For important details about how pagination works, see [List Pagination](/iaas/Content/API/Concepts/usingapi.htm#nine).
   * @param sortBy The field to sort by (one column only). Default sort order is ascending exception of &#x60;timeCreated&#x60; and &#x60;timeLastModified&#x60; columns (descending).
   * @param sortOrder The sort order to use, whether &#39;asc&#39; or &#39;desc&#39;.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public listUnifiedAgentConfigurations(
    params: {
      compartmentId: string;
      logId?: string;
      isCompartmentIdInSubtree?: boolean;
      groupId?: string;
      displayName?: string;
      lifecycleState?: string;
      limit?: number;
      page?: string;
      sortBy?: string;
      sortOrder?: string;
      opcRequestId?: string;
    },
    options?: any
  ): Promise<{
    response: Response;
    data: UnifiedAgentConfigurationCollection;
  }> {
    base.validateRequiredParameters(
      ["compartmentId"],
      "listUnifiedAgentConfigurations",
      params
    );

    const path = `${this.basePath}/unifiedAgentConfigurations`;

    return this.request<UnifiedAgentConfigurationCollection>({
      options,
      path,

      queryParameters: {
        compartmentId: { values: params["compartmentId"] },
        logId: { values: params["logId"] },
        isCompartmentIdInSubtree: {
          values: params["isCompartmentIdInSubtree"],
        },
        groupId: { values: params["groupId"] },
        displayName: { values: params["displayName"] },
        lifecycleState: { values: params["lifecycleState"] },
        limit: { values: params["limit"] },
        page: { values: params["page"] },
        sortBy: { values: params["sortBy"] },
        sortOrder: { values: params["sortOrder"] },
      },

      headerParameters: {
        "opc-request-id": params["opcRequestId"],
      },

      parseResponseBody: true,

      operationName: "listUnifiedAgentConfigurations",
      httpMethod: "GET",
    });
  }
  /**
   * Lists work request errors.
   * Return a list of errors for a given work request.
   * @param workRequestId The asynchronous request ID.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   * @param page For list pagination. The value of the &#x60;opc-next-page&#x60; or &#x60;opc-previous-page&#x60; response header from the previous \&quot;List\&quot; call. For important details about how pagination works, see [List Pagination](/iaas/Content/API/Concepts/usingapi.htm#nine).
   * @param limit The maximum number of items to return in a paginated \&quot;List\&quot; call.
   */
  public listWorkRequestErrors(
    params: {
      workRequestId: string;
      opcRequestId?: string;
      page?: string;
      limit?: number;
    },
    options?: any
  ): Promise<{ response: Response; data: Array<WorkRequestError> }> {
    base.validateRequiredParameters(
      ["workRequestId"],
      "listWorkRequestErrors",
      params
    );

    const path = `${this.basePath}/workRequests/{workRequestId}/errors`.replace(
      `{${"workRequestId"}}`,
      `${params["workRequestId"]}`
    );

    return this.request<Array<WorkRequestError>>({
      options,
      path,

      queryParameters: {
        page: { values: params["page"] },
        limit: { values: params["limit"] },
      },

      headerParameters: {
        "opc-request-id": params["opcRequestId"],
      },

      parseResponseBody: true,

      operationName: "listWorkRequestErrors",
      httpMethod: "GET",
    });
  }
  /**
   * Lists work request logs.
   * Return a list of logs for a given work request.
   * @param workRequestId The asynchronous request ID.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   * @param page For list pagination. The value of the &#x60;opc-next-page&#x60; or &#x60;opc-previous-page&#x60; response header from the previous \&quot;List\&quot; call. For important details about how pagination works, see [List Pagination](/iaas/Content/API/Concepts/usingapi.htm#nine).
   * @param limit The maximum number of items to return in a paginated \&quot;List\&quot; call.
   */
  public listWorkRequestLogs(
    params: {
      workRequestId: string;
      opcRequestId?: string;
      page?: string;
      limit?: number;
    },
    options?: any
  ): Promise<{ response: Response; data: Array<WorkRequestLog> }> {
    base.validateRequiredParameters(
      ["workRequestId"],
      "listWorkRequestLogs",
      params
    );

    const path = `${this.basePath}/workRequests/{workRequestId}/logs`.replace(
      `{${"workRequestId"}}`,
      `${params["workRequestId"]}`
    );

    return this.request<Array<WorkRequestLog>>({
      options,
      path,

      queryParameters: {
        page: { values: params["page"] },
        limit: { values: params["limit"] },
      },

      headerParameters: {
        "opc-request-id": params["opcRequestId"],
      },

      parseResponseBody: true,

      operationName: "listWorkRequestLogs",
      httpMethod: "GET",
    });
  }
  /**
   * List the work requests.
   * Lists the work requests in a compartment.
   * @param compartmentId Compartment OCID to list resources in. See compartmentIdInSubtree      for nested compartments traversal.
   * @param status Filter results by work request status.
   * @param id &lt;b&gt;Filter&lt;/b&gt; results by [OCID](/iaas/Content/API/Concepts/identifiers.htm). Must be an OCID of the correct type for the resource type.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   * @param page For list pagination. The value of the &#x60;opc-next-page&#x60; or &#x60;opc-previous-page&#x60; response header from the previous \&quot;List\&quot; call. For important details about how pagination works, see [List Pagination](/iaas/Content/API/Concepts/usingapi.htm#nine).
   * @param limit The maximum number of items to return in a paginated \&quot;List\&quot; call.
   * @param sortOrder The sort order to use, whether &#39;asc&#39; or &#39;desc&#39;.
   * @param sortBy Specifies the field to sort by. Accepts only one field. By default, when you sort by time fields, results are shown in descending order. All other fields default to ascending order.
   */
  public listWorkRequests(
    params: {
      compartmentId: string;
      status?: string;
      id?: string;
      opcRequestId?: string;
      page?: string;
      limit?: number;
      sortOrder?: string;
      sortBy?: string;
    },
    options?: any
  ): Promise<{ response: Response; data: Array<WorkRequestSummary> }> {
    base.validateRequiredParameters(
      ["compartmentId"],
      "listWorkRequests",
      params
    );

    const path = `${this.basePath}/workRequests`;

    return this.request<Array<WorkRequestSummary>>({
      options,
      path,

      queryParameters: {
        compartmentId: { values: params["compartmentId"] },
        status: { values: params["status"] },
        id: { values: params["id"] },
        page: { values: params["page"] },
        limit: { values: params["limit"] },
        sortOrder: { values: params["sortOrder"] },
        sortBy: { values: params["sortBy"] },
      },

      headerParameters: {
        "opc-request-id": params["opcRequestId"],
      },

      parseResponseBody: true,

      operationName: "listWorkRequests",
      httpMethod: "GET",
    });
  }
  /**
   * Lists all log objects for the specified log group OCID belonging to a compartment or tenancy.
   * Lists the specified log objects.
   * @param compartmentId Compartment OCID to list resources in. Please see compartmentIdInSubtree      for nested compartments traversal.
   * @param logId Custom log OCID to list resources with the log as destination.
   * @param logType The logType that the log object is for, whether custom or service.
   * @param sourceService Service that created the log object.
   * @param sourceResource Log object resource.
   * @param page For list pagination. The value of the &#x60;opc-next-page&#x60; or &#x60;opc-previous-page&#x60; response header from the previous \&quot;List\&quot; call. For important details about how pagination works, see [List Pagination](/iaas/Content/API/Concepts/usingapi.htm#nine).
   * @param limit The maximum number of items to return in a paginated \&quot;List\&quot; call.
   * @param sortBy The field to sort by (one column only). Default sort order is ascending exception of &#x60;timeCreated&#x60; and &#x60;timeLastModified&#x60; columns (descending).
   * @param sortOrder The sort order to use, whether &#39;asc&#39; or &#39;desc&#39;.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public searchLogs(
    params: {
      compartmentId?: string;
      logId?: string;
      logType?: string;
      sourceService?: string;
      sourceResource?: string;
      page?: string;
      limit?: number;
      sortBy?: string;
      sortOrder?: string;
      opcRequestId?: string;
    },
    options?: any
  ): Promise<{ response: Response; data: Array<LogSummary> }> {
    base.validateRequiredParameters([], "searchLogs", params);

    const path = `${this.basePath}/searchLogs`;

    return this.request<Array<LogSummary>>({
      options,
      path,

      queryParameters: {
        compartmentId: { values: params["compartmentId"] },
        logId: { values: params["logId"] },
        logType: { values: params["logType"] },
        sourceService: { values: params["sourceService"] },
        sourceResource: { values: params["sourceResource"] },
        page: { values: params["page"] },
        limit: { values: params["limit"] },
        sortBy: { values: params["sortBy"] },
        sortOrder: { values: params["sortOrder"] },
      },

      headerParameters: {
        "opc-request-id": params["opcRequestId"],
      },

      parseResponseBody: true,

      operationName: "searchLogs",
      httpMethod: "GET",
    });
  }
  /**
   * Post Continuos Query.
   * Create query engine service.
   * @param queryId
   * @param continuousQueryDetails Continous Query creation object.
   * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public updateContinuousQuery(
    params: {
      queryId: string;
      continuousQueryDetails: ContinuousQueryDetails;
      ifMatch?: string;
      opcRequestId?: string;
    },
    options?: any
  ): Promise<{ response: Response; data: ContinuousQuery }> {
    base.validateRequiredParameters(
      ["queryId", "continuousQueryDetails"],
      "updateContinuousQuery",
      params
    );

    const path = `${this.basePath}/continuousquery/{queryId}`.replace(
      `{${"queryId"}}`,
      `${params["queryId"]}`
    );

    return this.request<ContinuousQuery>({
      options,
      path,

      headerParameters: {
        "if-match": params["ifMatch"],
        "opc-request-id": params["opcRequestId"],
      },

      body: {
        type: "content",
        contentType: (params as any)["contentType"]
          ? ((params as any)["contentType"] as string)
          : "application/json",
        content: params["continuousQueryDetails"],
      },

      parseResponseBody: true,

      operationName: "updateContinuousQuery",
      httpMethod: "PUT",
    });
  }
  /**
   * Updates the existing log object configuration.
   * Updates the existing log object with the associated configuration. This call       fails if the log object does not exist.
   * @param logGroupId OCID of a log group to work with.
   * @param logId OCID of a log to work with.
   * @param updateLogDetails Log config parameters to update.
   * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public updateLog(
    params: {
      logGroupId: string;
      logId: string;
      updateLogDetails: UpdateLogDetails;
      ifMatch?: string;
      opcRequestId?: string;
    },
    options?: any
  ): Promise<Response> {
    base.validateRequiredParameters(
      ["logGroupId", "logId", "updateLogDetails"],
      "updateLog",
      params
    );

    const path = `${this.basePath}/logGroups/{logGroupId}/logs/{logId}`
      .replace(`{${"logGroupId"}}`, `${params["logGroupId"]}`)
      .replace(`{${"logId"}}`, `${params["logId"]}`);

    return this.request({
      options,
      path,

      headerParameters: {
        "if-match": params["ifMatch"],
        "opc-request-id": params["opcRequestId"],
      },

      body: {
        type: "content",
        contentType: (params as any)["contentType"]
          ? ((params as any)["contentType"] as string)
          : "application/json",
        content: params["updateLogDetails"],
      },

      operationName: "updateLog",
      httpMethod: "PUT",
    });
  }
  /**
   * Updates the existing log group configuration.
   * Updates the existing log group with the associated configuration. This call       fails if the log group does not exist.
   * @param logGroupId OCID of a log group to work with.
   * @param updateLogGroupDetails LogGroup config parameters to update.
   * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public updateLogGroup(
    params: {
      logGroupId: string;
      updateLogGroupDetails: UpdateLogGroupDetails;
      ifMatch?: string;
      opcRequestId?: string;
    },
    options?: any
  ): Promise<Response> {
    base.validateRequiredParameters(
      ["logGroupId", "updateLogGroupDetails"],
      "updateLogGroup",
      params
    );

    const path = `${this.basePath}/logGroups/{logGroupId}`.replace(
      `{${"logGroupId"}}`,
      `${params["logGroupId"]}`
    );

    return this.request({
      options,
      path,

      headerParameters: {
        "if-match": params["ifMatch"],
        "opc-request-id": params["opcRequestId"],
      },

      body: {
        type: "content",
        contentType: (params as any)["contentType"]
          ? ((params as any)["contentType"] as string)
          : "application/json",
        content: params["updateLogGroupDetails"],
      },

      operationName: "updateLogGroup",
      httpMethod: "PUT",
    });
  }
  /**
   * Updates a LogSavedSearch.
   * Updates an  existing LogSavedSearch.
   * @param logSavedSearchId OCID of the logSavedSearch.
   * @param updateLogSavedSearchDetails Updates to the saved search.
   * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public updateLogSavedSearch(
    params: {
      logSavedSearchId: string;
      updateLogSavedSearchDetails: UpdateLogSavedSearchDetails;
      ifMatch?: string;
      opcRequestId?: string;
    },
    options?: any
  ): Promise<{ response: Response; data: LogSavedSearch }> {
    base.validateRequiredParameters(
      ["logSavedSearchId", "updateLogSavedSearchDetails"],
      "updateLogSavedSearch",
      params
    );

    const path = `${this.basePath}/logSavedSearches/{logSavedSearchId}`.replace(
      `{${"logSavedSearchId"}}`,
      `${params["logSavedSearchId"]}`
    );

    return this.request<LogSavedSearch>({
      options,
      path,

      headerParameters: {
        "if-match": params["ifMatch"],
        "opc-request-id": params["opcRequestId"],
      },

      body: {
        type: "content",
        contentType: (params as any)["contentType"]
          ? ((params as any)["contentType"] as string)
          : "application/json",
        content: params["updateLogSavedSearchDetails"],
      },

      parseResponseBody: true,

      operationName: "updateLogSavedSearch",
      httpMethod: "PUT",
    });
  }
  /**
   * Updates an existing unified agent configuration.
   * Update an existing unified agent configuration. This call       fails if the log group does not exist.
   * @param unifiedAgentConfigurationId The OCID of the Unified Agent configuration.
   * @param updateUnifiedAgentConfigurationDetails Unified agent configuration to update. Empty group associations list doesn&#39;t modify the list, null value for group association clears all the previous associations.
   * @param ifMatch For optimistic concurrency control. In the PUT or DELETE call for a resource, set the &#x60;if-match&#x60; parameter to the value of the etag from a previous GET or POST response for that resource. The resource will be updated or deleted only if the etag you provide matches the resource&#39;s current etag value.
   * @param opcRequestId Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a particular request, please provide the request ID.
   */
  public updateUnifiedAgentConfiguration(
    params: {
      unifiedAgentConfigurationId: string;
      updateUnifiedAgentConfigurationDetails: UpdateUnifiedAgentConfigurationDetails;
      ifMatch?: string;
      opcRequestId?: string;
    },
    options?: any
  ): Promise<Response> {
    base.validateRequiredParameters(
      ["unifiedAgentConfigurationId", "updateUnifiedAgentConfigurationDetails"],
      "updateUnifiedAgentConfiguration",
      params
    );

    const path = `${this.basePath}/unifiedAgentConfigurations/{unifiedAgentConfigurationId}`.replace(
      `{${"unifiedAgentConfigurationId"}}`,
      `${params["unifiedAgentConfigurationId"]}`
    );

    return this.request({
      options,
      path,

      headerParameters: {
        "if-match": params["ifMatch"],
        "opc-request-id": params["opcRequestId"],
      },

      body: {
        type: "content",
        contentType: (params as any)["contentType"]
          ? ((params as any)["contentType"] as string)
          : "application/json",
        content: params["updateUnifiedAgentConfigurationDetails"],
      },

      operationName: "updateUnifiedAgentConfiguration",
      httpMethod: "PUT",
    });
  }
}
